
BT_audio_base_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800c040  0800c040  0001c040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c488  0800c488  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c488  0800c488  0001c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c490  0800c490  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c490  0800c490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c494  0800c494  0001c494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800c498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000cd90  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ce2c  2000ce2c  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdc4  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e29  00000000  00000000  0003fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  00043cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  00045398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000041dc  00000000  00000000  000468f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a459  00000000  00000000  0004aad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8281  00000000  00000000  00064f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c3  00000000  00000000  0013d1ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c48  00000000  00000000  0013d274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000005bb  00000000  00000000  00143ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c024 	.word	0x0800c024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800c024 	.word	0x0800c024

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <calc_shelf_coeffs>:

/* USER CODE BEGIN PFP */


void calc_shelf_coeffs(int8_t dBGain, uint8_t band_num, uint16_t f0, float BW)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	ed87 0a00 	vstr	s0, [r7]
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	4613      	mov	r3, r2
 8000f54:	80bb      	strh	r3, [r7, #4]
	w0 = M_PI*f0/24000.0; // omega 0 dla f center
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fae3 	bl	8000524 <__aeabi_i2d>
 8000f5e:	a3e6      	add	r3, pc, #920	; (adr r3, 80012f8 <calc_shelf_coeffs+0x3b8>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	a3e3      	add	r3, pc, #908	; (adr r3, 8001300 <calc_shelf_coeffs+0x3c0>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fc69 	bl	800084c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fe11 	bl	8000ba8 <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4ad1      	ldr	r2, [pc, #836]	; (80012d0 <calc_shelf_coeffs+0x390>)
 8000f8a:	6013      	str	r3, [r2, #0]
	coss = cos(w0);
 8000f8c:	4bd0      	ldr	r3, [pc, #832]	; (80012d0 <calc_shelf_coeffs+0x390>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fad9 	bl	8000548 <__aeabi_f2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	ec43 2b10 	vmov	d0, r2, r3
 8000f9e:	f009 f85f 	bl	800a060 <cos>
 8000fa2:	ec53 2b10 	vmov	r2, r3, d0
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fdfd 	bl	8000ba8 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4ac8      	ldr	r2, [pc, #800]	; (80012d4 <calc_shelf_coeffs+0x394>)
 8000fb2:	6013      	str	r3, [r2, #0]



	Q = pow(2.0, BW);
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_f2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	ec43 2b11 	vmov	d1, r2, r3
 8000fc2:	ed9f 0bbd 	vldr	d0, [pc, #756]	; 80012b8 <calc_shelf_coeffs+0x378>
 8000fc6:	f009 f8ef 	bl	800a1a8 <pow>
 8000fca:	ec53 2b10 	vmov	r2, r3, d0
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fde9 	bl	8000ba8 <__aeabi_d2f>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4abf      	ldr	r2, [pc, #764]	; (80012d8 <calc_shelf_coeffs+0x398>)
 8000fda:	6013      	str	r3, [r2, #0]
	Q = sqrt(Q)/(Q-1); //jezeli jest to w formie Q
 8000fdc:	4bbe      	ldr	r3, [pc, #760]	; (80012d8 <calc_shelf_coeffs+0x398>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fab1 	bl	8000548 <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ec43 2b10 	vmov	d0, r2, r3
 8000fee:	f009 f989 	bl	800a304 <sqrt>
 8000ff2:	ec55 4b10 	vmov	r4, r5, d0
 8000ff6:	4bb8      	ldr	r3, [pc, #736]	; (80012d8 <calc_shelf_coeffs+0x398>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001004:	ee17 0a90 	vmov	r0, s15
 8001008:	f7ff fa9e 	bl	8000548 <__aeabi_f2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4620      	mov	r0, r4
 8001012:	4629      	mov	r1, r5
 8001014:	f7ff fc1a 	bl	800084c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fdc2 	bl	8000ba8 <__aeabi_d2f>
 8001024:	4603      	mov	r3, r0
 8001026:	4aac      	ldr	r2, [pc, #688]	; (80012d8 <calc_shelf_coeffs+0x398>)
 8001028:	6013      	str	r3, [r2, #0]
	al = sin(w0)/(2.0*Q);
 800102a:	4ba9      	ldr	r3, [pc, #676]	; (80012d0 <calc_shelf_coeffs+0x390>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa8a 	bl	8000548 <__aeabi_f2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	ec43 2b10 	vmov	d0, r2, r3
 800103c:	f009 f860 	bl	800a100 <sin>
 8001040:	ec55 4b10 	vmov	r4, r5, d0
 8001044:	4ba4      	ldr	r3, [pc, #656]	; (80012d8 <calc_shelf_coeffs+0x398>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa7d 	bl	8000548 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	f7ff f91b 	bl	800028c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff fbf5 	bl	800084c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd9d 	bl	8000ba8 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a9a      	ldr	r2, [pc, #616]	; (80012dc <calc_shelf_coeffs+0x39c>)
 8001072:	6013      	str	r3, [r2, #0]

	A = ((float)dBGain)*0.025; // gain (NOT dB)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	ee17 0a90 	vmov	r0, s15
 8001084:	f7ff fa60 	bl	8000548 <__aeabi_f2d>
 8001088:	a38d      	add	r3, pc, #564	; (adr r3, 80012c0 <calc_shelf_coeffs+0x380>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fd85 	bl	8000ba8 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a8f      	ldr	r2, [pc, #572]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010a2:	6013      	str	r3, [r2, #0]
	A = pow(10.0, A);
 80010a4:	4b8e      	ldr	r3, [pc, #568]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa4d 	bl	8000548 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	ec43 2b11 	vmov	d1, r2, r3
 80010b6:	ed9f 0b84 	vldr	d0, [pc, #528]	; 80012c8 <calc_shelf_coeffs+0x388>
 80010ba:	f009 f875 	bl	800a1a8 <pow>
 80010be:	ec53 2b10 	vmov	r2, r3, d0
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd6f 	bl	8000ba8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a84      	ldr	r2, [pc, #528]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010ce:	6013      	str	r3, [r2, #0]

	Ap1 = A+1.0;
 80010d0:	4b83      	ldr	r3, [pc, #524]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010de:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 80010e0:	edc3 7a00 	vstr	s15, [r3]
	Am1 = A-1.0;
 80010e4:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010f2:	4b7d      	ldr	r3, [pc, #500]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
	sA = sqrt(A);
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ec43 2b10 	vmov	d0, r2, r3
 800110a:	f009 f8fb 	bl	800a304 <sqrt>
 800110e:	ec53 2b10 	vmov	r2, r3, d0
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd47 	bl	8000ba8 <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	4a73      	ldr	r2, [pc, #460]	; (80012ec <calc_shelf_coeffs+0x3ac>)
 800111e:	6013      	str	r3, [r2, #0]


	if(band_num == 3) //low - shelf
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	2b03      	cmp	r3, #3
 8001124:	f040 810f 	bne.w	8001346 <calc_shelf_coeffs+0x406>
	{

	a0 = Ap1+Am1*coss+2 * sA*al;
 8001128:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <calc_shelf_coeffs+0x394>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	4b6a      	ldr	r3, [pc, #424]	; (80012ec <calc_shelf_coeffs+0x3ac>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800114c:	4b63      	ldr	r3, [pc, #396]	; (80012dc <calc_shelf_coeffs+0x39c>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <calc_shelf_coeffs+0x3b0>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[2 +(5*band_num)] = (A*(Ap1-Am1*coss-2*sA*al)/a0); //b2
 8001160:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 8001168:	edd3 6a00 	vldr	s13, [r3]
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <calc_shelf_coeffs+0x394>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <calc_shelf_coeffs+0x3ac>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <calc_shelf_coeffs+0x39c>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee67 6a27 	vmul.f32	s13, s14, s15
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <calc_shelf_coeffs+0x3b0>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	79ba      	ldrb	r2, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3302      	adds	r3, #2
 80011ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <calc_shelf_coeffs+0x3b4>)
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[1 +(5*band_num)] = 2.0*(A*(Am1-Ap1*coss)/a0); //b1
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 80011c2:	edd3 6a00 	vldr	s13, [r3]
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <calc_shelf_coeffs+0x394>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <calc_shelf_coeffs+0x3b0>)
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	79ba      	ldrb	r2, [r7, #6]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3301      	adds	r3, #1
 80011f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <calc_shelf_coeffs+0x3b4>)
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[0 +(5*band_num)] = (A*(Ap1-Am1*coss+2*sA*al)/a0); //b0
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <calc_shelf_coeffs+0x394>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <calc_shelf_coeffs+0x3ac>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <calc_shelf_coeffs+0x39c>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <calc_shelf_coeffs+0x3a0>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee67 6a27 	vmul.f32	s13, s14, s15
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <calc_shelf_coeffs+0x3b0>)
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	79ba      	ldrb	r2, [r7, #6]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <calc_shelf_coeffs+0x3b4>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[4 +(5*band_num)] = -((Ap1+Am1*coss-2*sA*al)/a0); //a2
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <calc_shelf_coeffs+0x3a8>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <calc_shelf_coeffs+0x394>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <calc_shelf_coeffs+0x3ac>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <calc_shelf_coeffs+0x39c>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001286:	ee77 6a67 	vsub.f32	s13, s14, s15
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <calc_shelf_coeffs+0x3b0>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001294:	79ba      	ldrb	r2, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	eef1 7a67 	vneg.f32	s15, s15
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <calc_shelf_coeffs+0x3b4>)
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[3 +(5*band_num)] = -2.0*(-(Am1+Ap1*coss)/a0); //a1
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <calc_shelf_coeffs+0x3a4>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	e029      	b.n	8001308 <calc_shelf_coeffs+0x3c8>
 80012b4:	f3af 8000 	nop.w
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40000000 	.word	0x40000000
 80012c0:	9999999a 	.word	0x9999999a
 80012c4:	3f999999 	.word	0x3f999999
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40240000 	.word	0x40240000
 80012d0:	20007b50 	.word	0x20007b50
 80012d4:	2000abcc 	.word	0x2000abcc
 80012d8:	20004af8 	.word	0x20004af8
 80012dc:	2000abdc 	.word	0x2000abdc
 80012e0:	20004af4 	.word	0x20004af4
 80012e4:	2000cc34 	.word	0x2000cc34
 80012e8:	2000cc7c 	.word	0x2000cc7c
 80012ec:	20007b54 	.word	0x20007b54
 80012f0:	2000cd40 	.word	0x2000cd40
 80012f4:	20007b58 	.word	0x20007b58
 80012f8:	54442d18 	.word	0x54442d18
 80012fc:	400921fb 	.word	0x400921fb
 8001300:	00000000 	.word	0x00000000
 8001304:	40d77000 	.word	0x40d77000
 8001308:	4b85      	ldr	r3, [pc, #532]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001312:	4b84      	ldr	r3, [pc, #528]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	eef1 6a67 	vneg.f32	s13, s15
 8001320:	4b81      	ldr	r3, [pc, #516]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3303      	adds	r3, #3
 8001334:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	4a7b      	ldr	r2, [pc, #492]	; (800152c <calc_shelf_coeffs+0x5ec>)
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	edc3 7a00 	vstr	s15, [r3]
	}
	if(band_num == 4) //high - shelf
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	2b04      	cmp	r3, #4
 800134a:	f040 80e4 	bne.w	8001516 <calc_shelf_coeffs+0x5d6>
	{

	a0 = Ap1-Am1*coss+2 * sA*al;
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	4b73      	ldr	r3, [pc, #460]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	4b71      	ldr	r3, [pc, #452]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001368:	4b72      	ldr	r3, [pc, #456]	; (8001534 <calc_shelf_coeffs+0x5f4>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001372:	4b71      	ldr	r3, [pc, #452]	; (8001538 <calc_shelf_coeffs+0x5f8>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	4b69      	ldr	r3, [pc, #420]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 8001382:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[2 +(5*band_num)] = (A*(Ap1+Am1*coss-2*sA*al)/a0); //b2
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	4b64      	ldr	r3, [pc, #400]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <calc_shelf_coeffs+0x5f4>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <calc_shelf_coeffs+0x5f8>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <calc_shelf_coeffs+0x5fc>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013c2:	4b59      	ldr	r3, [pc, #356]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	3302      	adds	r3, #2
 80013d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d6:	4a55      	ldr	r2, [pc, #340]	; (800152c <calc_shelf_coeffs+0x5ec>)
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[1 +(5*band_num)] = 2.0*(-A*(Am1+Ap1*coss)/a0); //b1
 80013e0:	4b56      	ldr	r3, [pc, #344]	; (800153c <calc_shelf_coeffs+0x5fc>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eeb1 7a67 	vneg.f32	s14, s15
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 80013ec:	edd3 6a00 	vldr	s13, [r3]
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001404:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3301      	adds	r3, #1
 800141c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001420:	4a42      	ldr	r2, [pc, #264]	; (800152c <calc_shelf_coeffs+0x5ec>)
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[0 +(5*band_num)] = (A*(Ap1+Am1*coss+2*sA*al)/a0); //b0
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <calc_shelf_coeffs+0x5f4>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <calc_shelf_coeffs+0x5f8>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <calc_shelf_coeffs+0x5fc>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	79ba      	ldrb	r2, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <calc_shelf_coeffs+0x5ec>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[4 +(5*band_num)] = -((Ap1-Am1*coss-2*sA*al)/a0); //a2
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 800148a:	edd3 6a00 	vldr	s13, [r3]
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <calc_shelf_coeffs+0x5f4>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <calc_shelf_coeffs+0x5f8>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 80014b6:	ed93 7a00 	vldr	s14, [r3]
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	79ba      	ldrb	r2, [r7, #6]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3304      	adds	r3, #4
 80014c8:	eef1 7a67 	vneg.f32	s15, s15
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <calc_shelf_coeffs+0x5ec>)
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[3 +(5*band_num)] = -2.0*((Am1-Ap1*coss)/a0); //a1
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <calc_shelf_coeffs+0x5e4>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <calc_shelf_coeffs+0x5f0>)
 80014de:	edd3 6a00 	vldr	s13, [r3]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <calc_shelf_coeffs+0x5e0>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <calc_shelf_coeffs+0x5e8>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fa:	79ba      	ldrb	r2, [r7, #6]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3303      	adds	r3, #3
 8001504:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <calc_shelf_coeffs+0x5ec>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	edc3 7a00 	vstr	s15, [r3]

	}


}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	bf00      	nop
 8001520:	2000abcc 	.word	0x2000abcc
 8001524:	2000cc7c 	.word	0x2000cc7c
 8001528:	2000cd40 	.word	0x2000cd40
 800152c:	20007b58 	.word	0x20007b58
 8001530:	2000cc34 	.word	0x2000cc34
 8001534:	20007b54 	.word	0x20007b54
 8001538:	2000abdc 	.word	0x2000abdc
 800153c:	20004af4 	.word	0x20004af4

08001540 <calc_peakEQ_coeffs>:

void calc_peakEQ_coeffs(int8_t dBGain, uint8_t band_num, uint16_t f0, float BW)
{
 8001540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	ed87 0a00 	vstr	s0, [r7]
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	460b      	mov	r3, r1
 8001552:	71bb      	strb	r3, [r7, #6]
 8001554:	4613      	mov	r3, r2
 8001556:	80bb      	strh	r3, [r7, #4]
	//f0 = 20.0*pow(2.0, al/12.0); // peak freq
	w0 = M_PI*f0/24000.0; // omega 0 dla f center
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffe2 	bl	8000524 <__aeabi_i2d>
 8001560:	a3e6      	add	r3, pc, #920	; (adr r3, 80018fc <calc_peakEQ_coeffs+0x3bc>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f847 	bl	80005f8 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a3e4      	add	r3, pc, #912	; (adr r3, 8001904 <calc_peakEQ_coeffs+0x3c4>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f968 	bl	800084c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb10 	bl	8000ba8 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	4ad3      	ldr	r2, [pc, #844]	; (80018d8 <calc_peakEQ_coeffs+0x398>)
 800158c:	6013      	str	r3, [r2, #0]
	coss = cos(w0);
 800158e:	4bd2      	ldr	r3, [pc, #840]	; (80018d8 <calc_peakEQ_coeffs+0x398>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffd8 	bl	8000548 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	ec43 2b10 	vmov	d0, r2, r3
 80015a0:	f008 fd5e 	bl	800a060 <cos>
 80015a4:	ec53 2b10 	vmov	r2, r3, d0
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fafc 	bl	8000ba8 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4aca      	ldr	r2, [pc, #808]	; (80018dc <calc_peakEQ_coeffs+0x39c>)
 80015b4:	6013      	str	r3, [r2, #0]

	A = ((float)dBGain)*0.025; // gain (NOT dB)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	a3b9      	add	r3, pc, #740	; (adr r3, 80018b0 <calc_peakEQ_coeffs+0x370>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fae4 	bl	8000ba8 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4abf      	ldr	r2, [pc, #764]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 80015e4:	6013      	str	r3, [r2, #0]
	A = pow(10.0, A);
 80015e6:	4bbe      	ldr	r3, [pc, #760]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffac 	bl	8000548 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	ec43 2b11 	vmov	d1, r2, r3
 80015f8:	ed9f 0baf 	vldr	d0, [pc, #700]	; 80018b8 <calc_peakEQ_coeffs+0x378>
 80015fc:	f008 fdd4 	bl	800a1a8 <pow>
 8001600:	ec53 2b10 	vmov	r2, r3, d0
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff face 	bl	8000ba8 <__aeabi_d2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4ab4      	ldr	r2, [pc, #720]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 8001610:	6013      	str	r3, [r2, #0]

	bw = 0.1 + (float)BW*0.05; // bandwith in octaves
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	a3a9      	add	r3, pc, #676	; (adr r3, 80018c0 <calc_peakEQ_coeffs+0x380>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe ffeb 	bl	80005f8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	a3a7      	add	r3, pc, #668	; (adr r3, 80018c8 <calc_peakEQ_coeffs+0x388>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fe2c 	bl	800028c <__adddf3>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fab4 	bl	8000ba8 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4aa8      	ldr	r2, [pc, #672]	; (80018e4 <calc_peakEQ_coeffs+0x3a4>)
 8001644:	6013      	str	r3, [r2, #0]

	Q = pow(2.0,bw);
 8001646:	4ba7      	ldr	r3, [pc, #668]	; (80018e4 <calc_peakEQ_coeffs+0x3a4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	ec43 2b11 	vmov	d1, r2, r3
 8001658:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 80018d0 <calc_peakEQ_coeffs+0x390>
 800165c:	f008 fda4 	bl	800a1a8 <pow>
 8001660:	ec53 2b10 	vmov	r2, r3, d0
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa9e 	bl	8000ba8 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a9e      	ldr	r2, [pc, #632]	; (80018e8 <calc_peakEQ_coeffs+0x3a8>)
 8001670:	6013      	str	r3, [r2, #0]
	Q = sqrt(Q)/(Q-1);
 8001672:	4b9d      	ldr	r3, [pc, #628]	; (80018e8 <calc_peakEQ_coeffs+0x3a8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	ec43 2b10 	vmov	d0, r2, r3
 8001684:	f008 fe3e 	bl	800a304 <sqrt>
 8001688:	ec59 8b10 	vmov	r8, r9, d0
 800168c:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <calc_peakEQ_coeffs+0x3a8>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800169a:	ee17 0a90 	vmov	r0, s15
 800169e:	f7fe ff53 	bl	8000548 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4640      	mov	r0, r8
 80016a8:	4649      	mov	r1, r9
 80016aa:	f7ff f8cf 	bl	800084c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa77 	bl	8000ba8 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a8a      	ldr	r2, [pc, #552]	; (80018e8 <calc_peakEQ_coeffs+0x3a8>)
 80016be:	6013      	str	r3, [r2, #0]

	al = sin(w0)/(2.0*Q);
 80016c0:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <calc_peakEQ_coeffs+0x398>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	ec43 2b10 	vmov	d0, r2, r3
 80016d2:	f008 fd15 	bl	800a100 <sin>
 80016d6:	ec59 8b10 	vmov	r8, r9, d0
 80016da:	4b83      	ldr	r3, [pc, #524]	; (80018e8 <calc_peakEQ_coeffs+0x3a8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff32 	bl	8000548 <__aeabi_f2d>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f7fe fdd0 	bl	800028c <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4640      	mov	r0, r8
 80016f2:	4649      	mov	r1, r9
 80016f4:	f7ff f8aa 	bl	800084c <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa52 	bl	8000ba8 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a79      	ldr	r2, [pc, #484]	; (80018ec <calc_peakEQ_coeffs+0x3ac>)
 8001708:	6013      	str	r3, [r2, #0]

	a0 = 1.0+al/A;
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <calc_peakEQ_coeffs+0x3ac>)
 800170c:	edd3 6a00 	vldr	s13, [r3]
 8001710:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800171e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 8001724:	edc3 7a00 	vstr	s15, [r3]

	param_coeffs[2 +(5*band_num)]= (1.0-al*A)/a0; //b2
 8001728:	4b70      	ldr	r3, [pc, #448]	; (80018ec <calc_peakEQ_coeffs+0x3ac>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	496a      	ldr	r1, [pc, #424]	; (80018f4 <calc_peakEQ_coeffs+0x3b4>)
 800174a:	f7fe fd9d 	bl	8000288 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4690      	mov	r8, r2
 8001754:	4699      	mov	r9, r3
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef4 	bl	8000548 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4640      	mov	r0, r8
 8001766:	4649      	mov	r1, r9
 8001768:	f7ff f870 	bl	800084c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	79ba      	ldrb	r2, [r7, #6]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	1c9e      	adds	r6, r3, #2
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_d2f>
 8001782:	4602      	mov	r2, r0
 8001784:	495c      	ldr	r1, [pc, #368]	; (80018f8 <calc_peakEQ_coeffs+0x3b8>)
 8001786:	00b3      	lsls	r3, r6, #2
 8001788:	440b      	add	r3, r1
 800178a:	601a      	str	r2, [r3, #0]
	param_coeffs[1 +(5*band_num)] = (-2*coss/a0); //b1
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <calc_peakEQ_coeffs+0x39c>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001796:	ee67 6a87 	vmul.f32	s13, s15, s14
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	79ba      	ldrb	r2, [r7, #6]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	3301      	adds	r3, #1
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <calc_peakEQ_coeffs+0x3b8>)
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	edc3 7a00 	vstr	s15, [r3]
	param_coeffs[0 +(5*band_num)] = (1.0+al*A)/a0; //b0
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <calc_peakEQ_coeffs+0x3ac>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	ee17 0a90 	vmov	r0, s15
 80017cc:	f7fe febc 	bl	8000548 <__aeabi_f2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <calc_peakEQ_coeffs+0x3b4>)
 80017d6:	f7fe fd59 	bl	800028c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4690      	mov	r8, r2
 80017e0:	4699      	mov	r9, r3
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe feae 	bl	8000548 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4640      	mov	r0, r8
 80017f2:	4649      	mov	r1, r9
 80017f4:	f7ff f82a 	bl	800084c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	189e      	adds	r6, r3, r2
 8001808:	f7ff f9ce 	bl	8000ba8 <__aeabi_d2f>
 800180c:	4602      	mov	r2, r0
 800180e:	493a      	ldr	r1, [pc, #232]	; (80018f8 <calc_peakEQ_coeffs+0x3b8>)
 8001810:	00b3      	lsls	r3, r6, #2
 8001812:	440b      	add	r3, r1
 8001814:	601a      	str	r2, [r3, #0]
	param_coeffs[4 +(5*band_num)] = -(1.0-al/A)/a0; //a2
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <calc_peakEQ_coeffs+0x3ac>)
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <calc_peakEQ_coeffs+0x3a0>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001826:	ee16 0a90 	vmov	r0, s13
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	492f      	ldr	r1, [pc, #188]	; (80018f4 <calc_peakEQ_coeffs+0x3b4>)
 8001838:	f7fe fd26 	bl	8000288 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe7c 	bl	8000548 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fff8 	bl	800084c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	1d1c      	adds	r4, r3, #4
 800186e:	f7ff f99b 	bl	8000ba8 <__aeabi_d2f>
 8001872:	4602      	mov	r2, r0
 8001874:	4920      	ldr	r1, [pc, #128]	; (80018f8 <calc_peakEQ_coeffs+0x3b8>)
 8001876:	00a3      	lsls	r3, r4, #2
 8001878:	440b      	add	r3, r1
 800187a:	601a      	str	r2, [r3, #0]
	param_coeffs[3 +(5*band_num)] = -(-2*coss/a0); //a1
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <calc_peakEQ_coeffs+0x39c>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <calc_peakEQ_coeffs+0x3b0>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3303      	adds	r3, #3
 8001896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <calc_peakEQ_coeffs+0x3b8>)
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	edc3 7a00 	vstr	s15, [r3]

}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	e030      	b.n	800190c <calc_peakEQ_coeffs+0x3cc>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	3f999999 	.word	0x3f999999
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40240000 	.word	0x40240000
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fa99999 	.word	0x3fa99999
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	3fb99999 	.word	0x3fb99999
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40000000 	.word	0x40000000
 80018d8:	20007b50 	.word	0x20007b50
 80018dc:	2000abcc 	.word	0x2000abcc
 80018e0:	20004af4 	.word	0x20004af4
 80018e4:	2000bc30 	.word	0x2000bc30
 80018e8:	20004af8 	.word	0x20004af8
 80018ec:	2000abdc 	.word	0x2000abdc
 80018f0:	2000cd40 	.word	0x2000cd40
 80018f4:	3ff00000 	.word	0x3ff00000
 80018f8:	20007b58 	.word	0x20007b58
 80018fc:	54442d18 	.word	0x54442d18
 8001900:	400921fb 	.word	0x400921fb
 8001904:	00000000 	.word	0x00000000
 8001908:	40d77000 	.word	0x40d77000
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001912:	bf00      	nop

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f001 f980 	bl	8002c1c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f886 	bl	8001a2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  ///* FPU initialization */
  SCB->CPACR |= ((3 << 10*2)|(3 << 11*2));
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <main+0xd8>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a31      	ldr	r2, [pc, #196]	; (80019ec <main+0xd8>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f000 f98c 	bl	8001c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001934:	f000 f962 	bl	8001bfc <MX_DMA_Init>
  MX_I2S2_Init();
 8001938:	f000 f8e2 	bl	8001b00 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 800193c:	f000 f934 	bl	8001ba8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001940:	f000 f90c 	bl	8001b5c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */



// setting default peak filters:
  calc_peakEQ_coeffs(0, 0, 1000, 1);
 8001944:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194c:	2100      	movs	r1, #0
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fdf6 	bl	8001540 <calc_peakEQ_coeffs>
  calc_peakEQ_coeffs(0, 1, 1000, 1);
 8001954:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800195c:	2101      	movs	r1, #1
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fdee 	bl	8001540 <calc_peakEQ_coeffs>
  calc_peakEQ_coeffs(0, 2, 1000, 1);
 8001964:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196c:	2102      	movs	r1, #2
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fde6 	bl	8001540 <calc_peakEQ_coeffs>
// setting default shelf filters:
  calc_shelf_coeffs(0, 3, 500, 1.0);
 8001974:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001978:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800197c:	2103      	movs	r1, #3
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff fade 	bl	8000f40 <calc_shelf_coeffs>
  calc_shelf_coeffs(0, 4, 500, 1.0);
 8001984:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001988:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800198c:	2104      	movs	r1, #4
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fad6 	bl	8000f40 <calc_shelf_coeffs>
// ARM Biquad Direct form 2 structure init:

  arm_biquad_cascade_df1_init_f32(&iir_settingsleft, 5, &param_coeffs[0], &iir_statesleft[0]);
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <main+0xdc>)
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <main+0xe0>)
 8001998:	2105      	movs	r1, #5
 800199a:	4817      	ldr	r0, [pc, #92]	; (80019f8 <main+0xe4>)
 800199c:	f007 fc1e 	bl	80091dc <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&iir_settingsright, 5, &param_coeffs[0], &iir_statesright[0]);
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <main+0xe8>)
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <main+0xe0>)
 80019a4:	2105      	movs	r1, #5
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <main+0xec>)
 80019a8:	f007 fc18 	bl	80091dc <arm_biquad_cascade_df1_init_f32>


  //start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, NUMBER_U16);
 80019ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <main+0xf0>)
 80019b2:	4915      	ldr	r1, [pc, #84]	; (8001a08 <main+0xf4>)
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <main+0xf8>)
 80019b6:	f002 fa6d 	bl	8003e94 <HAL_I2SEx_TransmitReceive_DMA>

  //optionally//timer for plot transmission:
  HAL_TIM_Base_Start_IT(&htim10);
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <main+0xfc>)
 80019bc:	f003 fd34 	bl	8005428 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019c0:	f004 fe92 	bl	80066e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DSP_I2S_Task */
  DSP_I2S_TaskHandle = osThreadNew(Start_DSP_I2S_Task, NULL, &DSP_I2S_Task_attributes);
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <main+0x100>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <main+0x104>)
 80019ca:	f004 fed7 	bl	800677c <osThreadNew>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <main+0x108>)
 80019d2:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <main+0x10c>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <main+0x110>)
 80019da:	f004 fecf 	bl	800677c <osThreadNew>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <main+0x114>)
 80019e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019e4:	f004 fea4 	bl	8006730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <main+0xd4>
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	20006b00 	.word	0x20006b00
 80019f4:	20007b58 	.word	0x20007b58
 80019f8:	20009bc0 	.word	0x20009bc0
 80019fc:	2000abe0 	.word	0x2000abe0
 8001a00:	2000abd0 	.word	0x2000abd0
 8001a04:	20007bc0 	.word	0x20007bc0
 8001a08:	20004b00 	.word	0x20004b00
 8001a0c:	2000cd44 	.word	0x2000cd44
 8001a10:	20004aac 	.word	0x20004aac
 8001a14:	0800c084 	.word	0x0800c084
 8001a18:	08001f61 	.word	0x08001f61
 8001a1c:	20004afc 	.word	0x20004afc
 8001a20:	0800c0a8 	.word	0x0800c0a8
 8001a24:	08002309 	.word	0x08002309
 8001a28:	20007bbc 	.word	0x20007bbc

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	; 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	2230      	movs	r2, #48	; 0x30
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f007 fce4 	bl	8009408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <SystemClock_Config+0xcc>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <SystemClock_Config+0xcc>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <SystemClock_Config+0xcc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <SystemClock_Config+0xd0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <SystemClock_Config+0xd0>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <SystemClock_Config+0xd0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a92:	2302      	movs	r3, #2
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001aa0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fe82 	bl	80047bc <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001abe:	f000 fdf3 	bl	80026a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ace:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2105      	movs	r1, #5
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f8e3 	bl	8004cac <HAL_RCC_ClockConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aec:	f000 fddc 	bl	80026a8 <Error_Handler>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3750      	adds	r7, #80	; 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <MX_I2S2_Init+0x58>)
 8001b08:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b10:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b28:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001b2c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2S2_Init+0x54>)
 8001b42:	f001 ff61 	bl	8003a08 <HAL_I2S_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001b4c:	f000 fdac 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000cd44 	.word	0x2000cd44
 8001b58:	40003800 	.word	0x40003800

08001b5c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <MX_TIM10_Init+0x48>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b6c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b76:	f248 323f 	movw	r2, #33599	; 0x833f
 8001b7a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b82:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM10_Init+0x44>)
 8001b8c:	f003 fbfc 	bl	8005388 <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8001b96:	f000 fd87 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20004aac 	.word	0x20004aac
 8001ba4:	40014400 	.word	0x40014400

08001ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_USART2_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f003 fe76 	bl	80058d0 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f000 fd5d 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000cc38 	.word	0x2000cc38
 8001bf8:	40004400 	.word	0x40004400

08001bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_DMA_Init+0x4c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <MX_DMA_Init+0x4c>)
 8001c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <MX_DMA_Init+0x4c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	200e      	movs	r0, #14
 8001c24:	f001 f8f4 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c28:	200e      	movs	r0, #14
 8001c2a:	f001 f90d 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	200f      	movs	r0, #15
 8001c34:	f001 f8ec 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c38:	200f      	movs	r0, #15
 8001c3a:	f001 f905 	bl	8002e48 <HAL_NVIC_EnableIRQ>

}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	4b9c      	ldr	r3, [pc, #624]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a9b      	ldr	r2, [pc, #620]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b99      	ldr	r3, [pc, #612]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	4b95      	ldr	r3, [pc, #596]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a94      	ldr	r2, [pc, #592]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b8e      	ldr	r3, [pc, #568]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a8d      	ldr	r2, [pc, #564]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b87      	ldr	r3, [pc, #540]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a86      	ldr	r2, [pc, #536]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b79      	ldr	r3, [pc, #484]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a78      	ldr	r2, [pc, #480]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <MX_GPIO_Init+0x28c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2108      	movs	r1, #8
 8001d0e:	4873      	ldr	r0, [pc, #460]	; (8001edc <MX_GPIO_Init+0x290>)
 8001d10:	f001 fe46 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2101      	movs	r1, #1
 8001d18:	4871      	ldr	r0, [pc, #452]	; (8001ee0 <MX_GPIO_Init+0x294>)
 8001d1a:	f001 fe41 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TASK_dsp_state_GPIO_Port, TASK_dsp_state_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d24:	486f      	ldr	r0, [pc, #444]	; (8001ee4 <MX_GPIO_Init+0x298>)
 8001d26:	f001 fe3b 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TASK_main_state_Pin|TASK_uart_state_Pin|LD4_Pin|LD3_Pin
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f64f 2110 	movw	r1, #64016	; 0xfa10
 8001d30:	486d      	ldr	r0, [pc, #436]	; (8001ee8 <MX_GPIO_Init+0x29c>)
 8001d32:	f001 fe35 	bl	80039a0 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001d36:	2308      	movs	r3, #8
 8001d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4863      	ldr	r0, [pc, #396]	; (8001edc <MX_GPIO_Init+0x290>)
 8001d4e:	f001 fc8b 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	485d      	ldr	r0, [pc, #372]	; (8001ee0 <MX_GPIO_Init+0x294>)
 8001d6a:	f001 fc7d 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	485a      	ldr	r0, [pc, #360]	; (8001eec <MX_GPIO_Init+0x2a0>)
 8001d84:	f001 fc70 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4852      	ldr	r0, [pc, #328]	; (8001eec <MX_GPIO_Init+0x2a0>)
 8001da4:	f001 fc60 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001da8:	23e0      	movs	r3, #224	; 0xe0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db8:	2305      	movs	r3, #5
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	484a      	ldr	r0, [pc, #296]	; (8001eec <MX_GPIO_Init+0x2a0>)
 8001dc4:	f001 fc50 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4842      	ldr	r0, [pc, #264]	; (8001ee4 <MX_GPIO_Init+0x298>)
 8001ddc:	f001 fc44 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : TASK_dsp_state_Pin */
  GPIO_InitStruct.Pin = TASK_dsp_state_Pin;
 8001de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TASK_dsp_state_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	483a      	ldr	r0, [pc, #232]	; (8001ee4 <MX_GPIO_Init+0x298>)
 8001dfa:	f001 fc35 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : TASK_main_state_Pin TASK_uart_state_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = TASK_main_state_Pin|TASK_uart_state_Pin|LD4_Pin|LD3_Pin
 8001dfe:	f64f 2310 	movw	r3, #64016	; 0xfa10
 8001e02:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4834      	ldr	r0, [pc, #208]	; (8001ee8 <MX_GPIO_Init+0x29c>)
 8001e18:	f001 fc26 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e2e:	2306      	movs	r3, #6
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4829      	ldr	r0, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0x294>)
 8001e3a:	f001 fc15 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4826      	ldr	r0, [pc, #152]	; (8001eec <MX_GPIO_Init+0x2a0>)
 8001e54:	f001 fc08 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	481d      	ldr	r0, [pc, #116]	; (8001eec <MX_GPIO_Init+0x2a0>)
 8001e76:	f001 fbf7 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <MX_GPIO_Init+0x29c>)
 8001e8e:	f001 fbeb 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <MX_GPIO_Init+0x298>)
 8001eb0:	f001 fbda 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_GPIO_Init+0x290>)
 8001eca:	f001 fbcd 	bl	8003668 <HAL_GPIO_Init>

}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_I2SEx_TxRxHalfCpltCallback>:




HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	callback = 1;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200000b8 	.word	0x200000b8

08001f10 <HAL_I2SEx_TxRxCpltCallback>:
HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	callback = 2;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	701a      	strb	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200000b8 	.word	0x200000b8

08001f30 <HAL_UART_RxCpltCallback>:


HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	receive_flag=1;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_UART_RxCpltCallback+0x20>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &Received, 6);
 8001f3e:	2206      	movs	r2, #6
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_UART_RxCpltCallback+0x24>)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_UART_RxCpltCallback+0x28>)
 8001f44:	f003 fd11 	bl	800596a <HAL_UART_Receive_IT>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200000ba 	.word	0x200000ba
 8001f54:	20004a9c 	.word	0x20004a9c
 8001f58:	2000cc38 	.word	0x2000cc38
 8001f5c:	00000000 	.word	0x00000000

08001f60 <Start_DSP_I2S_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DSP_I2S_Task */
void Start_DSP_I2S_Task(void *argument)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	  int offset_w_ptr, w_ptr;
  /* Infinite loop */
  for(;;)
  {
	  /////-I2S-transmission part///////////////////////////////////////////////////////////////
  	  if (callback != 0) {
 8001f68:	4ba7      	ldr	r3, [pc, #668]	; (8002208 <Start_DSP_I2S_Task+0x2a8>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 811e 	beq.w	80021ae <Start_DSP_I2S_Task+0x24e>

  		  if (callback == 1)
 8001f72:	4ba5      	ldr	r3, [pc, #660]	; (8002208 <Start_DSP_I2S_Task+0x2a8>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d106      	bne.n	8001f88 <Start_DSP_I2S_Task+0x28>
  		  {
  			  offset_r_ptr = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  			  offset_w_ptr = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  			  w_ptr = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e00c      	b.n	8001fa2 <Start_DSP_I2S_Task+0x42>
  		  }

  		  else if (callback == 2) {
 8001f88:	4b9f      	ldr	r3, [pc, #636]	; (8002208 <Start_DSP_I2S_Task+0x2a8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d108      	bne.n	8001fa2 <Start_DSP_I2S_Task+0x42>
			  offset_r_ptr = NUMBER_U16;
 8001f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f94:	61fb      	str	r3, [r7, #28]
			  offset_w_ptr = NUMBER_F;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	61bb      	str	r3, [r7, #24]
			  w_ptr = NUMBER_F;
 8001f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa0:	617b      	str	r3, [r7, #20]
  		  }


  		  for (int i=offset_r_ptr; i<offset_r_ptr+NUMBER_U16; i=i+4)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e030      	b.n	800200a <Start_DSP_I2S_Task+0xaa>
  		  {
			  in_bufferl[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8001fa8:	4a98      	ldr	r2, [pc, #608]	; (800220c <Start_DSP_I2S_Task+0x2ac>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	3201      	adds	r2, #1
 8001fb6:	4995      	ldr	r1, [pc, #596]	; (800220c <Start_DSP_I2S_Task+0x2ac>)
 8001fb8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	4a92      	ldr	r2, [pc, #584]	; (8002210 <Start_DSP_I2S_Task+0x2b0>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	edc3 7a00 	vstr	s15, [r3]
			  in_bufferr[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	4a8d      	ldr	r2, [pc, #564]	; (800220c <Start_DSP_I2S_Task+0x2ac>)
 8001fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	3203      	adds	r2, #3
 8001fe2:	498a      	ldr	r1, [pc, #552]	; (800220c <Start_DSP_I2S_Task+0x2ac>)
 8001fe4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff2:	4a88      	ldr	r2, [pc, #544]	; (8002214 <Start_DSP_I2S_Task+0x2b4>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
			  w_ptr++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  		  for (int i=offset_r_ptr; i<offset_r_ptr+NUMBER_U16; i=i+4)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3304      	adds	r3, #4
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	ddc8      	ble.n	8001fa8 <Start_DSP_I2S_Task+0x48>
  		  }


  		  arm_biquad_cascade_df1_f32(&iir_settingsleft, &in_bufferl[offset_w_ptr], &out_bufferl[offset_w_ptr], NUMBER_F);
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4a7d      	ldr	r2, [pc, #500]	; (8002210 <Start_DSP_I2S_Task+0x2b0>)
 800201c:	1899      	adds	r1, r3, r2
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <Start_DSP_I2S_Task+0x2b8>)
 8002024:	441a      	add	r2, r3
 8002026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202a:	487c      	ldr	r0, [pc, #496]	; (800221c <Start_DSP_I2S_Task+0x2bc>)
 800202c:	f007 f8e2 	bl	80091f4 <arm_biquad_cascade_df1_f32>
  		  arm_biquad_cascade_df1_f32(&iir_settingsright, &in_bufferr[offset_w_ptr], &outbufferr[offset_w_ptr], NUMBER_F);
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4a77      	ldr	r2, [pc, #476]	; (8002214 <Start_DSP_I2S_Task+0x2b4>)
 8002036:	1899      	adds	r1, r3, r2
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4a78      	ldr	r2, [pc, #480]	; (8002220 <Start_DSP_I2S_Task+0x2c0>)
 800203e:	441a      	add	r2, r3
 8002040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002044:	4877      	ldr	r0, [pc, #476]	; (8002224 <Start_DSP_I2S_Task+0x2c4>)
 8002046:	f007 f8d5 	bl	80091f4 <arm_biquad_cascade_df1_f32>

  		  w_ptr = offset_w_ptr;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	617b      	str	r3, [r7, #20]

  		  for (int i=offset_r_ptr; i<offset_r_ptr+NUMBER_U16; i=i+4)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e0a2      	b.n	800219a <Start_DSP_I2S_Task+0x23a>
  		  {
			  txBuf[i] =     (((int)(out_bufferl[w_ptr] * (volumeL * 0.0416)))>>16)&0xFFFF;
 8002054:	4a70      	ldr	r2, [pc, #448]	; (8002218 <Start_DSP_I2S_Task+0x2b8>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	4604      	mov	r4, r0
 8002066:	460d      	mov	r5, r1
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <Start_DSP_I2S_Task+0x2c8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa59 	bl	8000524 <__aeabi_i2d>
 8002072:	a363      	add	r3, pc, #396	; (adr r3, 8002200 <Start_DSP_I2S_Task+0x2a0>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fabe 	bl	80005f8 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe fab8 	bl	80005f8 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fd62 	bl	8000b58 <__aeabi_d2iz>
 8002094:	4603      	mov	r3, r0
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b299      	uxth	r1, r3
 800209a:	4a64      	ldr	r2, [pc, #400]	; (800222c <Start_DSP_I2S_Task+0x2cc>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] =  ((int)(out_bufferl[w_ptr] * (volumeL * 0.0416)))&0xFFFF;
 80020a2:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <Start_DSP_I2S_Task+0x2b8>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa4b 	bl	8000548 <__aeabi_f2d>
 80020b2:	4604      	mov	r4, r0
 80020b4:	460d      	mov	r5, r1
 80020b6:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <Start_DSP_I2S_Task+0x2c8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa32 	bl	8000524 <__aeabi_i2d>
 80020c0:	a34f      	add	r3, pc, #316	; (adr r3, 8002200 <Start_DSP_I2S_Task+0x2a0>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fa97 	bl	80005f8 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4620      	mov	r0, r4
 80020d0:	4629      	mov	r1, r5
 80020d2:	f7fe fa91 	bl	80005f8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd3b 	bl	8000b58 <__aeabi_d2iz>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b291      	uxth	r1, r2
 80020ea:	4a50      	ldr	r2, [pc, #320]	; (800222c <Start_DSP_I2S_Task+0x2cc>)
 80020ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			  txBuf[i+2] =  (((int)(outbufferr[w_ptr] * (volumeR * 0.0416)))>>16)&0xFFFF;
 80020f0:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <Start_DSP_I2S_Task+0x2c0>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <Start_DSP_I2S_Task+0x2d0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa0b 	bl	8000524 <__aeabi_i2d>
 800210e:	a33c      	add	r3, pc, #240	; (adr r3, 8002200 <Start_DSP_I2S_Task+0x2a0>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe fa70 	bl	80005f8 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	f7fe fa6a 	bl	80005f8 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd14 	bl	8000b58 <__aeabi_d2iz>
 8002130:	4603      	mov	r3, r0
 8002132:	0c1a      	lsrs	r2, r3, #16
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3302      	adds	r3, #2
 8002138:	b291      	uxth	r1, r2
 800213a:	4a3c      	ldr	r2, [pc, #240]	; (800222c <Start_DSP_I2S_Task+0x2cc>)
 800213c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] =  ((int)(outbufferr[w_ptr] * (volumeR * 0.0416)))&0xFFFF;
 8002140:	4a37      	ldr	r2, [pc, #220]	; (8002220 <Start_DSP_I2S_Task+0x2c0>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f9fc 	bl	8000548 <__aeabi_f2d>
 8002150:	4604      	mov	r4, r0
 8002152:	460d      	mov	r5, r1
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <Start_DSP_I2S_Task+0x2d0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9e3 	bl	8000524 <__aeabi_i2d>
 800215e:	a328      	add	r3, pc, #160	; (adr r3, 8002200 <Start_DSP_I2S_Task+0x2a0>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe fa48 	bl	80005f8 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe fa42 	bl	80005f8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fcec 	bl	8000b58 <__aeabi_d2iz>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3303      	adds	r3, #3
 8002186:	b291      	uxth	r1, r2
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <Start_DSP_I2S_Task+0x2cc>)
 800218a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
  		  for (int i=offset_r_ptr; i<offset_r_ptr+NUMBER_U16; i=i+4)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3304      	adds	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f77f af56 	ble.w	8002054 <Start_DSP_I2S_Task+0xf4>
  		  }

  		  callback = 0;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <Start_DSP_I2S_Task+0x2a8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]

  	  }


  	  //checking if there's need to update  and calculating coefficients:
	  if(IsChange ==0 || IsChange ==1|| IsChange ==2) //set coeffs according to band
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <Start_DSP_I2S_Task+0x266>
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d003      	beq.n	80021c6 <Start_DSP_I2S_Task+0x266>
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d13e      	bne.n	8002244 <Start_DSP_I2S_Task+0x2e4>
	  {
	  calc_peakEQ_coeffs(everyG[IsChange],IsChange, everyF[IsChange], everyBW[IsChange]);
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <Start_DSP_I2S_Task+0x2d8>)
 80021ce:	5698      	ldrsb	r0, [r3, r2]
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021d2:	7819      	ldrb	r1, [r3, #0]
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <Start_DSP_I2S_Task+0x2dc>)
 80021dc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4c16      	ldr	r4, [pc, #88]	; (8002240 <Start_DSP_I2S_Task+0x2e0>)
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4423      	add	r3, r4
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	eeb0 0a67 	vmov.f32	s0, s15
 80021f2:	f7ff f9a5 	bl	8001540 <calc_peakEQ_coeffs>

	  IsChange = 5;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <Start_DSP_I2S_Task+0x2d4>)
 80021f8:	2205      	movs	r2, #5
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e075      	b.n	80022ea <Start_DSP_I2S_Task+0x38a>
 80021fe:	bf00      	nop
 8002200:	5f06f694 	.word	0x5f06f694
 8002204:	3fa54c98 	.word	0x3fa54c98
 8002208:	200000b8 	.word	0x200000b8
 800220c:	20007bc0 	.word	0x20007bc0
 8002210:	20006b50 	.word	0x20006b50
 8002214:	2000ac30 	.word	0x2000ac30
 8002218:	2000bc34 	.word	0x2000bc34
 800221c:	20009bc0 	.word	0x20009bc0
 8002220:	20009bcc 	.word	0x20009bcc
 8002224:	2000abd0 	.word	0x2000abd0
 8002228:	20000022 	.word	0x20000022
 800222c:	20004b00 	.word	0x20004b00
 8002230:	20000021 	.word	0x20000021
 8002234:	20000020 	.word	0x20000020
 8002238:	20004aa4 	.word	0x20004aa4
 800223c:	20000000 	.word	0x20000000
 8002240:	2000000c 	.word	0x2000000c
	  }
	  else if(IsChange ==3 || IsChange ==4 )
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d003      	beq.n	8002254 <Start_DSP_I2S_Task+0x2f4>
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11b      	bne.n	800228c <Start_DSP_I2S_Task+0x32c>
	  {
	  calc_shelf_coeffs(everyG[IsChange], IsChange, everyF[IsChange], everyBW[IsChange]);
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <Start_DSP_I2S_Task+0x398>)
 800225c:	5698      	ldrsb	r0, [r3, r2]
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002260:	7819      	ldrb	r1, [r3, #0]
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <Start_DSP_I2S_Task+0x39c>)
 800226a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4c23      	ldr	r4, [pc, #140]	; (8002300 <Start_DSP_I2S_Task+0x3a0>)
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4423      	add	r3, r4
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	f7fe fe5e 	bl	8000f40 <calc_shelf_coeffs>
	  IsChange = 5;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 8002286:	2205      	movs	r2, #5
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e02e      	b.n	80022ea <Start_DSP_I2S_Task+0x38a>
	  }
	  else if(IsChange == 6)// clear settings
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d12a      	bne.n	80022ea <Start_DSP_I2S_Task+0x38a>
	  {
		  calc_peakEQ_coeffs(0, 0, 1000, 1);
 8002294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800229c:	2100      	movs	r1, #0
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff f94e 	bl	8001540 <calc_peakEQ_coeffs>
		  calc_peakEQ_coeffs(0, 1, 1000, 1);
 80022a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ac:	2101      	movs	r1, #1
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff f946 	bl	8001540 <calc_peakEQ_coeffs>
		  calc_peakEQ_coeffs(0, 2, 1000, 1);
 80022b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022bc:	2102      	movs	r1, #2
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff f93e 	bl	8001540 <calc_peakEQ_coeffs>
		  calc_shelf_coeffs(0, 3, 1000, 1);
 80022c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022cc:	2103      	movs	r1, #3
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7fe fe36 	bl	8000f40 <calc_shelf_coeffs>
		  calc_shelf_coeffs(0, 4, 1000, 1);
 80022d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022dc:	2104      	movs	r1, #4
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fe2e 	bl	8000f40 <calc_shelf_coeffs>
		  IsChange =5;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <Start_DSP_I2S_Task+0x394>)
 80022e6:	2205      	movs	r2, #5
 80022e8:	701a      	strb	r2, [r3, #0]
	  }


    osDelay(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f004 fad8 	bl	80068a0 <osDelay>
  	  if (callback != 0) {
 80022f0:	e63a      	b.n	8001f68 <Start_DSP_I2S_Task+0x8>
 80022f2:	bf00      	nop
 80022f4:	20000020 	.word	0x20000020
 80022f8:	20004aa4 	.word	0x20004aa4
 80022fc:	20000000 	.word	0x20000000
 8002300:	2000000c 	.word	0x2000000c
 8002304:	00000000 	.word	0x00000000

08002308 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_UART_Task */
	HAL_UART_Receive_IT(&huart2, &Received, 6);
 8002310:	2206      	movs	r2, #6
 8002312:	49b5      	ldr	r1, [pc, #724]	; (80025e8 <Start_UART_Task+0x2e0>)
 8002314:	48b5      	ldr	r0, [pc, #724]	; (80025ec <Start_UART_Task+0x2e4>)
 8002316:	f003 fb28 	bl	800596a <HAL_UART_Receive_IT>
  for(;;)
  {

	  ///UART part//////////////////////////////////////////////////////////////////////////////

  if(timer_state==1)
 800231a:	4bb5      	ldr	r3, [pc, #724]	; (80025f0 <Start_UART_Task+0x2e8>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <Start_UART_Task+0x2a>
  {
	  	 //blinking diode - work signalization;
		 HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002326:	48b3      	ldr	r0, [pc, #716]	; (80025f4 <Start_UART_Task+0x2ec>)
 8002328:	f001 fb53 	bl	80039d2 <HAL_GPIO_TogglePin>
		 timer_state=0;
 800232c:	4bb0      	ldr	r3, [pc, #704]	; (80025f0 <Start_UART_Task+0x2e8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
  }

  if(receive_flag==1)// RECEIVE PART:
 8002332:	4bb1      	ldr	r3, [pc, #708]	; (80025f8 <Start_UART_Task+0x2f0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f040 818a 	bne.w	8002650 <Start_UART_Task+0x348>
  {
	  //message decoding
	  sign = Received[0];
 800233c:	4baa      	ldr	r3, [pc, #680]	; (80025e8 <Start_UART_Task+0x2e0>)
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	4bae      	ldr	r3, [pc, #696]	; (80025fc <Start_UART_Task+0x2f4>)
 8002342:	701a      	strb	r2, [r3, #0]
	  Received[0] = '0';
 8002344:	4ba8      	ldr	r3, [pc, #672]	; (80025e8 <Start_UART_Task+0x2e0>)
 8002346:	2230      	movs	r2, #48	; 0x30
 8002348:	701a      	strb	r2, [r3, #0]
	  sscanf(Received,"%d",&value);
 800234a:	4aad      	ldr	r2, [pc, #692]	; (8002600 <Start_UART_Task+0x2f8>)
 800234c:	49ad      	ldr	r1, [pc, #692]	; (8002604 <Start_UART_Task+0x2fc>)
 800234e:	48a6      	ldr	r0, [pc, #664]	; (80025e8 <Start_UART_Task+0x2e0>)
 8002350:	f007 f936 	bl	80095c0 <siscanf>

	  switch(sign)
 8002354:	4ba9      	ldr	r3, [pc, #676]	; (80025fc <Start_UART_Task+0x2f4>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	3b4c      	subs	r3, #76	; 0x4c
 800235a:	2b2e      	cmp	r3, #46	; 0x2e
 800235c:	f200 8168 	bhi.w	8002630 <Start_UART_Task+0x328>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <Start_UART_Task+0x60>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	080025d3 	.word	0x080025d3
 800236c:	08002631 	.word	0x08002631
 8002370:	08002631 	.word	0x08002631
 8002374:	08002631 	.word	0x08002631
 8002378:	08002631 	.word	0x08002631
 800237c:	08002631 	.word	0x08002631
 8002380:	0800261d 	.word	0x0800261d
 8002384:	08002631 	.word	0x08002631
 8002388:	08002631 	.word	0x08002631
 800238c:	08002631 	.word	0x08002631
 8002390:	08002631 	.word	0x08002631
 8002394:	08002631 	.word	0x08002631
 8002398:	08002631 	.word	0x08002631
 800239c:	08002631 	.word	0x08002631
 80023a0:	08002631 	.word	0x08002631
 80023a4:	08002631 	.word	0x08002631
 80023a8:	08002631 	.word	0x08002631
 80023ac:	08002631 	.word	0x08002631
 80023b0:	08002631 	.word	0x08002631
 80023b4:	08002631 	.word	0x08002631
 80023b8:	08002631 	.word	0x08002631
 80023bc:	08002425 	.word	0x08002425
 80023c0:	08002435 	.word	0x08002435
 80023c4:	08002463 	.word	0x08002463
 80023c8:	0800247b 	.word	0x0800247b
 80023cc:	0800248b 	.word	0x0800248b
 80023d0:	080024b9 	.word	0x080024b9
 80023d4:	080024d1 	.word	0x080024d1
 80023d8:	080024e1 	.word	0x080024e1
 80023dc:	0800250f 	.word	0x0800250f
 80023e0:	08002527 	.word	0x08002527
 80023e4:	08002537 	.word	0x08002537
 80023e8:	08002565 	.word	0x08002565
 80023ec:	0800257d 	.word	0x0800257d
 80023f0:	0800258d 	.word	0x0800258d
 80023f4:	080025bb 	.word	0x080025bb
 80023f8:	08002631 	.word	0x08002631
 80023fc:	08002631 	.word	0x08002631
 8002400:	08002631 	.word	0x08002631
 8002404:	08002631 	.word	0x08002631
 8002408:	08002631 	.word	0x08002631
 800240c:	08002631 	.word	0x08002631
 8002410:	08002631 	.word	0x08002631
 8002414:	08002631 	.word	0x08002631
 8002418:	08002631 	.word	0x08002631
 800241c:	08002631 	.word	0x08002631
 8002420:	08002629 	.word	0x08002629
	  {
//PEAK FILTERS SET:
	  case 'a':
		  everyF[0] = value;					//frequency 0
 8002424:	4b76      	ldr	r3, [pc, #472]	; (8002600 <Start_UART_Task+0x2f8>)
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	4b77      	ldr	r3, [pc, #476]	; (8002608 <Start_UART_Task+0x300>)
 800242a:	801a      	strh	r2, [r3, #0]
		  IsChange =0;
 800242c:	4b77      	ldr	r3, [pc, #476]	; (800260c <Start_UART_Task+0x304>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
		  break;
 8002432:	e0fd      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'b':
		  everyBW[0] =  0.01 *value;			//BW in octaves 0
 8002434:	4b72      	ldr	r3, [pc, #456]	; (8002600 <Start_UART_Task+0x2f8>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f873 	bl	8000524 <__aeabi_i2d>
 800243e:	a368      	add	r3, pc, #416	; (adr r3, 80025e0 <Start_UART_Task+0x2d8>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f8d8 	bl	80005f8 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fbaa 	bl	8000ba8 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <Start_UART_Task+0x308>)
 8002458:	6013      	str	r3, [r2, #0]
		  IsChange =0;
 800245a:	4b6c      	ldr	r3, [pc, #432]	; (800260c <Start_UART_Task+0x304>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		  break;
 8002460:	e0e6      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'c':
		  everyG[0] = value-12;					//gain value 0
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <Start_UART_Task+0x2f8>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3b0c      	subs	r3, #12
 800246a:	b2db      	uxtb	r3, r3
 800246c:	b25a      	sxtb	r2, r3
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <Start_UART_Task+0x30c>)
 8002470:	701a      	strb	r2, [r3, #0]
		  IsChange =0;
 8002472:	4b66      	ldr	r3, [pc, #408]	; (800260c <Start_UART_Task+0x304>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
		  break;
 8002478:	e0da      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'd':
		  everyF[1] = value;					//frequency 1
 800247a:	4b61      	ldr	r3, [pc, #388]	; (8002600 <Start_UART_Task+0x2f8>)
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <Start_UART_Task+0x300>)
 8002480:	805a      	strh	r2, [r3, #2]
		  IsChange =1;
 8002482:	4b62      	ldr	r3, [pc, #392]	; (800260c <Start_UART_Task+0x304>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		  break;
 8002488:	e0d2      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'e':
		  everyBW[1] =  0.01 *value;			//BW in octaves 1
 800248a:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <Start_UART_Task+0x2f8>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f848 	bl	8000524 <__aeabi_i2d>
 8002494:	a352      	add	r3, pc, #328	; (adr r3, 80025e0 <Start_UART_Task+0x2d8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fe f8ad 	bl	80005f8 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe fb7f 	bl	8000ba8 <__aeabi_d2f>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <Start_UART_Task+0x308>)
 80024ae:	6053      	str	r3, [r2, #4]
		  IsChange =1;
 80024b0:	4b56      	ldr	r3, [pc, #344]	; (800260c <Start_UART_Task+0x304>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
		  break;
 80024b6:	e0bb      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'f':
		  everyG[1] = value-12;					//gain value 1
 80024b8:	4b51      	ldr	r3, [pc, #324]	; (8002600 <Start_UART_Task+0x2f8>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b0c      	subs	r3, #12
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	b25a      	sxtb	r2, r3
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <Start_UART_Task+0x30c>)
 80024c6:	705a      	strb	r2, [r3, #1]
		  IsChange =1;
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <Start_UART_Task+0x304>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		  break;
 80024ce:	e0af      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'g':
		  everyF[2] = value;					//frequency 2
 80024d0:	4b4b      	ldr	r3, [pc, #300]	; (8002600 <Start_UART_Task+0x2f8>)
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <Start_UART_Task+0x300>)
 80024d6:	809a      	strh	r2, [r3, #4]
		  IsChange =2;
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <Start_UART_Task+0x304>)
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
		  break;
 80024de:	e0a7      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'h':
		  everyBW[2] =  0.01 *value;			//BW in octaves 2
 80024e0:	4b47      	ldr	r3, [pc, #284]	; (8002600 <Start_UART_Task+0x2f8>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f81d 	bl	8000524 <__aeabi_i2d>
 80024ea:	a33d      	add	r3, pc, #244	; (adr r3, 80025e0 <Start_UART_Task+0x2d8>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f882 	bl	80005f8 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb54 	bl	8000ba8 <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	4a43      	ldr	r2, [pc, #268]	; (8002610 <Start_UART_Task+0x308>)
 8002504:	6093      	str	r3, [r2, #8]
		  IsChange =2;
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <Start_UART_Task+0x304>)
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]
		  break;
 800250c:	e090      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'i':
		  everyG[2] = value-12;					//gain value 2
 800250e:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <Start_UART_Task+0x2f8>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b0c      	subs	r3, #12
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b25a      	sxtb	r2, r3
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <Start_UART_Task+0x30c>)
 800251c:	709a      	strb	r2, [r3, #2]
		  IsChange =2;
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <Start_UART_Task+0x304>)
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
		  break;
 8002524:	e084      	b.n	8002630 <Start_UART_Task+0x328>

//SHELF FILTERS SET:

	  case 'j':
		  everyF[3] = value;					//freqency (slope center) 3
 8002526:	4b36      	ldr	r3, [pc, #216]	; (8002600 <Start_UART_Task+0x2f8>)
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	4b37      	ldr	r3, [pc, #220]	; (8002608 <Start_UART_Task+0x300>)
 800252c:	80da      	strh	r2, [r3, #6]
		  IsChange =3;
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <Start_UART_Task+0x304>)
 8002530:	2203      	movs	r2, #3
 8002532:	701a      	strb	r2, [r3, #0]
		  break;
 8002534:	e07c      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'k':
		  everyBW[3] =  0.01 *value;			// S - parameter 3
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <Start_UART_Task+0x2f8>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fff2 	bl	8000524 <__aeabi_i2d>
 8002540:	a327      	add	r3, pc, #156	; (adr r3, 80025e0 <Start_UART_Task+0x2d8>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f857 	bl	80005f8 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb29 	bl	8000ba8 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <Start_UART_Task+0x308>)
 800255a:	60d3      	str	r3, [r2, #12]
		  IsChange =3;
 800255c:	4b2b      	ldr	r3, [pc, #172]	; (800260c <Start_UART_Task+0x304>)
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
		  break;
 8002562:	e065      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'l':
		  everyG[3] = value-12;					//gain value 3
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <Start_UART_Task+0x2f8>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3b0c      	subs	r3, #12
 800256c:	b2db      	uxtb	r3, r3
 800256e:	b25a      	sxtb	r2, r3
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <Start_UART_Task+0x30c>)
 8002572:	70da      	strb	r2, [r3, #3]
		  IsChange =3;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <Start_UART_Task+0x304>)
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
		  break;
 800257a:	e059      	b.n	8002630 <Start_UART_Task+0x328>

	  case 'm':
		  everyF[4] = value;					//freqency (slope center) 4
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <Start_UART_Task+0x2f8>)
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <Start_UART_Task+0x300>)
 8002582:	811a      	strh	r2, [r3, #8]
		  IsChange =4;
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <Start_UART_Task+0x304>)
 8002586:	2204      	movs	r2, #4
 8002588:	701a      	strb	r2, [r3, #0]
		  break;
 800258a:	e051      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'n':
		  everyBW[4] =  0.01 *value;			//S - parameter 4
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <Start_UART_Task+0x2f8>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ffc7 	bl	8000524 <__aeabi_i2d>
 8002596:	a312      	add	r3, pc, #72	; (adr r3, 80025e0 <Start_UART_Task+0x2d8>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f82c 	bl	80005f8 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fafe 	bl	8000ba8 <__aeabi_d2f>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <Start_UART_Task+0x308>)
 80025b0:	6113      	str	r3, [r2, #16]
		  IsChange =4;
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <Start_UART_Task+0x304>)
 80025b4:	2204      	movs	r2, #4
 80025b6:	701a      	strb	r2, [r3, #0]
		  break;
 80025b8:	e03a      	b.n	8002630 <Start_UART_Task+0x328>
	  case 'o':
		  everyG[4] = value-12;					//gain value 4
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <Start_UART_Task+0x2f8>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3b0c      	subs	r3, #12
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <Start_UART_Task+0x30c>)
 80025c8:	711a      	strb	r2, [r3, #4]
		  IsChange =4;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <Start_UART_Task+0x304>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	701a      	strb	r2, [r3, #0]
		  break;
 80025d0:	e02e      	b.n	8002630 <Start_UART_Task+0x328>



//VOLUME SET:
	  case 'L':
		  volumeL = value;						//left channel volume level
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <Start_UART_Task+0x2f8>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <Start_UART_Task+0x310>)
 80025da:	701a      	strb	r2, [r3, #0]
		  break;
 80025dc:	e028      	b.n	8002630 <Start_UART_Task+0x328>
 80025de:	bf00      	nop
 80025e0:	47ae147b 	.word	0x47ae147b
 80025e4:	3f847ae1 	.word	0x3f847ae1
 80025e8:	20004a9c 	.word	0x20004a9c
 80025ec:	2000cc38 	.word	0x2000cc38
 80025f0:	200000b9 	.word	0x200000b9
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	200000ba 	.word	0x200000ba
 80025fc:	20004a98 	.word	0x20004a98
 8002600:	2000cd8c 	.word	0x2000cd8c
 8002604:	0800c05c 	.word	0x0800c05c
 8002608:	20000000 	.word	0x20000000
 800260c:	20000020 	.word	0x20000020
 8002610:	2000000c 	.word	0x2000000c
 8002614:	20004aa4 	.word	0x20004aa4
 8002618:	20000022 	.word	0x20000022
	  case 'R':
		  volumeR = value;						//right channel volume level
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <Start_UART_Task+0x350>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <Start_UART_Task+0x354>)
 8002624:	701a      	strb	r2, [r3, #0]
		  break;
 8002626:	e003      	b.n	8002630 <Start_UART_Task+0x328>

//RESET
	  case 'z':
		  IsChange =6;							//set all settings to default
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <Start_UART_Task+0x358>)
 800262a:	2206      	movs	r2, #6
 800262c:	701a      	strb	r2, [r3, #0]
		  break;
 800262e:	bf00      	nop

		  break;

	  }
// message received RED LED signalisation:
	  	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8002630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002634:	480b      	ldr	r0, [pc, #44]	; (8002664 <Start_UART_Task+0x35c>)
 8002636:	f001 f9cc 	bl	80039d2 <HAL_GPIO_TogglePin>
	  	  osDelay(250);
 800263a:	20fa      	movs	r0, #250	; 0xfa
 800263c:	f004 f930 	bl	80068a0 <osDelay>
	  	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8002640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002644:	4807      	ldr	r0, [pc, #28]	; (8002664 <Start_UART_Task+0x35c>)
 8002646:	f001 f9c4 	bl	80039d2 <HAL_GPIO_TogglePin>
	  	  receive_flag=0;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <Start_UART_Task+0x360>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

  }
    osDelay(1);
 8002650:	2001      	movs	r0, #1
 8002652:	f004 f925 	bl	80068a0 <osDelay>
  if(timer_state==1)
 8002656:	e660      	b.n	800231a <Start_UART_Task+0x12>
 8002658:	2000cd8c 	.word	0x2000cd8c
 800265c:	20000021 	.word	0x20000021
 8002660:	20000020 	.word	0x20000020
 8002664:	40020c00 	.word	0x40020c00
 8002668:	200000ba 	.word	0x200000ba

0800266c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d102      	bne.n	8002684 <HAL_TIM_PeriodElapsedCallback+0x18>
	timer_state=1;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 800268e:	f000 fae7 	bl	8002c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40014400 	.word	0x40014400
 80026a0:	200000b9 	.word	0x200000b9
 80026a4:	40001000 	.word	0x40001000

080026a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <Error_Handler+0x8>
	...

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_MspInit+0x54>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_MspInit+0x54>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_MspInit+0x54>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_MspInit+0x54>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_MspInit+0x54>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_MspInit+0x54>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	210f      	movs	r1, #15
 80026f6:	f06f 0001 	mvn.w	r0, #1
 80026fa:	f000 fb89 	bl	8002e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_I2S_MspInit+0x1d8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f040 80ce 	bne.w	80028da <HAL_I2S_MspInit+0x1ce>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800273e:	2301      	movs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002742:	23c0      	movs	r3, #192	; 0xc0
 8002744:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002746:	2302      	movs	r3, #2
 8002748:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fcda 	bl	8005108 <HAL_RCCEx_PeriphCLKConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800275a:	f7ff ffa5 	bl	80026a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_I2S_MspInit+0x1dc>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027b2:	2304      	movs	r3, #4
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80027c2:	2306      	movs	r3, #6
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4847      	ldr	r0, [pc, #284]	; (80028ec <HAL_I2S_MspInit+0x1e0>)
 80027ce:	f000 ff4b 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 80027d2:	2348      	movs	r3, #72	; 0x48
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027e2:	2305      	movs	r3, #5
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ea:	4619      	mov	r1, r3
 80027ec:	483f      	ldr	r0, [pc, #252]	; (80028ec <HAL_I2S_MspInit+0x1e0>)
 80027ee:	f000 ff3b 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002804:	2305      	movs	r3, #5
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	4838      	ldr	r0, [pc, #224]	; (80028f0 <HAL_I2S_MspInit+0x1e4>)
 8002810:	f000 ff2a 	bl	8003668 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8002814:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002816:	4a38      	ldr	r2, [pc, #224]	; (80028f8 <HAL_I2S_MspInit+0x1ec>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 800281c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002820:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002834:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283c:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002844:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284c:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002854:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800285c:	4825      	ldr	r0, [pc, #148]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 800285e:	f000 fb01 	bl	8002e64 <HAL_DMA_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8002868:	f7ff ff1e 	bl	80026a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c
 8002872:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <HAL_I2S_MspInit+0x1e8>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 800287a:	4a21      	ldr	r2, [pc, #132]	; (8002900 <HAL_I2S_MspInit+0x1f4>)
 800287c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 8002892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002896:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 800289a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800289e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80028be:	480f      	ldr	r0, [pc, #60]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028c0:	f000 fad0 	bl	8002e64 <HAL_DMA_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2S_MspInit+0x1c2>
    {
      Error_Handler();
 80028ca:	f7ff feed 	bl	80026a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
 80028d4:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_I2S_MspInit+0x1f0>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028da:	bf00      	nop
 80028dc:	3738      	adds	r7, #56	; 0x38
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40003800 	.word	0x40003800
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020400 	.word	0x40020400
 80028f4:	2000cc80 	.word	0x2000cc80
 80028f8:	40026058 	.word	0x40026058
 80028fc:	2000cce0 	.word	0x2000cce0
 8002900:	40026070 	.word	0x40026070

08002904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_TIM_Base_MspInit+0x48>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d115      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_TIM_Base_MspInit+0x4c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_TIM_Base_MspInit+0x4c>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_TIM_Base_MspInit+0x4c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	2019      	movs	r0, #25
 8002938:	f000 fa6a 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800293c:	2019      	movs	r0, #25
 800293e:	f000 fa83 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40014400 	.word	0x40014400
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_UART_MspInit+0x94>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d133      	bne.n	80029de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <HAL_UART_MspInit+0x98>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_UART_MspInit+0x98>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_UART_MspInit+0x98>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_UART_MspInit+0x98>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_UART_MspInit+0x98>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_UART_MspInit+0x98>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ae:	230c      	movs	r3, #12
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029be:	2307      	movs	r3, #7
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4809      	ldr	r0, [pc, #36]	; (80029f0 <HAL_UART_MspInit+0x9c>)
 80029ca:	f000 fe4d 	bl	8003668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2105      	movs	r1, #5
 80029d2:	2026      	movs	r0, #38	; 0x26
 80029d4:	f000 fa1c 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029d8:	2026      	movs	r0, #38	; 0x26
 80029da:	f000 fa35 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40004400 	.word	0x40004400
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	2036      	movs	r0, #54	; 0x36
 8002a0a:	f000 fa01 	bl	8002e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a0e:	2036      	movs	r0, #54	; 0x36
 8002a10:	f000 fa1a 	bl	8002e48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_InitTick+0xa4>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_InitTick+0xa4>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_InitTick+0xa4>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a30:	f107 0210 	add.w	r2, r7, #16
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fb32 	bl	80050a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a40:	f002 fb08 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8002a44:	4603      	mov	r3, r0
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_InitTick+0xa8>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	3b01      	subs	r3, #1
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_InitTick+0xb0>)
 8002a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a78:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a7a:	f002 fc85 	bl	8005388 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <HAL_InitTick+0xac>)
 8002a86:	f002 fccf 	bl	8005428 <HAL_TIM_Base_Start_IT>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	e000      	b.n	8002a90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	2000cd90 	.word	0x2000cd90
 8002aa4:	40001000 	.word	0x40001000

08002aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <NMI_Handler+0x4>

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <DMA1_Stream3_IRQHandler+0x10>)
 8002ada:	f000 fb5b 	bl	8003194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000cc80 	.word	0x2000cc80

08002ae8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <DMA1_Stream4_IRQHandler+0x10>)
 8002aee:	f000 fb51 	bl	8003194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000cce0 	.word	0x2000cce0

08002afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b02:	f002 fd01 	bl	8005508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20004aac 	.word	0x20004aac

08002b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <USART2_IRQHandler+0x10>)
 8002b16:	f002 ff59 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000cc38 	.word	0x2000cc38

08002b24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM6_DAC_IRQHandler+0x10>)
 8002b2a:	f002 fced 	bl	8005508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000cd90 	.word	0x2000cd90

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f006 fc14 	bl	8009394 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20020000 	.word	0x20020000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	200000bc 	.word	0x200000bc
 8002ba0:	2000ce30 	.word	0x2000ce30

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bf2:	f7ff ffd7 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f006 fbd3 	bl	80093a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfa:	f7fe fe8b 	bl	8001914 <main>
  bx  lr    
 8002bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002c0c:	0800c498 	.word	0x0800c498
  ldr r2, =_sbss
 8002c10:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002c14:	2000ce2c 	.word	0x2000ce2c

08002c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC_IRQHandler>
	...

08002c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <HAL_Init+0x40>)
 8002c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_Init+0x40>)
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_Init+0x40>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f000 f8d8 	bl	8002dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f7ff fed2 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c50:	f7ff fd30 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023c00 	.word	0x40023c00

08002c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x24>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_IncTick+0x24>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	2000002c 	.word	0x2000002c
 8002c84:	2000cdd8 	.word	0x2000cdd8

08002c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000cdd8 	.word	0x2000cdd8

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff4c 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e22:	f7ff ff61 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	6978      	ldr	r0, [r7, #20]
 8002e2e:	f7ff ffb1 	bl	8002d94 <NVIC_EncodePriority>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff80 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff54 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ff0a 	bl	8002c88 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e099      	b.n	8002fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	e00f      	b.n	8002ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea2:	f7ff fef1 	bl	8002c88 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d908      	bls.n	8002ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e078      	b.n	8002fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e8      	bne.n	8002ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_DMA_Init+0x158>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	4313      	orrs	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d117      	bne.n	8002f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fb01 	bl	8003570 <DMA_CheckFifoParam>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f82:	2301      	movs	r3, #1
 8002f84:	e016      	b.n	8002fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fab8 	bl	8003504 <DMA_CalcBaseAndBitshift>
 8002f94:	4603      	mov	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	223f      	movs	r2, #63	; 0x3f
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	f010803f 	.word	0xf010803f

08002fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x26>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e040      	b.n	8003068 <HAL_DMA_Start_IT+0xa8>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d12f      	bne.n	800305a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa4a 	bl	80034a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	223f      	movs	r2, #63	; 0x3f
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0216 	orr.w	r2, r2, #22
 800302e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e005      	b.n	8003066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7ff fe03 	bl	8002c88 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e052      	b.n	8003148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0216 	bic.w	r2, r2, #22
 80030b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_DMA_Abort+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0208 	bic.w	r2, r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f2:	e013      	b.n	800311c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f4:	f7ff fdc8 	bl	8002c88 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d90c      	bls.n	800311c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e015      	b.n	8003148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e4      	bne.n	80030f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	223f      	movs	r2, #63	; 0x3f
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d004      	beq.n	800316e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00c      	b.n	8003188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a0:	4b92      	ldr	r3, [pc, #584]	; (80033ec <HAL_DMA_IRQHandler+0x258>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a92      	ldr	r2, [pc, #584]	; (80033f0 <HAL_DMA_IRQHandler+0x25c>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	2208      	movs	r2, #8
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2208      	movs	r2, #8
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2204      	movs	r2, #4
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2204      	movs	r2, #4
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d043      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03c      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	2210      	movs	r2, #16
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d018      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d024      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e01f      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e016      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0208 	bic.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2220      	movs	r2, #32
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 808e 	beq.w	8003432 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8086 	beq.w	8003432 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2220      	movs	r2, #32
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d136      	bne.n	80033ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0216 	bic.w	r2, r2, #22
 800334c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_DMA_IRQHandler+0x1da>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0208 	bic.w	r2, r2, #8
 800337c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	223f      	movs	r2, #63	; 0x3f
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d07d      	beq.n	800349e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
        }
        return;
 80033aa:	e078      	b.n	800349e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01c      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d030      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	e02b      	b.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
 80033ea:	e022      	b.n	8003432 <HAL_DMA_IRQHandler+0x29e>
 80033ec:	20000024 	.word	0x20000024
 80033f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0210 	bic.w	r2, r2, #16
 8003410:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	2b00      	cmp	r3, #0
 8003438:	d032      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2205      	movs	r2, #5
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3301      	adds	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	429a      	cmp	r2, r3
 8003468:	d307      	bcc.n	800347a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f2      	bne.n	800345e <HAL_DMA_IRQHandler+0x2ca>
 8003478:	e000      	b.n	800347c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800347a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e000      	b.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800349e:	bf00      	nop
    }
  }
}
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop

080034a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d108      	bne.n	80034e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034e6:	e007      	b.n	80034f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b10      	subs	r3, #16
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <DMA_CalcBaseAndBitshift+0x64>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <DMA_CalcBaseAndBitshift+0x68>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d909      	bls.n	8003546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58
 8003544:	e007      	b.n	8003556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	aaaaaaab 	.word	0xaaaaaaab
 800356c:	0800c0e4 	.word	0x0800c0e4

08003570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0x5a>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d856      	bhi.n	800363e <DMA_CheckFifoParam+0xce>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x28>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035bb 	.word	0x080035bb
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	0800363f 	.word	0x0800363f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d046      	beq.n	8003642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b8:	e043      	b.n	8003642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c2:	d140      	bne.n	8003646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e03d      	b.n	8003646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d121      	bne.n	8003618 <DMA_CheckFifoParam+0xa8>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d837      	bhi.n	800364a <DMA_CheckFifoParam+0xda>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x70>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035f7 	.word	0x080035f7
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003609 	.word	0x08003609
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e030      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d025      	beq.n	800364e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e022      	b.n	800364e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003610:	d11f      	bne.n	8003652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003616:	e01c      	b.n	8003652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d903      	bls.n	8003626 <DMA_CheckFifoParam+0xb6>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d003      	beq.n	800362c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003624:	e018      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      break;
 800362a:	e015      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e00b      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 800363e:	bf00      	nop
 8003640:	e00a      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e008      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e006      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
 800364c:	e004      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;   
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003656:	bf00      	nop
    }
  } 
  
  return status; 
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e16b      	b.n	800395c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 815a 	bne.w	8003956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d130      	bne.n	800371c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 0201 	and.w	r2, r3, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d017      	beq.n	8003758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d123      	bne.n	80037ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80b4 	beq.w	8003956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a5f      	ldr	r2, [pc, #380]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_GPIO_Init+0x30c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_GPIO_Init+0x310>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_GPIO_Init+0x314>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_Init+0x226>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_GPIO_Init+0x318>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_Init+0x222>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a50      	ldr	r2, [pc, #320]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_Init+0x21e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4f      	ldr	r2, [pc, #316]	; (8003988 <HAL_GPIO_Init+0x320>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_Init+0x21a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_GPIO_Init+0x324>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0x216>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x328>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_Init+0x212>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_GPIO_Init+0x32c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <HAL_GPIO_Init+0x330>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_Init+0x20a>
 800386e:	2307      	movs	r3, #7
 8003870:	e00e      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003872:	2308      	movs	r3, #8
 8003874:	e00c      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003876:	2306      	movs	r3, #6
 8003878:	e00a      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387a:	2305      	movs	r3, #5
 800387c:	e008      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387e:	2304      	movs	r3, #4
 8003880:	e006      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003882:	2303      	movs	r3, #3
 8003884:	e004      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003886:	2302      	movs	r3, #2
 8003888:	e002      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388e:	2300      	movs	r3, #0
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	f002 0203 	and.w	r2, r2, #3
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a0:	4935      	ldr	r1, [pc, #212]	; (8003978 <HAL_GPIO_Init+0x310>)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	3302      	adds	r3, #2
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_GPIO_Init+0x334>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_GPIO_Init+0x334>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d8:	4b30      	ldr	r3, [pc, #192]	; (800399c <HAL_GPIO_Init+0x334>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <HAL_GPIO_Init+0x334>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_GPIO_Init+0x334>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_GPIO_Init+0x334>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_GPIO_Init+0x334>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <HAL_GPIO_Init+0x334>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	f67f ae90 	bls.w	8003684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40013800 	.word	0x40013800
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021400 	.word	0x40021400
 8003994:	40021800 	.word	0x40021800
 8003998:	40021c00 	.word	0x40021c00
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039bc:	e003      	b.n	80039c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	041a      	lsls	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e128      	b.n	8003c6c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a90      	ldr	r2, [pc, #576]	; (8003c74 <HAL_I2S_Init+0x26c>)
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fe fe69 	bl	800270c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a50:	f023 030f 	bic.w	r3, r3, #15
 8003a54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d060      	beq.n	8003b28 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a6e:	2310      	movs	r3, #16
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e001      	b.n	8003a78 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a74:	2320      	movs	r3, #32
 8003a76:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d802      	bhi.n	8003a86 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a86:	2001      	movs	r0, #1
 8003a88:	f001 fc20 	bl	80052cc <HAL_RCCEx_GetPeriphCLKFreq>
 8003a8c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d125      	bne.n	8003ae4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	3305      	adds	r3, #5
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e01f      	b.n	8003b02 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	3305      	adds	r3, #5
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e00e      	b.n	8003b02 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	461a      	mov	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	3305      	adds	r3, #5
 8003b00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4a5c      	ldr	r2, [pc, #368]	; (8003c78 <HAL_I2S_Init+0x270>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e003      	b.n	8003b30 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d902      	bls.n	8003b3c <HAL_I2S_Init+0x134>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2bff      	cmp	r3, #255	; 0xff
 8003b3a:	d907      	bls.n	8003b4c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08f      	b.n	8003c6c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b6a:	f023 030f 	bic.w	r3, r3, #15
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6851      	ldr	r1, [r2, #4]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68d2      	ldr	r2, [r2, #12]
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6992      	ldr	r2, [r2, #24]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d161      	bne.n	8003c5c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_I2S_Init+0x274>)
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a37      	ldr	r2, [pc, #220]	; (8003c80 <HAL_I2S_Init+0x278>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_I2S_Init+0x1a4>
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_I2S_Init+0x27c>)
 8003baa:	e001      	b.n	8003bb0 <HAL_I2S_Init+0x1a8>
 8003bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	4932      	ldr	r1, [pc, #200]	; (8003c80 <HAL_I2S_Init+0x278>)
 8003bb8:	428a      	cmp	r2, r1
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2S_Init+0x1b8>
 8003bbc:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <HAL_I2S_Init+0x27c>)
 8003bbe:	e001      	b.n	8003bc4 <HAL_I2S_Init+0x1bc>
 8003bc0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bc8:	f023 030f 	bic.w	r3, r3, #15
 8003bcc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_I2S_Init+0x278>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2S_Init+0x1d4>
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <HAL_I2S_Init+0x27c>)
 8003bda:	e001      	b.n	8003be0 <HAL_I2S_Init+0x1d8>
 8003bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be0:	2202      	movs	r2, #2
 8003be2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <HAL_I2S_Init+0x278>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2S_Init+0x1ea>
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <HAL_I2S_Init+0x27c>)
 8003bf0:	e001      	b.n	8003bf6 <HAL_I2S_Init+0x1ee>
 8003bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c02:	d003      	beq.n	8003c0c <HAL_I2S_Init+0x204>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e001      	b.n	8003c18 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c44:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_I2S_Init+0x278>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2S_Init+0x24c>
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <HAL_I2S_Init+0x27c>)
 8003c52:	e001      	b.n	8003c58 <HAL_I2S_Init+0x250>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	897a      	ldrh	r2, [r7, #10]
 8003c5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	08003d7f 	.word	0x08003d7f
 8003c78:	cccccccd 	.word	0xcccccccd
 8003c7c:	080041a9 	.word	0x080041a9
 8003c80:	40003800 	.word	0x40003800
 8003c84:	40003400 	.word	0x40003400

08003c88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10e      	bne.n	8003d18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffb8 	bl	8003c88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	b292      	uxth	r2, r2
 8003d34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10e      	bne.n	8003d76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff93 	bl	8003c9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d13a      	bne.n	8003e10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d109      	bne.n	8003db8 <I2S_IRQHandler+0x3a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d102      	bne.n	8003db8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffb4 	bl	8003d20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d126      	bne.n	8003e10 <I2S_IRQHandler+0x92>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d11f      	bne.n	8003e10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff50 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d136      	bne.n	8003e8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d109      	bne.n	8003e3a <I2S_IRQHandler+0xbc>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d102      	bne.n	8003e3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff45 	bl	8003cc4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d122      	bne.n	8003e8a <I2S_IRQHandler+0x10c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d11b      	bne.n	8003e8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff13 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d002      	beq.n	8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ebe:	e160      	b.n	8004182 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e15a      	b.n	800418c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e152      	b.n	800418c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d002      	beq.n	8003f12 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d114      	bne.n	8003f3c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	865a      	strh	r2, [r3, #50]	; 0x32
 8003f3a:	e00b      	b.n	8003f54 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	4a8b      	ldr	r2, [pc, #556]	; (8004194 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	4a8a      	ldr	r2, [pc, #552]	; (8004198 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	4a89      	ldr	r2, [pc, #548]	; (800419c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a83      	ldr	r2, [pc, #524]	; (800419c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003f90:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa4:	d002      	beq.n	8003fac <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d16b      	bne.n	8004084 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a79      	ldr	r2, [pc, #484]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003fc0:	e001      	b.n	8003fc6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	4619      	mov	r1, r3
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f7fe fff4 	bl	8002fc0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a70      	ldr	r2, [pc, #448]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003fe4:	e001      	b.n	8003fea <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	496b      	ldr	r1, [pc, #428]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003ff6:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ff8:	e001      	b.n	8003ffe <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004004:	f107 0308 	add.w	r3, r7, #8
 8004008:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	461a      	mov	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	b29b      	uxth	r3, r3
 8004020:	f7fe ffce 	bl	8002fc0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0202 	orr.w	r2, r2, #2
 8004032:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	f000 809e 	beq.w	8004182 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a55      	ldr	r2, [pc, #340]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8004050:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004052:	e001      	b.n	8004058 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8004054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4950      	ldr	r1, [pc, #320]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004060:	428b      	cmp	r3, r1
 8004062:	d101      	bne.n	8004068 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004066:	e001      	b.n	800406c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004070:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004080:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004082:	e07e      	b.n	8004182 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004092:	d10a      	bne.n	80040aa <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80040aa:	f107 0308 	add.w	r3, r7, #8
 80040ae:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80040c2:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040c4:	e001      	b.n	80040ca <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80040c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ca:	330c      	adds	r3, #12
 80040cc:	461a      	mov	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f7fe ff74 	bl	8002fc0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80040e2:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040e4:	e001      	b.n	80040ea <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80040e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	492b      	ldr	r1, [pc, #172]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d101      	bne.n	80040fa <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040f8:	e001      	b.n	80040fe <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80040fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fe:	f042 0202 	orr.w	r2, r2, #2
 8004102:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	4619      	mov	r1, r3
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800411c:	b29b      	uxth	r3, r3
 800411e:	f7fe ff4f 	bl	8002fc0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d01e      	beq.n	8004180 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800414e:	e001      	b.n	8004154 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8004150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4911      	ldr	r1, [pc, #68]	; (80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800415c:	428b      	cmp	r3, r1
 800415e:	d101      	bne.n	8004164 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004162:	e001      	b.n	8004168 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800416c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800417c:	61da      	str	r2, [r3, #28]
 800417e:	e000      	b.n	8004182 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8004180:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800418a:	7ffb      	ldrb	r3, [r7, #31]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08004451 	.word	0x08004451
 8004198:	0800446d 	.word	0x0800446d
 800419c:	08004545 	.word	0x08004545
 80041a0:	40003800 	.word	0x40003800
 80041a4:	40003400 	.word	0x40003400

080041a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4aa2      	ldr	r2, [pc, #648]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041c2:	4ba2      	ldr	r3, [pc, #648]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c4:	e001      	b.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a9b      	ldr	r2, [pc, #620]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041e0:	4b9a      	ldr	r3, [pc, #616]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041e2:	e001      	b.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f4:	d004      	beq.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 8099 	bne.w	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d107      	bne.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9d5 	bl	80045c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa78 	bl	8004724 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d13a      	bne.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d035      	beq.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7e      	ldr	r2, [pc, #504]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004252:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004254:	e001      	b.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4979      	ldr	r1, [pc, #484]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004262:	428b      	cmp	r3, r1
 8004264:	d101      	bne.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004266:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004268:	e001      	b.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800426a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004272:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004282:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fcfe 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	f040 80be 	bne.w	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80b8 	beq.w	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a59      	ldr	r2, [pc, #356]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042e6:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e8:	e001      	b.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4954      	ldr	r1, [pc, #336]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f6:	428b      	cmp	r3, r1
 80042f8:	d101      	bne.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042fa:	4b54      	ldr	r3, [pc, #336]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042fc:	e001      	b.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004302:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004306:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0204 	orr.w	r2, r3, #4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fcc0 	bl	8003cb0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004330:	e084      	b.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d107      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f96e 	bl	8004628 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9ad 	bl	80046c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d12f      	bne.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02a      	beq.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004388:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2e      	ldr	r2, [pc, #184]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004396:	e001      	b.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4929      	ldr	r1, [pc, #164]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043a4:	428b      	cmp	r3, r1
 80043a6:	d101      	bne.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043aa:	e001      	b.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fc70 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d131      	bne.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02c      	beq.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043f0:	e001      	b.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4912      	ldr	r1, [pc, #72]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043fe:	428b      	cmp	r3, r1
 8004400:	d101      	bne.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004404:	e001      	b.n	800440a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800440a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800440e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800441e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fc3b 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800443a:	e000      	b.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800443c:	bf00      	nop
}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40003800 	.word	0x40003800
 800444c:	40003400 	.word	0x40003400

08004450 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7fd fd46 	bl	8001ef0 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d155      	bne.n	800452e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004490:	d006      	beq.n	80044a0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11e      	bne.n	80044de <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <I2SEx_TxRxDMACplt+0xd0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <I2SEx_TxRxDMACplt+0x42>
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <I2SEx_TxRxDMACplt+0xd4>)
 80044ac:	e001      	b.n	80044b2 <I2SEx_TxRxDMACplt+0x46>
 80044ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4920      	ldr	r1, [pc, #128]	; (800453c <I2SEx_TxRxDMACplt+0xd0>)
 80044ba:	428b      	cmp	r3, r1
 80044bc:	d101      	bne.n	80044c2 <I2SEx_TxRxDMACplt+0x56>
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <I2SEx_TxRxDMACplt+0xd4>)
 80044c0:	e001      	b.n	80044c6 <I2SEx_TxRxDMACplt+0x5a>
 80044c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0202 	bic.w	r2, r2, #2
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	e01d      	b.n	800451a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <I2SEx_TxRxDMACplt+0xd0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <I2SEx_TxRxDMACplt+0x90>
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <I2SEx_TxRxDMACplt+0xd4>)
 80044fa:	e001      	b.n	8004500 <I2SEx_TxRxDMACplt+0x94>
 80044fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <I2SEx_TxRxDMACplt+0xd0>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d101      	bne.n	8004510 <I2SEx_TxRxDMACplt+0xa4>
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <I2SEx_TxRxDMACplt+0xd4>)
 800450e:	e001      	b.n	8004514 <I2SEx_TxRxDMACplt+0xa8>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004514:	f022 0202 	bic.w	r2, r2, #2
 8004518:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7fd fcee 	bl	8001f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40003800 	.word	0x40003800
 8004540:	40003400 	.word	0x40003400

08004544 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0203 	bic.w	r2, r2, #3
 8004560:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <I2SEx_TxRxDMAError+0x78>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <I2SEx_TxRxDMAError+0x2c>
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <I2SEx_TxRxDMAError+0x7c>)
 800456e:	e001      	b.n	8004574 <I2SEx_TxRxDMAError+0x30>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4910      	ldr	r1, [pc, #64]	; (80045bc <I2SEx_TxRxDMAError+0x78>)
 800457c:	428b      	cmp	r3, r1
 800457e:	d101      	bne.n	8004584 <I2SEx_TxRxDMAError+0x40>
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <I2SEx_TxRxDMAError+0x7c>)
 8004582:	e001      	b.n	8004588 <I2SEx_TxRxDMAError+0x44>
 8004584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004588:	f022 0203 	bic.w	r2, r2, #3
 800458c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f043 0208 	orr.w	r2, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fb7e 	bl	8003cb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40003800 	.word	0x40003800
 80045c0:	40003400 	.word	0x40003400

080045c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c99      	adds	r1, r3, #2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6251      	str	r1, [r2, #36]	; 0x24
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d113      	bne.n	800461e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004604:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fd fc79 	bl	8001f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c99      	adds	r1, r3, #2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6251      	str	r1, [r2, #36]	; 0x24
 800463a:	8819      	ldrh	r1, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <I2SEx_TxISR_I2SExt+0x22>
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <I2SEx_TxISR_I2SExt+0x94>)
 8004648:	e001      	b.n	800464e <I2SEx_TxISR_I2SExt+0x26>
 800464a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464e:	460a      	mov	r2, r1
 8004650:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d121      	bne.n	80046ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <I2SEx_TxISR_I2SExt+0x50>
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <I2SEx_TxISR_I2SExt+0x94>)
 8004676:	e001      	b.n	800467c <I2SEx_TxISR_I2SExt+0x54>
 8004678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	490d      	ldr	r1, [pc, #52]	; (80046b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004684:	428b      	cmp	r3, r1
 8004686:	d101      	bne.n	800468c <I2SEx_TxISR_I2SExt+0x64>
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <I2SEx_TxISR_I2SExt+0x94>)
 800468a:	e001      	b.n	8004690 <I2SEx_TxISR_I2SExt+0x68>
 800468c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004694:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fd fc31 	bl	8001f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40003800 	.word	0x40003800
 80046bc:	40003400 	.word	0x40003400

080046c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68d8      	ldr	r0, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	1c99      	adds	r1, r3, #2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046d8:	b282      	uxth	r2, r0
 80046da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d113      	bne.n	800471c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004702:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd fbfa 	bl	8001f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <I2SEx_RxISR_I2SExt+0x16>
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004738:	e001      	b.n	800473e <I2SEx_RxISR_I2SExt+0x1a>
 800473a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800473e:	68d8      	ldr	r0, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	1c99      	adds	r1, r3, #2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	62d1      	str	r1, [r2, #44]	; 0x2c
 800474a:	b282      	uxth	r2, r0
 800474c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d121      	bne.n	80047aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <I2SEx_RxISR_I2SExt+0x90>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <I2SEx_RxISR_I2SExt+0x50>
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004772:	e001      	b.n	8004778 <I2SEx_RxISR_I2SExt+0x54>
 8004774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	490d      	ldr	r1, [pc, #52]	; (80047b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004780:	428b      	cmp	r3, r1
 8004782:	d101      	bne.n	8004788 <I2SEx_RxISR_I2SExt+0x64>
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004786:	e001      	b.n	800478c <I2SEx_RxISR_I2SExt+0x68>
 8004788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800478c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004790:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fd fbb3 	bl	8001f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40003800 	.word	0x40003800
 80047b8:	40003400 	.word	0x40003400

080047bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e264      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047da:	4ba3      	ldr	r3, [pc, #652]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d00c      	beq.n	8004800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d112      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b9d      	ldr	r3, [pc, #628]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	4b99      	ldr	r3, [pc, #612]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05b      	beq.n	80048c4 <HAL_RCC_OscConfig+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d157      	bne.n	80048c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e23f      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x74>
 8004822:	4b91      	ldr	r3, [pc, #580]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a90      	ldr	r2, [pc, #576]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a8a      	ldr	r2, [pc, #552]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a87      	ldr	r2, [pc, #540]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xb0>
 8004854:	4b84      	ldr	r3, [pc, #528]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a83      	ldr	r2, [pc, #524]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a80      	ldr	r2, [pc, #512]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fe fa08 	bl	8002c88 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fe fa04 	bl	8002c88 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e204      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xc0>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe f9f4 	bl	8002c88 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fe f9f0 	bl	8002c88 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1f0      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0xe8>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d2:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d11c      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1c4      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4952      	ldr	r1, [pc, #328]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	e03a      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCC_OscConfig+0x2b0>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fe f9a9 	bl	8002c88 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe f9a5 	bl	8002c88 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e1a5      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4940      	ldr	r1, [pc, #256]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	e015      	b.n	800499a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496e:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <HAL_RCC_OscConfig+0x2b0>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe f988 	bl	8002c88 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497c:	f7fe f984 	bl	8002c88 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e184      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d030      	beq.n	8004a08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fe f968 	bl	8002c88 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fe f964 	bl	8002c88 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e164      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x200>
 80049da:	e015      	b.n	8004a08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049dc:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7fe f951 	bl	8002c88 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ea:	f7fe f94d 	bl	8002c88 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e14d      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a0 	beq.w	8004b56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_OscConfig+0x2b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d121      	bne.n	8004a96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_RCC_OscConfig+0x2b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <HAL_RCC_OscConfig+0x2b8>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe f913 	bl	8002c88 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e011      	b.n	8004a8a <HAL_RCC_OscConfig+0x2ce>
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	42470000 	.word	0x42470000
 8004a70:	42470e80 	.word	0x42470e80
 8004a74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fe f906 	bl	8002c88 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e106      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8a:	4b85      	ldr	r3, [pc, #532]	; (8004ca0 <HAL_RCC_OscConfig+0x4e4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x2f0>
 8004a9e:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a80      	ldr	r2, [pc, #512]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCC_OscConfig+0x32a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCC_OscConfig+0x312>
 8004ab4:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004aba:	f043 0304 	orr.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	4b78      	ldr	r3, [pc, #480]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a77      	ldr	r2, [pc, #476]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	e00b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x32a>
 8004ace:	4b75      	ldr	r3, [pc, #468]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a74      	ldr	r2, [pc, #464]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	4b72      	ldr	r3, [pc, #456]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a71      	ldr	r2, [pc, #452]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d015      	beq.n	8004b1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fe f8cb 	bl	8002c88 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fe f8c7 	bl	8002c88 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0c5      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0c:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ee      	beq.n	8004af6 <HAL_RCC_OscConfig+0x33a>
 8004b18:	e014      	b.n	8004b44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b1a:	f7fe f8b5 	bl	8002c88 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fe f8b1 	bl	8002c88 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0af      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b38:	4b5a      	ldr	r3, [pc, #360]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ee      	bne.n	8004b22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4a:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a55      	ldr	r2, [pc, #340]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 809b 	beq.w	8004c96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d05c      	beq.n	8004c26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d141      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b74:	4b4c      	ldr	r3, [pc, #304]	; (8004ca8 <HAL_RCC_OscConfig+0x4ec>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fe f885 	bl	8002c88 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fe f881 	bl	8002c88 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e081      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	019b      	lsls	r3, r3, #6
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	4937      	ldr	r1, [pc, #220]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCC_OscConfig+0x4ec>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe f85a 	bl	8002c88 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fe f856 	bl	8002c88 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e056      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x41c>
 8004bf6:	e04e      	b.n	8004c96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <HAL_RCC_OscConfig+0x4ec>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fe f843 	bl	8002c88 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fe f83f 	bl	8002c88 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e03f      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <HAL_RCC_OscConfig+0x44a>
 8004c24:	e037      	b.n	8004c96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e032      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_RCC_OscConfig+0x4e8>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d028      	beq.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d11a      	bne.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d111      	bne.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	42470060 	.word	0x42470060

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0cc      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b68      	ldr	r3, [pc, #416]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d90c      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b65      	ldr	r3, [pc, #404]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b63      	ldr	r3, [pc, #396]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0b8      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d00:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d18:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a52      	ldr	r2, [pc, #328]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b50      	ldr	r3, [pc, #320]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	494d      	ldr	r1, [pc, #308]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d044      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d119      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d003      	beq.n	8004d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e06f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e067      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4934      	ldr	r1, [pc, #208]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd ff74 	bl	8002c88 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da4:	f7fd ff70 	bl	8002c88 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e04f      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 020c 	and.w	r2, r3, #12
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1eb      	bne.n	8004da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d20c      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e032      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4916      	ldr	r1, [pc, #88]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	490e      	ldr	r1, [pc, #56]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e32:	f000 f821 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	490a      	ldr	r1, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x1c0>)
 8004e44:	5ccb      	ldrb	r3, [r1, r3]
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fdce 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40023c00 	.word	0x40023c00
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	0800c0cc 	.word	0x0800c0cc
 8004e70:	20000024 	.word	0x20000024
 8004e74:	20000028 	.word	0x20000028

08004e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e90:	4b67      	ldr	r3, [pc, #412]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	f200 80bd 	bhi.w	800501c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x34>
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eaa:	e0b7      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b61      	ldr	r3, [pc, #388]	; (8005034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eae:	60bb      	str	r3, [r7, #8]
       break;
 8004eb0:	e0b7      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb2:	4b61      	ldr	r3, [pc, #388]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004eb4:	60bb      	str	r3, [r7, #8]
      break;
 8004eb6:	e0b4      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb8:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d04d      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	4b58      	ldr	r3, [pc, #352]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	ea02 0800 	and.w	r8, r2, r0
 8004ee6:	ea03 0901 	and.w	r9, r3, r1
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	014b      	lsls	r3, r1, #5
 8004ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004efc:	0142      	lsls	r2, r0, #5
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	ebb0 0008 	subs.w	r0, r0, r8
 8004f06:	eb61 0109 	sbc.w	r1, r1, r9
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	018b      	lsls	r3, r1, #6
 8004f14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f18:	0182      	lsls	r2, r0, #6
 8004f1a:	1a12      	subs	r2, r2, r0
 8004f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f20:	f04f 0000 	mov.w	r0, #0
 8004f24:	f04f 0100 	mov.w	r1, #0
 8004f28:	00d9      	lsls	r1, r3, #3
 8004f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f2e:	00d0      	lsls	r0, r2, #3
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	eb12 0208 	adds.w	r2, r2, r8
 8004f38:	eb43 0309 	adc.w	r3, r3, r9
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	0259      	lsls	r1, r3, #9
 8004f46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f4a:	0250      	lsls	r0, r2, #9
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	f7fb fe74 	bl	8000c48 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4613      	mov	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e04a      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	099b      	lsrs	r3, r3, #6
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	ea02 0400 	and.w	r4, r2, r0
 8004f82:	ea03 0501 	and.w	r5, r3, r1
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	014b      	lsls	r3, r1, #5
 8004f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f98:	0142      	lsls	r2, r0, #5
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	1b00      	subs	r0, r0, r4
 8004fa0:	eb61 0105 	sbc.w	r1, r1, r5
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	018b      	lsls	r3, r1, #6
 8004fae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fb2:	0182      	lsls	r2, r0, #6
 8004fb4:	1a12      	subs	r2, r2, r0
 8004fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	00d9      	lsls	r1, r3, #3
 8004fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc8:	00d0      	lsls	r0, r2, #3
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	1912      	adds	r2, r2, r4
 8004fd0:	eb45 0303 	adc.w	r3, r5, r3
 8004fd4:	f04f 0000 	mov.w	r0, #0
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	0299      	lsls	r1, r3, #10
 8004fde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fe2:	0290      	lsls	r0, r2, #10
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	f7fb fe28 	bl	8000c48 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	60bb      	str	r3, [r7, #8]
      break;
 800501a:	e002      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800501e:	60bb      	str	r3, [r7, #8]
      break;
 8005020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005022:	68bb      	ldr	r3, [r7, #8]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800
 8005034:	00f42400 	.word	0x00f42400
 8005038:	007a1200 	.word	0x007a1200

0800503c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000024 	.word	0x20000024

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005058:	f7ff fff0 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	0a9b      	lsrs	r3, r3, #10
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4903      	ldr	r1, [pc, #12]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	0800c0dc 	.word	0x0800c0dc

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005080:	f7ff ffdc 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0b5b      	lsrs	r3, r3, #13
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	0800c0dc 	.word	0x0800c0dc

080050a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	220f      	movs	r2, #15
 80050b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_RCC_GetClockConfig+0x60>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	40023c00 	.word	0x40023c00

08005108 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d035      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005130:	4b62      	ldr	r3, [pc, #392]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005136:	f7fd fda7 	bl	8002c88 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800513e:	f7fd fda3 	bl	8002c88 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0b0      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005150:	4b5b      	ldr	r3, [pc, #364]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f0      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	019a      	lsls	r2, r3, #6
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	071b      	lsls	r3, r3, #28
 8005168:	4955      	ldr	r1, [pc, #340]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005170:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005176:	f7fd fd87 	bl	8002c88 <HAL_GetTick>
 800517a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800517e:	f7fd fd83 	bl	8002c88 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e090      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005190:	4b4b      	ldr	r3, [pc, #300]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8083 	beq.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b44      	ldr	r3, [pc, #272]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a43      	ldr	r2, [pc, #268]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b41      	ldr	r3, [pc, #260]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3e      	ldr	r2, [pc, #248]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051d2:	f7fd fd59 	bl	8002c88 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fd fd55 	bl	8002c88 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e062      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051ec:	4b35      	ldr	r3, [pc, #212]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005200:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02f      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	429a      	cmp	r2, r3
 8005214:	d028      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005216:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005220:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005226:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800522c:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d114      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800523e:	f7fd fd23 	bl	8002c88 <HAL_GetTick>
 8005242:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	e00a      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fd fd1f 	bl	8002c88 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f241 3288 	movw	r2, #5000	; 0x1388
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e02a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525c:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ee      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005274:	d10d      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	490d      	ldr	r1, [pc, #52]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800528c:	4313      	orrs	r3, r2
 800528e:	608b      	str	r3, [r1, #8]
 8005290:	e005      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052aa:	4905      	ldr	r1, [pc, #20]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	42470068 	.word	0x42470068
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000
 80052c8:	42470e40 	.word	0x42470e40

080052cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d13e      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d12f      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005302:	617b      	str	r3, [r7, #20]
          break;
 8005304:	e02f      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005306:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005312:	d108      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e007      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	099b      	lsrs	r3, r3, #6
 800533e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800534c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005350:	0f1b      	lsrs	r3, r3, #28
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
          break;
 800535e:	e002      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
          break;
 8005364:	bf00      	nop
        }
      }
      break;
 8005366:	bf00      	nop
    }
  }
  return frequency;
 8005368:	697b      	ldr	r3, [r7, #20]
}
 800536a:	4618      	mov	r0, r3
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	00bb8000 	.word	0x00bb8000
 8005380:	007a1200 	.word	0x007a1200
 8005384:	00f42400 	.word	0x00f42400

08005388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e041      	b.n	800541e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fd faa8 	bl	8002904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f000 f9ce 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e04e      	b.n	80054de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a23      	ldr	r2, [pc, #140]	; (80054ec <HAL_TIM_Base_Start_IT+0xc4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546a:	d01d      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_TIM_Base_Start_IT+0xd8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_TIM_Base_Start_IT+0xdc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d111      	bne.n	80054cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d010      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	e007      	b.n	80054dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40001800 	.word	0x40001800

08005508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d122      	bne.n	8005564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0202 	mvn.w	r2, #2
 8005534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8ee 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8e0 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8f1 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d122      	bne.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b04      	cmp	r3, #4
 800557e:	d11b      	bne.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0204 	mvn.w	r2, #4
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8c4 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8b6 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8c7 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d122      	bne.n	800560c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d11b      	bne.n	800560c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0208 	mvn.w	r2, #8
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2204      	movs	r2, #4
 80055e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f89a 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f88c 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f89d 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b10      	cmp	r3, #16
 8005618:	d122      	bne.n	8005660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b10      	cmp	r3, #16
 8005626:	d11b      	bne.n	8005660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0210 	mvn.w	r2, #16
 8005630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2208      	movs	r2, #8
 8005636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f870 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f862 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f873 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10e      	bne.n	800568c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b01      	cmp	r3, #1
 800567a:	d107      	bne.n	800568c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0201 	mvn.w	r2, #1
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fff0 	bl	800266c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f902 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f838 	bl	8005754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0220 	mvn.w	r2, #32
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8cc 	bl	80058a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <TIM_Base_SetConfig+0x118>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <TIM_Base_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3a      	ldr	r2, [pc, #232]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	; (800587c <TIM_Base_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d027      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <TIM_Base_SetConfig+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d023      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_Base_SetConfig+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d017      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <TIM_Base_SetConfig+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <TIM_Base_SetConfig+0x12c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <TIM_Base_SetConfig+0x130>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <TIM_Base_SetConfig+0x134>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <TIM_Base_SetConfig+0x138>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a23      	ldr	r2, [pc, #140]	; (80058a4 <TIM_Base_SetConfig+0x13c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0c      	ldr	r2, [pc, #48]	; (800588c <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	615a      	str	r2, [r3, #20]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40010400 	.word	0x40010400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	40001800 	.word	0x40001800
 80058a0:	40001c00 	.word	0x40001c00
 80058a4:	40002000 	.word	0x40002000

080058a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e03f      	b.n	8005962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fd f82c 	bl	8002954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fcdb 	bl	80062d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b20      	cmp	r3, #32
 8005982:	d11d      	bne.n	80059c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_UART_Receive_IT+0x26>
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e016      	b.n	80059c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Receive_IT+0x38>
 800599e:	2302      	movs	r3, #2
 80059a0:	e00f      	b.n	80059c2 <HAL_UART_Receive_IT+0x58>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fab6 	bl	8005f28 <UART_Start_Receive_IT>
 80059bc:	4603      	mov	r3, r0
 80059be:	e000      	b.n	80059c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0ba      	sub	sp, #232	; 0xe8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_UART_IRQHandler+0x66>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fb95 	bl	800615a <UART_Receive_IT>
      return;
 8005a30:	e256      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80de 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x22c>
 8005a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80d1 	beq.w	8005bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_UART_IRQHandler+0xae>
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <HAL_UART_IRQHandler+0xd2>
 8005a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0202 	orr.w	r2, r3, #2
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xf6>
 8005aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d011      	beq.n	8005af2 <HAL_UART_IRQHandler+0x126>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 81ed 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_UART_IRQHandler+0x14e>
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fb20 	bl	800615a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_UART_IRQHandler+0x17a>
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d04f      	beq.n	8005be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa28 	bl	8005f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d141      	bne.n	8005bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d9      	bne.n	8005b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d013      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	4a7d      	ldr	r2, [pc, #500]	; (8005da8 <HAL_UART_IRQHandler+0x3dc>)
 8005bb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fac8 	bl	8003150 <HAL_DMA_Abort_IT>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d016      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	e00e      	b.n	8005bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f990 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	e00a      	b.n	8005bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f98c 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	e006      	b.n	8005bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f988 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bf2:	e170      	b.n	8005ed6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf4:	bf00      	nop
    return;
 8005bf6:	e16e      	b.n	8005ed6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	f040 814a 	bne.w	8005e96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8143 	beq.w	8005e96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 813c 	beq.w	8005e96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	f040 80b4 	bne.w	8005dac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8140 	beq.w	8005eda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c62:	429a      	cmp	r2, r3
 8005c64:	f080 8139 	bcs.w	8005eda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	f000 8088 	beq.w	8005d8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1d9      	bne.n	8005c7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e1      	bne.n	8005cca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e3      	bne.n	8005d06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d70:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e3      	bne.n	8005d4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fd f971 	bl	8003070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f8b6 	bl	8005f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da4:	e099      	b.n	8005eda <HAL_UART_IRQHandler+0x50e>
 8005da6:	bf00      	nop
 8005da8:	08006063 	.word	0x08006063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 808b 	beq.w	8005ede <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8086 	beq.w	8005ede <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005df6:	647a      	str	r2, [r7, #68]	; 0x44
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	623b      	str	r3, [r7, #32]
   return(result);
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e3      	bne.n	8005e0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0310 	bic.w	r3, r3, #16
 8005e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e74:	61fa      	str	r2, [r7, #28]
 8005e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	617b      	str	r3, [r7, #20]
   return(result);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e3      	bne.n	8005e50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f83e 	bl	8005f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e94:	e023      	b.n	8005ede <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x4ea>
 8005ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8eb 	bl	800608a <UART_Transmit_IT>
    return;
 8005eb4:	e014      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x514>
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f92b 	bl	800612a <UART_EndTransmit_IT>
    return;
 8005ed4:	e004      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8005ede:	bf00      	nop
  }
}
 8005ee0:	37e8      	adds	r7, #232	; 0xe8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop

08005ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2222      	movs	r2, #34	; 0x22
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0220 	orr.w	r2, r2, #32
 8005f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b095      	sub	sp, #84	; 0x54
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fc4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d119      	bne.n	8006048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60bb      	str	r3, [r7, #8]
   return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006034:	61ba      	str	r2, [r7, #24]
 8006036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	613b      	str	r3, [r7, #16]
   return(result);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006056:	bf00      	nop
 8006058:	3754      	adds	r7, #84	; 0x54
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff ff3d 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b21      	cmp	r3, #33	; 0x21
 800609c:	d13e      	bne.n	800611c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	d114      	bne.n	80060d2 <UART_Transmit_IT+0x48>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d110      	bne.n	80060d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	1c9a      	adds	r2, r3, #2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]
 80060d0:	e008      	b.n	80060e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6211      	str	r1, [r2, #32]
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4619      	mov	r1, r3
 80060f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10f      	bne.n	8006118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fecc 	bl	8005ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08c      	sub	sp, #48	; 0x30
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	f040 80ab 	bne.w	80062c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d117      	bne.n	80061aa <UART_Receive_IT+0x50>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d113      	bne.n	80061aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	b29a      	uxth	r2, r3
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
 80061a8:	e026      	b.n	80061f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d007      	beq.n	80061ce <UART_Receive_IT+0x74>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <UART_Receive_IT+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e008      	b.n	80061ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006208:	2b00      	cmp	r3, #0
 800620a:	d15a      	bne.n	80062c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0220 	bic.w	r2, r2, #32
 800621a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	d135      	bne.n	80062b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	613b      	str	r3, [r7, #16]
   return(result);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f023 0310 	bic.w	r3, r3, #16
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	623a      	str	r2, [r7, #32]
 8006274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	69f9      	ldr	r1, [r7, #28]
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d10a      	bne.n	80062aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fe2d 	bl	8005f10 <HAL_UARTEx_RxEventCallback>
 80062b6:	e002      	b.n	80062be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fb fe39 	bl	8001f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e002      	b.n	80062c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3730      	adds	r7, #48	; 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	b09f      	sub	sp, #124	; 0x7c
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e6:	68d9      	ldr	r1, [r3, #12]
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	ea40 0301 	orr.w	r3, r0, r1
 80062f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	431a      	orrs	r2, r3
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006314:	f021 010c 	bic.w	r1, r1, #12
 8006318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631e:	430b      	orrs	r3, r1
 8006320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	6999      	ldr	r1, [r3, #24]
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	ea40 0301 	orr.w	r3, r0, r1
 8006338:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4bc5      	ldr	r3, [pc, #788]	; (8006654 <UART_SetConfig+0x384>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d004      	beq.n	800634e <UART_SetConfig+0x7e>
 8006344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4bc3      	ldr	r3, [pc, #780]	; (8006658 <UART_SetConfig+0x388>)
 800634a:	429a      	cmp	r2, r3
 800634c:	d103      	bne.n	8006356 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800634e:	f7fe fe95 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8006352:	6778      	str	r0, [r7, #116]	; 0x74
 8006354:	e002      	b.n	800635c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006356:	f7fe fe7d 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 800635a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	f040 80b6 	bne.w	80064d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636a:	461c      	mov	r4, r3
 800636c:	f04f 0500 	mov.w	r5, #0
 8006370:	4622      	mov	r2, r4
 8006372:	462b      	mov	r3, r5
 8006374:	1891      	adds	r1, r2, r2
 8006376:	6439      	str	r1, [r7, #64]	; 0x40
 8006378:	415b      	adcs	r3, r3
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
 800637c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006380:	1912      	adds	r2, r2, r4
 8006382:	eb45 0303 	adc.w	r3, r5, r3
 8006386:	f04f 0000 	mov.w	r0, #0
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	00d9      	lsls	r1, r3, #3
 8006390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006394:	00d0      	lsls	r0, r2, #3
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	1911      	adds	r1, r2, r4
 800639c:	6639      	str	r1, [r7, #96]	; 0x60
 800639e:	416b      	adcs	r3, r5
 80063a0:	667b      	str	r3, [r7, #100]	; 0x64
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	1891      	adds	r1, r2, r2
 80063ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80063b0:	415b      	adcs	r3, r3
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063bc:	f7fa fc44 	bl	8000c48 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4ba5      	ldr	r3, [pc, #660]	; (800665c <UART_SetConfig+0x38c>)
 80063c6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	011e      	lsls	r6, r3, #4
 80063ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d0:	461c      	mov	r4, r3
 80063d2:	f04f 0500 	mov.w	r5, #0
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	6339      	str	r1, [r7, #48]	; 0x30
 80063de:	415b      	adcs	r3, r3
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
 80063e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063e6:	1912      	adds	r2, r2, r4
 80063e8:	eb45 0303 	adc.w	r3, r5, r3
 80063ec:	f04f 0000 	mov.w	r0, #0
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	00d9      	lsls	r1, r3, #3
 80063f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063fa:	00d0      	lsls	r0, r2, #3
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	1911      	adds	r1, r2, r4
 8006402:	65b9      	str	r1, [r7, #88]	; 0x58
 8006404:	416b      	adcs	r3, r5
 8006406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	1891      	adds	r1, r2, r2
 8006414:	62b9      	str	r1, [r7, #40]	; 0x28
 8006416:	415b      	adcs	r3, r3
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800641e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006422:	f7fa fc11 	bl	8000c48 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4b8c      	ldr	r3, [pc, #560]	; (800665c <UART_SetConfig+0x38c>)
 800642c:	fba3 1302 	umull	r1, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	2164      	movs	r1, #100	; 0x64
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	3332      	adds	r3, #50	; 0x32
 800643e:	4a87      	ldr	r2, [pc, #540]	; (800665c <UART_SetConfig+0x38c>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800644c:	441e      	add	r6, r3
 800644e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006450:	4618      	mov	r0, r3
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	1894      	adds	r4, r2, r2
 800645c:	623c      	str	r4, [r7, #32]
 800645e:	415b      	adcs	r3, r3
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006466:	1812      	adds	r2, r2, r0
 8006468:	eb41 0303 	adc.w	r3, r1, r3
 800646c:	f04f 0400 	mov.w	r4, #0
 8006470:	f04f 0500 	mov.w	r5, #0
 8006474:	00dd      	lsls	r5, r3, #3
 8006476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800647a:	00d4      	lsls	r4, r2, #3
 800647c:	4622      	mov	r2, r4
 800647e:	462b      	mov	r3, r5
 8006480:	1814      	adds	r4, r2, r0
 8006482:	653c      	str	r4, [r7, #80]	; 0x50
 8006484:	414b      	adcs	r3, r1
 8006486:	657b      	str	r3, [r7, #84]	; 0x54
 8006488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	461a      	mov	r2, r3
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	1891      	adds	r1, r2, r2
 8006494:	61b9      	str	r1, [r7, #24]
 8006496:	415b      	adcs	r3, r3
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800649e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80064a2:	f7fa fbd1 	bl	8000c48 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b6c      	ldr	r3, [pc, #432]	; (800665c <UART_SetConfig+0x38c>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a67      	ldr	r2, [pc, #412]	; (800665c <UART_SetConfig+0x38c>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 0207 	and.w	r2, r3, #7
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4432      	add	r2, r6
 80064d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d2:	e0b9      	b.n	8006648 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d6:	461c      	mov	r4, r3
 80064d8:	f04f 0500 	mov.w	r5, #0
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	6139      	str	r1, [r7, #16]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064ec:	1912      	adds	r2, r2, r4
 80064ee:	eb45 0303 	adc.w	r3, r5, r3
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	00d9      	lsls	r1, r3, #3
 80064fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006500:	00d0      	lsls	r0, r2, #3
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	eb12 0804 	adds.w	r8, r2, r4
 800650a:	eb43 0905 	adc.w	r9, r3, r5
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4618      	mov	r0, r3
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	008b      	lsls	r3, r1, #2
 8006522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006526:	0082      	lsls	r2, r0, #2
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fb8c 	bl	8000c48 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <UART_SetConfig+0x38c>)
 8006536:	fba3 2302 	umull	r2, r3, r3, r2
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	011e      	lsls	r6, r3, #4
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	4618      	mov	r0, r3
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	1894      	adds	r4, r2, r2
 800654c:	60bc      	str	r4, [r7, #8]
 800654e:	415b      	adcs	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006556:	1812      	adds	r2, r2, r0
 8006558:	eb41 0303 	adc.w	r3, r1, r3
 800655c:	f04f 0400 	mov.w	r4, #0
 8006560:	f04f 0500 	mov.w	r5, #0
 8006564:	00dd      	lsls	r5, r3, #3
 8006566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800656a:	00d4      	lsls	r4, r2, #3
 800656c:	4622      	mov	r2, r4
 800656e:	462b      	mov	r3, r5
 8006570:	1814      	adds	r4, r2, r0
 8006572:	64bc      	str	r4, [r7, #72]	; 0x48
 8006574:	414b      	adcs	r3, r1
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	008b      	lsls	r3, r1, #2
 800658c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006590:	0082      	lsls	r2, r0, #2
 8006592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006596:	f7fa fb57 	bl	8000c48 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <UART_SetConfig+0x38c>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a2a      	ldr	r2, [pc, #168]	; (800665c <UART_SetConfig+0x38c>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065be:	441e      	add	r6, r3
 80065c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c2:	4618      	mov	r0, r3
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	1894      	adds	r4, r2, r2
 80065ce:	603c      	str	r4, [r7, #0]
 80065d0:	415b      	adcs	r3, r3
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d8:	1812      	adds	r2, r2, r0
 80065da:	eb41 0303 	adc.w	r3, r1, r3
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	f04f 0500 	mov.w	r5, #0
 80065e6:	00dd      	lsls	r5, r3, #3
 80065e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065ec:	00d4      	lsls	r4, r2, #3
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	eb12 0a00 	adds.w	sl, r2, r0
 80065f6:	eb43 0b01 	adc.w	fp, r3, r1
 80065fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	f04f 0100 	mov.w	r1, #0
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	008b      	lsls	r3, r1, #2
 800660e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006612:	0082      	lsls	r2, r0, #2
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7fa fb16 	bl	8000c48 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <UART_SetConfig+0x38c>)
 8006622:	fba3 1302 	umull	r1, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2164      	movs	r1, #100	; 0x64
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	3332      	adds	r3, #50	; 0x32
 8006634:	4a09      	ldr	r2, [pc, #36]	; (800665c <UART_SetConfig+0x38c>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4432      	add	r2, r6
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	377c      	adds	r7, #124	; 0x7c
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40011000 	.word	0x40011000
 8006658:	40011400 	.word	0x40011400
 800665c:	51eb851f 	.word	0x51eb851f

08006660 <__NVIC_SetPriority>:
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db0a      	blt.n	800668a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	490c      	ldr	r1, [pc, #48]	; (80066ac <__NVIC_SetPriority+0x4c>)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	0112      	lsls	r2, r2, #4
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	440b      	add	r3, r1
 8006684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006688:	e00a      	b.n	80066a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <__NVIC_SetPriority+0x50>)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	3b04      	subs	r3, #4
 8006698:	0112      	lsls	r2, r2, #4
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	440b      	add	r3, r1
 800669e:	761a      	strb	r2, [r3, #24]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	e000e100 	.word	0xe000e100
 80066b0:	e000ed00 	.word	0xe000ed00

080066b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <SysTick_Handler+0x1c>)
 80066ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066bc:	f001 fd28 	bl	8008110 <xTaskGetSchedulerState>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d001      	beq.n	80066ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066c6:	f002 fb0f 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010

080066d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066d8:	2100      	movs	r1, #0
 80066da:	f06f 0004 	mvn.w	r0, #4
 80066de:	f7ff ffbf 	bl	8006660 <__NVIC_SetPriority>
#endif
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ee:	f3ef 8305 	mrs	r3, IPSR
 80066f2:	603b      	str	r3, [r7, #0]
  return(result);
 80066f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066fa:	f06f 0305 	mvn.w	r3, #5
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	e00c      	b.n	800671c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <osKernelInitialize+0x44>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <osKernelInitialize+0x44>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006710:	2300      	movs	r3, #0
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e002      	b.n	800671c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800671c:	687b      	ldr	r3, [r7, #4]
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	200000c0 	.word	0x200000c0

08006730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006736:	f3ef 8305 	mrs	r3, IPSR
 800673a:	603b      	str	r3, [r7, #0]
  return(result);
 800673c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006742:	f06f 0305 	mvn.w	r3, #5
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	e010      	b.n	800676c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <osKernelStart+0x48>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d109      	bne.n	8006766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006752:	f7ff ffbf 	bl	80066d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <osKernelStart+0x48>)
 8006758:	2202      	movs	r2, #2
 800675a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800675c:	f001 f87c 	bl	8007858 <vTaskStartScheduler>
      stat = osOK;
 8006760:	2300      	movs	r3, #0
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e002      	b.n	800676c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200000c0 	.word	0x200000c0

0800677c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af04      	add	r7, sp, #16
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678c:	f3ef 8305 	mrs	r3, IPSR
 8006790:	617b      	str	r3, [r7, #20]
  return(result);
 8006792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006794:	2b00      	cmp	r3, #0
 8006796:	d17e      	bne.n	8006896 <osThreadNew+0x11a>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d07b      	beq.n	8006896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067a2:	2318      	movs	r3, #24
 80067a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d045      	beq.n	8006842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <osThreadNew+0x48>
        name = attr->name;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <osThreadNew+0x6e>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b38      	cmp	r3, #56	; 0x38
 80067dc:	d805      	bhi.n	80067ea <osThreadNew+0x6e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <osThreadNew+0x72>
        return (NULL);
 80067ea:	2300      	movs	r3, #0
 80067ec:	e054      	b.n	8006898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <osThreadNew+0xa8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2bbb      	cmp	r3, #187	; 0xbb
 800680c:	d90a      	bls.n	8006824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006812:	2b00      	cmp	r3, #0
 8006814:	d006      	beq.n	8006824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osThreadNew+0xa8>
        mem = 1;
 800681e:	2301      	movs	r3, #1
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e010      	b.n	8006846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10c      	bne.n	8006846 <osThreadNew+0xca>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <osThreadNew+0xca>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <osThreadNew+0xca>
          mem = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	e001      	b.n	8006846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d110      	bne.n	800686e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006854:	9202      	str	r2, [sp, #8]
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fe0c 	bl	8007480 <xTaskCreateStatic>
 8006868:	4603      	mov	r3, r0
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e013      	b.n	8006896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f107 0310 	add.w	r3, r7, #16
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fe57 	bl	800753a <xTaskCreate>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <osThreadNew+0x11a>
            hTask = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006896:	693b      	ldr	r3, [r7, #16]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a8:	f3ef 8305 	mrs	r3, IPSR
 80068ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80068ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <osDelay+0x1c>
    stat = osErrorISR;
 80068b4:	f06f 0305 	mvn.w	r3, #5
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e007      	b.n	80068cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 ff92 	bl	80077f0 <vTaskDelay>
    }
  }

  return (stat);
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a07      	ldr	r2, [pc, #28]	; (8006904 <vApplicationGetIdleTaskMemory+0x2c>)
 80068e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a06      	ldr	r2, [pc, #24]	; (8006908 <vApplicationGetIdleTaskMemory+0x30>)
 80068ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	200000c4 	.word	0x200000c4
 8006908:	20000180 	.word	0x20000180

0800690c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a07      	ldr	r2, [pc, #28]	; (8006938 <vApplicationGetTimerTaskMemory+0x2c>)
 800691c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a06      	ldr	r2, [pc, #24]	; (800693c <vApplicationGetTimerTaskMemory+0x30>)
 8006922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800692a:	601a      	str	r2, [r3, #0]
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000380 	.word	0x20000380
 800693c:	2000043c 	.word	0x2000043c

08006940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f103 0208 	add.w	r2, r3, #8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f04f 32ff 	mov.w	r2, #4294967295
 8006958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f103 0208 	add.w	r2, r3, #8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f103 0208 	add.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e00c      	b.n	8006a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3308      	adds	r3, #8
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e002      	b.n	8006a10 <vListInsert+0x2e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d2f6      	bcs.n	8006a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6892      	ldr	r2, [r2, #8]
 8006a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6852      	ldr	r2, [r2, #4]
 8006a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d103      	bne.n	8006a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ad2:	f002 f877 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ae2:	fb01 f303 	mul.w	r3, r1, r3
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	3b01      	subs	r3, #1
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	441a      	add	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	22ff      	movs	r2, #255	; 0xff
 8006b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d114      	bne.n	8006b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01a      	beq.n	8006b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3310      	adds	r3, #16
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 f929 	bl	8007d8c <xTaskRemoveFromEventList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xQueueGenericReset+0xcc>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	e009      	b.n	8006b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3310      	adds	r3, #16
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fef2 	bl	8006940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3324      	adds	r3, #36	; 0x24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff feed 	bl	8006940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f002 f85d 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b6a:	2301      	movs	r3, #1
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	; 0x38
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <xQueueGenericCreateStatic+0x52>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <xQueueGenericCreateStatic+0x56>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericCreateStatic+0x58>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <xQueueGenericCreateStatic+0x7e>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <xQueueGenericCreateStatic+0x82>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueGenericCreateStatic+0x84>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61fb      	str	r3, [r7, #28]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c16:	2350      	movs	r3, #80	; 0x50
 8006c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b50      	cmp	r3, #80	; 0x50
 8006c1e:	d00a      	beq.n	8006c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	61bb      	str	r3, [r7, #24]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f805 	bl	8006c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3730      	adds	r7, #48	; 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c96:	2101      	movs	r1, #1
 8006c98:	69b8      	ldr	r0, [r7, #24]
 8006c9a:	f7ff ff05 	bl	8006aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	; 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d103      	bne.n	8006cf0 <xQueueGenericSend+0x40>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <xQueueGenericSend+0x44>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <xQueueGenericSend+0x46>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xQueueGenericSend+0x60>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x6e>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <xQueueGenericSend+0x72>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueGenericSend+0x74>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	623b      	str	r3, [r7, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d3e:	f001 f9e7 	bl	8008110 <xTaskGetSchedulerState>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <xQueueGenericSend+0x9e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <xQueueGenericSend+0xa2>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGenericSend+0xa4>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61fb      	str	r3, [r7, #28]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d6e:	f001 ff29 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d302      	bcc.n	8006d84 <xQueueGenericSend+0xd4>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d129      	bne.n	8006dd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d8a:	f000 fa0b 	bl	80071a4 <prvCopyDataToQueue>
 8006d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fff5 	bl	8007d8c <xTaskRemoveFromEventList>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d013      	beq.n	8006dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006da8:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	e00a      	b.n	8006dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dd0:	f001 ff28 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e063      	b.n	8006ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dde:	f001 ff21 	bl	8008c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e05c      	b.n	8006ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dec:	f107 0314 	add.w	r3, r7, #20
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f82f 	bl	8007e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dfa:	f001 ff13 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dfe:	f000 fd9b 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e02:	f001 fedf 	bl	8008bc4 <vPortEnterCritical>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d103      	bne.n	8006e1c <xQueueGenericSend+0x16c>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d103      	bne.n	8006e32 <xQueueGenericSend+0x182>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e32:	f001 fef7 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e36:	1d3a      	adds	r2, r7, #4
 8006e38:	f107 0314 	add.w	r3, r7, #20
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 f81e 	bl	8007e80 <xTaskCheckForTimeOut>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d124      	bne.n	8006e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4c:	f000 faa2 	bl	8007394 <prvIsQueueFull>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	3310      	adds	r3, #16
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff44 	bl	8007cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e66:	f000 fa2d 	bl	80072c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e6a:	f000 fd73 	bl	8007954 <xTaskResumeAll>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f af7c 	bne.w	8006d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	e772      	b.n	8006d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e8a:	f000 fa1b 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8e:	f000 fd61 	bl	8007954 <xTaskResumeAll>
 8006e92:	e76c      	b.n	8006d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e96:	f000 fa15 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e9a:	f000 fd5b 	bl	8007954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3738      	adds	r7, #56	; 0x38
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b090      	sub	sp, #64	; 0x40
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d103      	bne.n	8006ee8 <xQueueGenericSendFromISR+0x3c>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueGenericSendFromISR+0x40>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueGenericSendFromISR+0x42>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d103      	bne.n	8006f16 <xQueueGenericSendFromISR+0x6a>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSendFromISR+0x6e>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSendFromISR+0x70>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f36:	f001 ff27 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	61fa      	str	r2, [r7, #28]
 8006f50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <xQueueGenericSendFromISR+0xbc>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d12f      	bne.n	8006fc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f7e:	f000 f911 	bl	80071a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d112      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	3324      	adds	r3, #36	; 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fef7 	bl	8007d8c <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e007      	b.n	8006fc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	b25a      	sxtb	r2, r3
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fc6:	e001      	b.n	8006fcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3740      	adds	r7, #64	; 0x40
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	; 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xQueueReceive+0x30>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	623b      	str	r3, [r7, #32]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueReceive+0x3e>
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <xQueueReceive+0x42>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueReceive+0x44>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueReceive+0x5e>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	61fb      	str	r3, [r7, #28]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007042:	f001 f865 	bl	8008110 <xTaskGetSchedulerState>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <xQueueReceive+0x6e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xQueueReceive+0x72>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueReceive+0x74>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueReceive+0x8e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	61bb      	str	r3, [r7, #24]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007072:	f001 fda7 	bl	8008bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01f      	beq.n	80070c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007086:	f000 f8f7 	bl	8007278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00f      	beq.n	80070ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	3310      	adds	r3, #16
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fe74 	bl	8007d8c <xTaskRemoveFromEventList>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <xQueueReceive+0x1bc>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ba:	f001 fdb3 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 80070be:	2301      	movs	r3, #1
 80070c0:	e069      	b.n	8007196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c8:	f001 fdac 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e062      	b.n	8007196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d6:	f107 0310 	add.w	r3, r7, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 feba 	bl	8007e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e4:	f001 fd9e 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e8:	f000 fc26 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ec:	f001 fd6a 	bl	8008bc4 <vPortEnterCritical>
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d103      	bne.n	8007106 <xQueueReceive+0x122>
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800710c:	b25b      	sxtb	r3, r3
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d103      	bne.n	800711c <xQueueReceive+0x138>
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800711c:	f001 fd82 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007120:	1d3a      	adds	r2, r7, #4
 8007122:	f107 0310 	add.w	r3, r7, #16
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fea9 	bl	8007e80 <xTaskCheckForTimeOut>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d123      	bne.n	800717c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007136:	f000 f917 	bl	8007368 <prvIsQueueEmpty>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d017      	beq.n	8007170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fdcf 	bl	8007cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800714e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007150:	f000 f8b8 	bl	80072c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007154:	f000 fbfe 	bl	8007954 <xTaskResumeAll>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d189      	bne.n	8007072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <xQueueReceive+0x1bc>)
 8007160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	e780      	b.n	8007072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007172:	f000 f8a7 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007176:	f000 fbed 	bl	8007954 <xTaskResumeAll>
 800717a:	e77a      	b.n	8007072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	f000 f8a1 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007182:	f000 fbe7 	bl	8007954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f000 f8ee 	bl	8007368 <prvIsQueueEmpty>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	f43f af6f 	beq.w	8007072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	; 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d14d      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 ffbc 	bl	800814c <xTaskPriorityDisinherit>
 80071d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	e043      	b.n	8007266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d119      	bne.n	8007218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6858      	ldr	r0, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	461a      	mov	r2, r3
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	f002 f8fc 	bl	80093ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d32b      	bcc.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	e026      	b.n	8007266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68d8      	ldr	r0, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	f002 f8e2 	bl	80093ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	425b      	negs	r3, r3
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	425b      	negs	r3, r3
 800724e:	441a      	add	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d105      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3b01      	subs	r3, #1
 8007264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800726e:	697b      	ldr	r3, [r7, #20]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d018      	beq.n	80072bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	441a      	add	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d303      	bcc.n	80072ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	461a      	mov	r2, r3
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f002 f898 	bl	80093ec <memcpy>
	}
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072cc:	f001 fc7a 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d8:	e011      	b.n	80072fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d012      	beq.n	8007308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fd50 	bl	8007d8c <xTaskRemoveFromEventList>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072f2:	f000 fe27 	bl	8007f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dce9      	bgt.n	80072da <prvUnlockQueue+0x16>
 8007306:	e000      	b.n	800730a <prvUnlockQueue+0x46>
					break;
 8007308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	22ff      	movs	r2, #255	; 0xff
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007312:	f001 fc87 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007316:	f001 fc55 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007322:	e011      	b.n	8007348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d012      	beq.n	8007352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3310      	adds	r3, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fd2b 	bl	8007d8c <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800733c:	f000 fe02 	bl	8007f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	3b01      	subs	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dce9      	bgt.n	8007324 <prvUnlockQueue+0x60>
 8007350:	e000      	b.n	8007354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	22ff      	movs	r2, #255	; 0xff
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800735c:	f001 fc62 	bl	8008c24 <vPortExitCritical>
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007370:	f001 fc28 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e001      	b.n	8007386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007386:	f001 fc4d 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800739c:	f001 fc12 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d102      	bne.n	80073b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b6:	f001 fc35 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e014      	b.n	80073fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073d4:	4a0f      	ldr	r2, [pc, #60]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073e0:	490c      	ldr	r1, [pc, #48]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073ea:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073f6:	e006      	b.n	8007406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b07      	cmp	r3, #7
 8007402:	d9e7      	bls.n	80073d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000cddc 	.word	0x2000cddc

08007418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007428:	f001 fbcc 	bl	8008bc4 <vPortEnterCritical>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <vQueueWaitForMessageRestricted+0x2a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007448:	b25b      	sxtb	r3, r3
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d103      	bne.n	8007458 <vQueueWaitForMessageRestricted+0x40>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007458:	f001 fbe4 	bl	8008c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fc61 	bl	8007d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007472:	6978      	ldr	r0, [r7, #20]
 8007474:	f7ff ff26 	bl	80072c4 <prvUnlockQueue>
	}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	; 0x38
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	623b      	str	r3, [r7, #32]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61fb      	str	r3, [r7, #28]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074c6:	23bc      	movs	r3, #188	; 0xbc
 80074c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2bbc      	cmp	r3, #188	; 0xbc
 80074ce:	d00a      	beq.n	80074e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01e      	beq.n	800752c <xTaskCreateStatic+0xac>
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2202      	movs	r2, #2
 8007502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007506:	2300      	movs	r3, #0
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f850 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007526:	f000 f8f3 	bl	8007710 <prvAddNewTaskToReadyList>
 800752a:	e001      	b.n	8007530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007530:	697b      	ldr	r3, [r7, #20]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	; 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08c      	sub	sp, #48	; 0x30
 800753e:	af04      	add	r7, sp, #16
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fc5a 	bl	8008e08 <pvPortMalloc>
 8007554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800755c:	20bc      	movs	r0, #188	; 0xbc
 800755e:	f001 fc53 	bl	8008e08 <pvPortMalloc>
 8007562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
 8007570:	e005      	b.n	800757e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	f001 fd14 	bl	8008fa0 <vPortFree>
 8007578:	e001      	b.n	800757e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	2300      	movs	r3, #0
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f80e 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a8:	69f8      	ldr	r0, [r7, #28]
 80075aa:	f000 f8b1 	bl	8007710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e002      	b.n	80075ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
 80075b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075ba:	69bb      	ldr	r3, [r7, #24]
	}
 80075bc:	4618      	mov	r0, r3
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	461a      	mov	r2, r3
 80075dc:	21a5      	movs	r1, #165	; 0xa5
 80075de:	f001 ff13 	bl	8009408 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075ec:	3b01      	subs	r3, #1
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	617b      	str	r3, [r7, #20]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01f      	beq.n	8007662 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e012      	b.n	800764e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	3334      	adds	r3, #52	; 0x34
 8007638:	460a      	mov	r2, r1
 800763a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d9e9      	bls.n	8007628 <prvInitialiseNewTask+0x64>
 8007654:	e000      	b.n	8007658 <prvInitialiseNewTask+0x94>
			{
				break;
 8007656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007660:	e003      	b.n	800766a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	2b37      	cmp	r3, #55	; 0x37
 800766e:	d901      	bls.n	8007674 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007670:	2337      	movs	r3, #55	; 0x37
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2200      	movs	r2, #0
 8007684:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff f978 	bl	8006980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	3318      	adds	r3, #24
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff f973 	bl	8006980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	3354      	adds	r3, #84	; 0x54
 80076c4:	2260      	movs	r2, #96	; 0x60
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fe9d 	bl	8009408 <memset>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <prvInitialiseNewTask+0x140>)
 80076d2:	659a      	str	r2, [r3, #88]	; 0x58
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <prvInitialiseNewTask+0x144>)
 80076d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	4a0b      	ldr	r2, [pc, #44]	; (800770c <prvInitialiseNewTask+0x148>)
 80076de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	69b8      	ldr	r0, [r7, #24]
 80076e6:	f001 f941 	bl	800896c <pxPortInitialiseStack>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076fc:	bf00      	nop
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	0800c10c 	.word	0x0800c10c
 8007708:	0800c12c 	.word	0x0800c12c
 800770c:	0800c0ec 	.word	0x0800c0ec

08007710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007718:	f001 fa54 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007726:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d110      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800773c:	f000 fc26 	bl	8007f8c <prvInitialiseTaskLists>
 8007740:	e00d      	b.n	800775e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d802      	bhi.n	800775e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007758:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d903      	bls.n	8007784 <prvAddNewTaskToReadyList+0x74>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <prvAddNewTaskToReadyList+0xd8>)
 8007792:	441a      	add	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7ff f8fd 	bl	800699a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077a0:	f001 fa40 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077a4:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d207      	bcs.n	80077ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077ba:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <prvAddNewTaskToReadyList+0xdc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000d10 	.word	0x20000d10
 80077d8:	2000083c 	.word	0x2000083c
 80077dc:	20000d1c 	.word	0x20000d1c
 80077e0:	20000d2c 	.word	0x20000d2c
 80077e4:	20000d18 	.word	0x20000d18
 80077e8:	20000840 	.word	0x20000840
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <vTaskDelay+0x60>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <vTaskDelay+0x30>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007820:	f000 f88a 	bl	8007938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fcfe 	bl	8008228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800782c:	f000 f892 	bl	8007954 <xTaskResumeAll>
 8007830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <vTaskDelay+0x64>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000d38 	.word	0x20000d38
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007866:	463a      	mov	r2, r7
 8007868:	1d39      	adds	r1, r7, #4
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff f832 	bl	80068d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	2300      	movs	r3, #0
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	460a      	mov	r2, r1
 8007886:	4924      	ldr	r1, [pc, #144]	; (8007918 <vTaskStartScheduler+0xc0>)
 8007888:	4824      	ldr	r0, [pc, #144]	; (800791c <vTaskStartScheduler+0xc4>)
 800788a:	f7ff fdf9 	bl	8007480 <xTaskCreateStatic>
 800788e:	4603      	mov	r3, r0
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e001      	b.n	80078a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078ac:	f000 fd10 	bl	80082d0 <xTimerCreateTimerTask>
 80078b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11b      	bne.n	80078f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	613b      	str	r3, [r7, #16]
}
 80078ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <vTaskStartScheduler+0xcc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3354      	adds	r3, #84	; 0x54
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <vTaskStartScheduler+0xd0>)
 80078d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <vTaskStartScheduler+0xd4>)
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <vTaskStartScheduler+0xd8>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <vTaskStartScheduler+0xdc>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ea:	f001 f8c9 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ee:	e00e      	b.n	800790e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d10a      	bne.n	800790e <vTaskStartScheduler+0xb6>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vTaskStartScheduler+0xb4>
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	0800c060 	.word	0x0800c060
 800791c:	08007f5d 	.word	0x08007f5d
 8007920:	20000d34 	.word	0x20000d34
 8007924:	2000083c 	.word	0x2000083c
 8007928:	20000034 	.word	0x20000034
 800792c:	20000d30 	.word	0x20000d30
 8007930:	20000d1c 	.word	0x20000d1c
 8007934:	20000d14 	.word	0x20000d14

08007938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vTaskSuspendAll+0x18>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <vTaskSuspendAll+0x18>)
 8007944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000d38 	.word	0x20000d38

08007954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007962:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <xTaskResumeAll+0x2c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007980:	f001 f920 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007984:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xTaskResumeAll+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a38      	ldr	r2, [pc, #224]	; (8007a6c <xTaskResumeAll+0x118>)
 800798c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b37      	ldr	r3, [pc, #220]	; (8007a6c <xTaskResumeAll+0x118>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d162      	bne.n	8007a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007996:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <xTaskResumeAll+0x11c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d05e      	beq.n	8007a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799e:	e02f      	b.n	8007a00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b34      	ldr	r3, [pc, #208]	; (8007a74 <xTaskResumeAll+0x120>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3318      	adds	r3, #24
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff f851 	bl	8006a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f84c 	bl	8006a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c0:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <xTaskResumeAll+0x124>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d903      	bls.n	80079d0 <xTaskResumeAll+0x7c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <xTaskResumeAll+0x124>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a27      	ldr	r2, [pc, #156]	; (8007a7c <xTaskResumeAll+0x128>)
 80079de:	441a      	add	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe ffd7 	bl	800699a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <xTaskResumeAll+0x12c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079fa:	4b22      	ldr	r3, [pc, #136]	; (8007a84 <xTaskResumeAll+0x130>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xTaskResumeAll+0x120>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1cb      	bne.n	80079a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a0e:	f000 fb5f 	bl	80080d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d010      	beq.n	8007a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a1e:	f000 f847 	bl	8007ab0 <xTaskIncrementTick>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f1      	bne.n	8007a1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a40:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskResumeAll+0x138>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5c:	f001 f8e2 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007a60:	68bb      	ldr	r3, [r7, #8]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000d38 	.word	0x20000d38
 8007a70:	20000d10 	.word	0x20000d10
 8007a74:	20000cd0 	.word	0x20000cd0
 8007a78:	20000d18 	.word	0x20000d18
 8007a7c:	20000840 	.word	0x20000840
 8007a80:	2000083c 	.word	0x2000083c
 8007a84:	20000d24 	.word	0x20000d24
 8007a88:	20000d20 	.word	0x20000d20
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <xTaskGetTickCount+0x1c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000d14 	.word	0x20000d14

08007ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <xTaskIncrementTick+0x148>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f040 808f 	bne.w	8007be2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <xTaskIncrementTick+0x14c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007acc:	4a4b      	ldr	r2, [pc, #300]	; (8007bfc <xTaskIncrementTick+0x14c>)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d120      	bne.n	8007b1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ad8:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xTaskIncrementTick+0x46>
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	4b41      	ldr	r3, [pc, #260]	; (8007c04 <xTaskIncrementTick+0x154>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a3f      	ldr	r2, [pc, #252]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	4a3f      	ldr	r2, [pc, #252]	; (8007c04 <xTaskIncrementTick+0x154>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	4b3e      	ldr	r3, [pc, #248]	; (8007c08 <xTaskIncrementTick+0x158>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	4a3d      	ldr	r2, [pc, #244]	; (8007c08 <xTaskIncrementTick+0x158>)
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	f000 fadb 	bl	80080d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d349      	bcc.n	8007bb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b24:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2e:	4b37      	ldr	r3, [pc, #220]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b30:	f04f 32ff 	mov.w	r2, #4294967295
 8007b34:	601a      	str	r2, [r3, #0]
					break;
 8007b36:	e03f      	b.n	8007bb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b38:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d203      	bcs.n	8007b58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b50:	4a2e      	ldr	r2, [pc, #184]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b56:	e02f      	b.n	8007bb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe ff79 	bl	8006a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3318      	adds	r3, #24
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe ff70 	bl	8006a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <xTaskIncrementTick+0x160>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d903      	bls.n	8007b88 <xTaskIncrementTick+0xd8>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a22      	ldr	r2, [pc, #136]	; (8007c10 <xTaskIncrementTick+0x160>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <xTaskIncrementTick+0x164>)
 8007b96:	441a      	add	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fefb 	bl	800699a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <xTaskIncrementTick+0x168>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3b8      	bcc.n	8007b24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb6:	e7b5      	b.n	8007b24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bb8:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <xTaskIncrementTick+0x168>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4915      	ldr	r1, [pc, #84]	; (8007c14 <xTaskIncrementTick+0x164>)
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d901      	bls.n	8007bd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <xTaskIncrementTick+0x16c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	e004      	b.n	8007bec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <xTaskIncrementTick+0x170>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <xTaskIncrementTick+0x170>)
 8007bea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bec:	697b      	ldr	r3, [r7, #20]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000d38 	.word	0x20000d38
 8007bfc:	20000d14 	.word	0x20000d14
 8007c00:	20000cc8 	.word	0x20000cc8
 8007c04:	20000ccc 	.word	0x20000ccc
 8007c08:	20000d28 	.word	0x20000d28
 8007c0c:	20000d30 	.word	0x20000d30
 8007c10:	20000d18 	.word	0x20000d18
 8007c14:	20000840 	.word	0x20000840
 8007c18:	2000083c 	.word	0x2000083c
 8007c1c:	20000d24 	.word	0x20000d24
 8007c20:	20000d20 	.word	0x20000d20

08007c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <vTaskSwitchContext+0xb0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c38:	e046      	b.n	8007cc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c3a:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	4b26      	ldr	r3, [pc, #152]	; (8007cdc <vTaskSwitchContext+0xb8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e010      	b.n	8007c6a <vTaskSwitchContext+0x46>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vTaskSwitchContext+0x3e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	491d      	ldr	r1, [pc, #116]	; (8007ce0 <vTaskSwitchContext+0xbc>)
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0e4      	beq.n	8007c48 <vTaskSwitchContext+0x24>
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <vTaskSwitchContext+0xbc>)
 8007c8a:	4413      	add	r3, r2
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d104      	bne.n	8007cae <vTaskSwitchContext+0x8a>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4a0b      	ldr	r2, [pc, #44]	; (8007ce4 <vTaskSwitchContext+0xc0>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <vTaskSwitchContext+0xb8>)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <vTaskSwitchContext+0xc0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3354      	adds	r3, #84	; 0x54
 8007cc4:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <vTaskSwitchContext+0xc4>)
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	20000d38 	.word	0x20000d38
 8007cd8:	20000d24 	.word	0x20000d24
 8007cdc:	20000d18 	.word	0x20000d18
 8007ce0:	20000840 	.word	0x20000840
 8007ce4:	2000083c 	.word	0x2000083c
 8007ce8:	20000034 	.word	0x20000034

08007cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <vTaskPlaceOnEventList+0x44>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe fe61 	bl	80069e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d20:	2101      	movs	r1, #1
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f000 fa80 	bl	8008228 <prvAddCurrentTaskToDelayedList>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	2000083c 	.word	0x2000083c

08007d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4619      	mov	r1, r3
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7fe fe18 	bl	800699a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295
 8007d74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f000 fa55 	bl	8008228 <prvAddCurrentTaskToDelayedList>
	}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	2000083c 	.word	0x2000083c

08007d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60fb      	str	r3, [r7, #12]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3318      	adds	r3, #24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fe49 	bl	8006a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dc2:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <xTaskRemoveFromEventList+0xb0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11d      	bne.n	8007e06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fe40 	bl	8006a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4b19      	ldr	r3, [pc, #100]	; (8007e40 <xTaskRemoveFromEventList+0xb4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d903      	bls.n	8007de8 <xTaskRemoveFromEventList+0x5c>
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <xTaskRemoveFromEventList+0xb4>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <xTaskRemoveFromEventList+0xb8>)
 8007df6:	441a      	add	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fe fdcb 	bl	800699a <vListInsertEnd>
 8007e04:	e005      	b.n	8007e12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3318      	adds	r3, #24
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	480e      	ldr	r0, [pc, #56]	; (8007e48 <xTaskRemoveFromEventList+0xbc>)
 8007e0e:	f7fe fdc4 	bl	800699a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <xTaskRemoveFromEventList+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d905      	bls.n	8007e2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <xTaskRemoveFromEventList+0xc4>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e001      	b.n	8007e30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e30:	697b      	ldr	r3, [r7, #20]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000d38 	.word	0x20000d38
 8007e40:	20000d18 	.word	0x20000d18
 8007e44:	20000840 	.word	0x20000840
 8007e48:	20000cd0 	.word	0x20000cd0
 8007e4c:	2000083c 	.word	0x2000083c
 8007e50:	20000d24 	.word	0x20000d24

08007e54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <vTaskInternalSetTimeOutState+0x24>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <vTaskInternalSetTimeOutState+0x28>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000d28 	.word	0x20000d28
 8007e7c:	20000d14 	.word	0x20000d14

08007e80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ec2:	f000 fe7f 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ec6:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <xTaskCheckForTimeOut+0xbc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d102      	bne.n	8007ee6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e023      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <xTaskCheckForTimeOut+0xc0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d007      	beq.n	8007f02 <xTaskCheckForTimeOut+0x82>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d302      	bcc.n	8007f02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e015      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d20b      	bcs.n	8007f24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff9b 	bl	8007e54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	e004      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f2e:	f000 fe79 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8007f32:	69fb      	ldr	r3, [r7, #28]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000d14 	.word	0x20000d14
 8007f40:	20000d28 	.word	0x20000d28

08007f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f48:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <vTaskMissedYield+0x14>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
}
 8007f4e:	bf00      	nop
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000d24 	.word	0x20000d24

08007f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f64:	f000 f852 	bl	800800c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <prvIdleTask+0x28>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d9f9      	bls.n	8007f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <prvIdleTask+0x2c>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f80:	e7f0      	b.n	8007f64 <prvIdleTask+0x8>
 8007f82:	bf00      	nop
 8007f84:	20000840 	.word	0x20000840
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	e00c      	b.n	8007fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <prvInitialiseTaskLists+0x60>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fcca 	bl	8006940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b37      	cmp	r3, #55	; 0x37
 8007fb6:	d9ef      	bls.n	8007f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb8:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <prvInitialiseTaskLists+0x64>)
 8007fba:	f7fe fcc1 	bl	8006940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fbe:	480d      	ldr	r0, [pc, #52]	; (8007ff4 <prvInitialiseTaskLists+0x68>)
 8007fc0:	f7fe fcbe 	bl	8006940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fc4:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <prvInitialiseTaskLists+0x6c>)
 8007fc6:	f7fe fcbb 	bl	8006940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fca:	480c      	ldr	r0, [pc, #48]	; (8007ffc <prvInitialiseTaskLists+0x70>)
 8007fcc:	f7fe fcb8 	bl	8006940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fd0:	480b      	ldr	r0, [pc, #44]	; (8008000 <prvInitialiseTaskLists+0x74>)
 8007fd2:	f7fe fcb5 	bl	8006940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvInitialiseTaskLists+0x78>)
 8007fd8:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <prvInitialiseTaskLists+0x64>)
 8007fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <prvInitialiseTaskLists+0x7c>)
 8007fde:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <prvInitialiseTaskLists+0x68>)
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000840 	.word	0x20000840
 8007ff0:	20000ca0 	.word	0x20000ca0
 8007ff4:	20000cb4 	.word	0x20000cb4
 8007ff8:	20000cd0 	.word	0x20000cd0
 8007ffc:	20000ce4 	.word	0x20000ce4
 8008000:	20000cfc 	.word	0x20000cfc
 8008004:	20000cc8 	.word	0x20000cc8
 8008008:	20000ccc 	.word	0x20000ccc

0800800c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008012:	e019      	b.n	8008048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008014:	f000 fdd6 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008018:	4b10      	ldr	r3, [pc, #64]	; (800805c <prvCheckTasksWaitingTermination+0x50>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fd15 	bl	8006a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <prvCheckTasksWaitingTermination+0x54>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3b01      	subs	r3, #1
 8008030:	4a0b      	ldr	r2, [pc, #44]	; (8008060 <prvCheckTasksWaitingTermination+0x54>)
 8008032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008034:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3b01      	subs	r3, #1
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 800803c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800803e:	f000 fdf1 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f810 	bl	8008068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e1      	bne.n	8008014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008050:	bf00      	nop
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000ce4 	.word	0x20000ce4
 8008060:	20000d10 	.word	0x20000d10
 8008064:	20000cf8 	.word	0x20000cf8

08008068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3354      	adds	r3, #84	; 0x54
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fa37 	bl	80094e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	4618      	mov	r0, r3
 800808a:	f000 ff89 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 ff86 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008094:	e018      	b.n	80080c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800809c:	2b01      	cmp	r3, #1
 800809e:	d103      	bne.n	80080a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 ff7d 	bl	8008fa0 <vPortFree>
	}
 80080a6:	e00f      	b.n	80080c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d00a      	beq.n	80080c8 <prvDeleteTCB+0x60>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <prvDeleteTCB+0x5e>
	}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295
 80080e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080e8:	e008      	b.n	80080fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080fa:	6013      	str	r3, [r2, #0]
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000cc8 	.word	0x20000cc8
 800810c:	20000d30 	.word	0x20000d30

08008110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <xTaskGetSchedulerState+0x34>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800811e:	2301      	movs	r3, #1
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e008      	b.n	8008136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <xTaskGetSchedulerState+0x38>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800812c:	2302      	movs	r3, #2
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e001      	b.n	8008136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008136:	687b      	ldr	r3, [r7, #4]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20000d1c 	.word	0x20000d1c
 8008148:	20000d38 	.word	0x20000d38

0800814c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d056      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008162:	4b2e      	ldr	r3, [pc, #184]	; (800821c <xTaskPriorityDisinherit+0xd0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d02c      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d128      	bne.n	8008210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc46 	bl	8006a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <xTaskPriorityDisinherit+0xa4>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a09      	ldr	r2, [pc, #36]	; (8008224 <xTaskPriorityDisinherit+0xd8>)
 80081fe:	441a      	add	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fbc7 	bl	800699a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008210:	697b      	ldr	r3, [r7, #20]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	2000083c 	.word	0x2000083c
 8008220:	20000d18 	.word	0x20000d18
 8008224:	20000840 	.word	0x20000840

08008228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008232:	4b21      	ldr	r3, [pc, #132]	; (80082b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fc08 	bl	8006a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d10a      	bne.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008252:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4819      	ldr	r0, [pc, #100]	; (80082c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800825c:	f7fe fb9d 	bl	800699a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008260:	e026      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800826a:	4b14      	ldr	r3, [pc, #80]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d209      	bcs.n	800828e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fe fbab 	bl	80069e2 <vListInsert>
}
 800828c:	e010      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe fba1 	bl	80069e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d202      	bcs.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000d14 	.word	0x20000d14
 80082bc:	2000083c 	.word	0x2000083c
 80082c0:	20000cfc 	.word	0x20000cfc
 80082c4:	20000ccc 	.word	0x20000ccc
 80082c8:	20000cc8 	.word	0x20000cc8
 80082cc:	20000d30 	.word	0x20000d30

080082d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082da:	f000 fb07 	bl	80088ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082de:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <xTimerCreateTimerTask+0x80>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d021      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ee:	1d3a      	adds	r2, r7, #4
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fb07 	bl	800690c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2302      	movs	r3, #2
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	460a      	mov	r2, r1
 8008310:	4910      	ldr	r1, [pc, #64]	; (8008354 <xTimerCreateTimerTask+0x84>)
 8008312:	4811      	ldr	r0, [pc, #68]	; (8008358 <xTimerCreateTimerTask+0x88>)
 8008314:	f7ff f8b4 	bl	8007480 <xTaskCreateStatic>
 8008318:	4603      	mov	r3, r0
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <xTimerCreateTimerTask+0x8c>)
 800831c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <xTimerCreateTimerTask+0x8c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008326:	2301      	movs	r3, #1
 8008328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008346:	697b      	ldr	r3, [r7, #20]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000d6c 	.word	0x20000d6c
 8008354:	0800c068 	.word	0x0800c068
 8008358:	08008495 	.word	0x08008495
 800835c:	20000d70 	.word	0x20000d70

08008360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800836e:	2300      	movs	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	623b      	str	r3, [r7, #32]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800838e:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <xTimerGenericCommand+0x98>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02a      	beq.n	80083ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	dc18      	bgt.n	80083da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083a8:	f7ff feb2 	bl	8008110 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d109      	bne.n	80083c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f107 0110 	add.w	r1, r7, #16
 80083ba:	2300      	movs	r3, #0
 80083bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083be:	f7fe fc77 	bl	8006cb0 <xQueueGenericSend>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
 80083c4:	e012      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f107 0110 	add.w	r1, r7, #16
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7fe fc6d 	bl	8006cb0 <xQueueGenericSend>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
 80083d8:	e008      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f107 0110 	add.w	r1, r7, #16
 80083e2:	2300      	movs	r3, #0
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	f7fe fd61 	bl	8006eac <xQueueGenericSendFromISR>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000d6c 	.word	0x20000d6c

080083fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008406:	4b22      	ldr	r3, [pc, #136]	; (8008490 <prvProcessExpiredTimer+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fb1d 	bl	8006a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d022      	beq.n	800846e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	699a      	ldr	r2, [r3, #24]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	18d1      	adds	r1, r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	6978      	ldr	r0, [r7, #20]
 8008436:	f000 f8d1 	bl	80085dc <prvInsertTimerInActiveList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01f      	beq.n	8008480 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	2100      	movs	r1, #0
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	f7ff ff88 	bl	8008360 <xTimerGenericCommand>
 8008450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	60fb      	str	r3, [r7, #12]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	4798      	blx	r3
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000d64 	.word	0x20000d64

08008494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f857 	bl	8008554 <prvGetNextExpireTime>
 80084a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f803 	bl	80084b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084b2:	f000 f8d5 	bl	8008660 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b6:	e7f1      	b.n	800849c <prvTimerTask+0x8>

080084b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084c2:	f7ff fa39 	bl	8007938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f866 	bl	800859c <prvSampleTimeNow>
 80084d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d130      	bne.n	800853a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d806      	bhi.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084e6:	f7ff fa35 	bl	8007954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff ff85 	bl	80083fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084f2:	e024      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <prvProcessTimerOrBlockTask+0x90>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <prvProcessTimerOrBlockTask+0x50>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <prvProcessTimerOrBlockTask+0x52>
 8008508:	2300      	movs	r3, #0
 800850a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <prvProcessTimerOrBlockTask+0x94>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4619      	mov	r1, r3
 800851a:	f7fe ff7d 	bl	8007418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800851e:	f7ff fa19 	bl	8007954 <xTaskResumeAll>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10a      	bne.n	800853e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <prvProcessTimerOrBlockTask+0x98>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
}
 8008538:	e001      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800853a:	f7ff fa0b 	bl	8007954 <xTaskResumeAll>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000d68 	.word	0x20000d68
 800854c:	20000d6c 	.word	0x20000d6c
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <prvGetNextExpireTime+0x44>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <prvGetNextExpireTime+0x16>
 8008566:	2201      	movs	r2, #1
 8008568:	e000      	b.n	800856c <prvGetNextExpireTime+0x18>
 800856a:	2200      	movs	r2, #0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <prvGetNextExpireTime+0x44>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e001      	b.n	8008588 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008588:	68fb      	ldr	r3, [r7, #12]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000d64 	.word	0x20000d64

0800859c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085a4:	f7ff fa74 	bl	8007a90 <xTaskGetTickCount>
 80085a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d205      	bcs.n	80085c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085b4:	f000 f936 	bl	8008824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e002      	b.n	80085c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000d74 	.word	0x20000d74

080085dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d812      	bhi.n	8008628 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e01b      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008616:	4b10      	ldr	r3, [pc, #64]	; (8008658 <prvInsertTimerInActiveList+0x7c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f7fe f9de 	bl	80069e2 <vListInsert>
 8008626:	e012      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d206      	bcs.n	800863e <prvInsertTimerInActiveList+0x62>
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e007      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <prvInsertTimerInActiveList+0x80>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe f9ca 	bl	80069e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800864e:	697b      	ldr	r3, [r7, #20]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000d68 	.word	0x20000d68
 800865c:	20000d64 	.word	0x20000d64

08008660 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	; 0x38
 8008664:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008666:	e0ca      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	da18      	bge.n	80086a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	3304      	adds	r3, #4
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61fb      	str	r3, [r7, #28]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	6850      	ldr	r0, [r2, #4]
 8008698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800869a:	6892      	ldr	r2, [r2, #8]
 800869c:	4611      	mov	r1, r2
 800869e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f2c0 80aa 	blt.w	80087fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	3304      	adds	r3, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f9cb 	bl	8006a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086be:	463b      	mov	r3, r7
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff ff6b 	bl	800859c <prvSampleTimeNow>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	f200 8097 	bhi.w	80087fe <prvProcessReceivedCommands+0x19e>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <prvProcessReceivedCommands+0x78>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	08008701 	.word	0x08008701
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008701 	.word	0x08008701
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008789 	.word	0x08008789
 80086ec:	080087d3 	.word	0x080087d3
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008701 	.word	0x08008701
 80086f8:	08008775 	.word	0x08008775
 80086fc:	08008789 	.word	0x08008789
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	18d1      	adds	r1, r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008720:	f7ff ff5c 	bl	80085dc <prvInsertTimerInActiveList>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d069      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05e      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	441a      	add	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	2300      	movs	r3, #0
 800874e:	2100      	movs	r1, #0
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f7ff fe05 	bl	8008360 <xTimerGenericCommand>
 8008756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d14f      	bne.n	80087fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	61bb      	str	r3, [r7, #24]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	b2da      	uxtb	r2, r3
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008786:	e03a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	617b      	str	r3, [r7, #20]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	18d1      	adds	r1, r2, r3
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087cc:	f7ff ff06 	bl	80085dc <prvInsertTimerInActiveList>
					break;
 80087d0:	e015      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e2:	f000 fbdd 	bl	8008fa0 <vPortFree>
 80087e6:	e00a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087fa:	e000      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <prvProcessReceivedCommands+0x1c0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1d39      	adds	r1, r7, #4
 8008804:	2200      	movs	r2, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fbec 	bl	8006fe4 <xQueueReceive>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	f47f af2a 	bne.w	8008668 <prvProcessReceivedCommands+0x8>
	}
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	3730      	adds	r7, #48	; 0x30
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000d6c 	.word	0x20000d6c

08008824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800882a:	e048      	b.n	80088be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800882c:	4b2d      	ldr	r3, [pc, #180]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008836:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe f905 	bl	8006a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02e      	beq.n	80088be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	429a      	cmp	r2, r3
 8008870:	d90e      	bls.n	8008890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887e:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe f8aa 	bl	80069e2 <vListInsert>
 800888e:	e016      	b.n	80088be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008890:	2300      	movs	r3, #0
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fd60 	bl	8008360 <xTimerGenericCommand>
 80088a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	603b      	str	r3, [r7, #0]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1b1      	bne.n	800882c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ce:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088d6:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6013      	str	r3, [r2, #0]
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000d64 	.word	0x20000d64
 80088e8:	20000d68 	.word	0x20000d68

080088ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088f2:	f000 f967 	bl	8008bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d120      	bne.n	8008940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088fe:	4814      	ldr	r0, [pc, #80]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 8008900:	f7fe f81e 	bl	8006940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008904:	4813      	ldr	r0, [pc, #76]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008906:	f7fe f81b 	bl	8006940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800890a:	4b13      	ldr	r3, [pc, #76]	; (8008958 <prvCheckForValidListAndQueue+0x6c>)
 800890c:	4a10      	ldr	r2, [pc, #64]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 800890e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008910:	4b12      	ldr	r3, [pc, #72]	; (800895c <prvCheckForValidListAndQueue+0x70>)
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008916:	2300      	movs	r3, #0
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <prvCheckForValidListAndQueue+0x74>)
 800891c:	4a11      	ldr	r2, [pc, #68]	; (8008964 <prvCheckForValidListAndQueue+0x78>)
 800891e:	2110      	movs	r1, #16
 8008920:	200a      	movs	r0, #10
 8008922:	f7fe f929 	bl	8006b78 <xQueueGenericCreateStatic>
 8008926:	4603      	mov	r3, r0
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	490b      	ldr	r1, [pc, #44]	; (8008968 <prvCheckForValidListAndQueue+0x7c>)
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fd42 	bl	80073c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008940:	f000 f970 	bl	8008c24 <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000d6c 	.word	0x20000d6c
 8008950:	20000d3c 	.word	0x20000d3c
 8008954:	20000d50 	.word	0x20000d50
 8008958:	20000d64 	.word	0x20000d64
 800895c:	20000d68 	.word	0x20000d68
 8008960:	20000e18 	.word	0x20000e18
 8008964:	20000d78 	.word	0x20000d78
 8008968:	0800c070 	.word	0x0800c070

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <pxPortInitialiseStack+0x64>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b04      	subs	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f06f 0202 	mvn.w	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3b20      	subs	r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvTaskExitError+0x54>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d00a      	beq.n	80089fe <prvTaskExitError+0x2a>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvTaskExitError+0x28>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
}
 8008a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a12:	bf00      	nop
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0fc      	beq.n	8008a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000030 	.word	0x20000030
 8008a2c:	00000000 	.word	0x00000000

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7ff f84a 	bl	8007c24 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff20 	bl	80089d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	20000e68 	.word	0x20000e68
 8008bb4:	20000e6c 	.word	0x20000e6c
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	20000030 	.word	0x20000030
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000030 	.word	0x20000030
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000030 	.word	0x20000030
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe ffb8 	bl	8007c24 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fed5 	bl	8007ab0 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	20000024 	.word	0x20000024
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	20000e68 	.word	0x20000e68
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	20000e6c 	.word	0x20000e6c

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7fe fd90 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe fcfc 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20004a78 	.word	0x20004a78
 8008f8c:	20004a8c 	.word	0x20004a8c
 8008f90:	20004a7c 	.word	0x20004a7c
 8008f94:	20004a70 	.word	0x20004a70
 8008f98:	20004a80 	.word	0x20004a80
 8008f9c:	20004a84 	.word	0x20004a84

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe fc86 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe fc83 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20004a8c 	.word	0x20004a8c
 800905c:	20004a7c 	.word	0x20004a7c
 8009060:	20004a88 	.word	0x20004a88

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000e70 	.word	0x20000e70
 8009114:	20004a70 	.word	0x20004a70
 8009118:	20004a78 	.word	0x20004a78
 800911c:	20004a80 	.word	0x20004a80
 8009120:	20004a7c 	.word	0x20004a7c
 8009124:	20004a8c 	.word	0x20004a8c

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20004a70 	.word	0x20004a70
 80091d8:	20004a78 	.word	0x20004a78

080091dc <arm_biquad_cascade_df1_init_f32>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	6082      	str	r2, [r0, #8]
 80091e2:	6001      	str	r1, [r0, #0]
 80091e4:	461d      	mov	r5, r3
 80091e6:	010a      	lsls	r2, r1, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	2100      	movs	r1, #0
 80091ec:	f000 f90c 	bl	8009408 <memset>
 80091f0:	6065      	str	r5, [r4, #4]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}

080091f4 <arm_biquad_cascade_df1_f32>:
 80091f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091f8:	ed2d 8b02 	vpush	{d8}
 80091fc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009200:	6886      	ldr	r6, [r0, #8]
 8009202:	6845      	ldr	r5, [r0, #4]
 8009204:	6807      	ldr	r7, [r0, #0]
 8009206:	4696      	mov	lr, r2
 8009208:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800920c:	f003 0203 	and.w	r2, r3, #3
 8009210:	eb0e 0908 	add.w	r9, lr, r8
 8009214:	3614      	adds	r6, #20
 8009216:	3510      	adds	r5, #16
 8009218:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800921c:	ed56 1a04 	vldr	s3, [r6, #-16]
 8009220:	ed16 1a03 	vldr	s2, [r6, #-12]
 8009224:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009228:	ed16 0a01 	vldr	s0, [r6, #-4]
 800922c:	ed15 8a04 	vldr	s16, [r5, #-16]
 8009230:	ed55 8a03 	vldr	s17, [r5, #-12]
 8009234:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009238:	ed55 7a01 	vldr	s15, [r5, #-4]
 800923c:	f1bc 0f00 	cmp.w	ip, #0
 8009240:	f000 80a5 	beq.w	800938e <arm_biquad_cascade_df1_f32+0x19a>
 8009244:	f101 0010 	add.w	r0, r1, #16
 8009248:	f10e 0310 	add.w	r3, lr, #16
 800924c:	4664      	mov	r4, ip
 800924e:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009252:	ee21 6a88 	vmul.f32	s12, s3, s16
 8009256:	ee22 5a23 	vmul.f32	s10, s4, s7
 800925a:	ee61 8a28 	vmul.f32	s17, s2, s17
 800925e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8009262:	ee60 6a87 	vmul.f32	s13, s1, s14
 8009266:	ee36 6a28 	vadd.f32	s12, s12, s17
 800926a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800926e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009272:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8009276:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800927a:	ee21 8a08 	vmul.f32	s16, s2, s16
 800927e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009282:	ed50 2a03 	vldr	s5, [r0, #-12]
 8009286:	ee22 6a22 	vmul.f32	s12, s4, s5
 800928a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800928e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8009292:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009296:	ee76 6a08 	vadd.f32	s13, s12, s16
 800929a:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800929e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80092a2:	ee21 8a23 	vmul.f32	s16, s2, s7
 80092a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80092aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80092ae:	ed03 7a03 	vstr	s14, [r3, #-12]
 80092b2:	ed50 8a02 	vldr	s17, [r0, #-8]
 80092b6:	ee62 3a28 	vmul.f32	s7, s4, s17
 80092ba:	ee20 6a87 	vmul.f32	s12, s1, s14
 80092be:	ee33 3a83 	vadd.f32	s6, s7, s6
 80092c2:	ee21 4aa8 	vmul.f32	s8, s3, s17
 80092c6:	ee73 6a08 	vadd.f32	s13, s6, s16
 80092ca:	ee61 2a22 	vmul.f32	s5, s2, s5
 80092ce:	ee76 6a86 	vadd.f32	s13, s13, s12
 80092d2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80092d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092da:	3c01      	subs	r4, #1
 80092dc:	ed43 7a02 	vstr	s15, [r3, #-8]
 80092e0:	ed10 8a01 	vldr	s16, [r0, #-4]
 80092e4:	ee62 3a08 	vmul.f32	s7, s4, s16
 80092e8:	ee60 6aa7 	vmul.f32	s13, s1, s15
 80092ec:	ee73 3a84 	vadd.f32	s7, s7, s8
 80092f0:	f100 0010 	add.w	r0, r0, #16
 80092f4:	ee33 4aa2 	vadd.f32	s8, s7, s5
 80092f8:	f103 0310 	add.w	r3, r3, #16
 80092fc:	ee34 4a26 	vadd.f32	s8, s8, s13
 8009300:	ee34 7a07 	vadd.f32	s14, s8, s14
 8009304:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009308:	d1a1      	bne.n	800924e <arm_biquad_cascade_df1_f32+0x5a>
 800930a:	4441      	add	r1, r8
 800930c:	4648      	mov	r0, r9
 800930e:	b3aa      	cbz	r2, 800937c <arm_biquad_cascade_df1_f32+0x188>
 8009310:	4613      	mov	r3, r2
 8009312:	e003      	b.n	800931c <arm_biquad_cascade_df1_f32+0x128>
 8009314:	eeb0 7a45 	vmov.f32	s14, s10
 8009318:	eeb0 8a43 	vmov.f32	s16, s6
 800931c:	ecb1 3a01 	vldmia	r1!, {s6}
 8009320:	ee21 6a88 	vmul.f32	s12, s3, s16
 8009324:	ee62 3a03 	vmul.f32	s7, s4, s6
 8009328:	ee61 8a28 	vmul.f32	s17, s2, s17
 800932c:	ee33 4a86 	vadd.f32	s8, s7, s12
 8009330:	ee60 4a87 	vmul.f32	s9, s1, s14
 8009334:	ee34 6a28 	vadd.f32	s12, s8, s17
 8009338:	ee60 7a27 	vmul.f32	s15, s0, s15
 800933c:	ee76 4a24 	vadd.f32	s9, s12, s9
 8009340:	3b01      	subs	r3, #1
 8009342:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009346:	eef0 8a48 	vmov.f32	s17, s16
 800934a:	eef0 7a47 	vmov.f32	s15, s14
 800934e:	eca0 5a01 	vstmia	r0!, {s10}
 8009352:	d1df      	bne.n	8009314 <arm_biquad_cascade_df1_f32+0x120>
 8009354:	3f01      	subs	r7, #1
 8009356:	ed05 3a04 	vstr	s6, [r5, #-16]
 800935a:	ed05 8a03 	vstr	s16, [r5, #-12]
 800935e:	ed05 5a02 	vstr	s10, [r5, #-8]
 8009362:	ed05 7a01 	vstr	s14, [r5, #-4]
 8009366:	f106 0614 	add.w	r6, r6, #20
 800936a:	f105 0510 	add.w	r5, r5, #16
 800936e:	4671      	mov	r1, lr
 8009370:	f47f af52 	bne.w	8009218 <arm_biquad_cascade_df1_f32+0x24>
 8009374:	ecbd 8b02 	vpop	{d8}
 8009378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937c:	eeb0 5a47 	vmov.f32	s10, s14
 8009380:	eeb0 3a48 	vmov.f32	s6, s16
 8009384:	eeb0 7a67 	vmov.f32	s14, s15
 8009388:	eeb0 8a68 	vmov.f32	s16, s17
 800938c:	e7e2      	b.n	8009354 <arm_biquad_cascade_df1_f32+0x160>
 800938e:	4670      	mov	r0, lr
 8009390:	e7bd      	b.n	800930e <arm_biquad_cascade_df1_f32+0x11a>
 8009392:	bf00      	nop

08009394 <__errno>:
 8009394:	4b01      	ldr	r3, [pc, #4]	; (800939c <__errno+0x8>)
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000034 	.word	0x20000034

080093a0 <__libc_init_array>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	4d0d      	ldr	r5, [pc, #52]	; (80093d8 <__libc_init_array+0x38>)
 80093a4:	4c0d      	ldr	r4, [pc, #52]	; (80093dc <__libc_init_array+0x3c>)
 80093a6:	1b64      	subs	r4, r4, r5
 80093a8:	10a4      	asrs	r4, r4, #2
 80093aa:	2600      	movs	r6, #0
 80093ac:	42a6      	cmp	r6, r4
 80093ae:	d109      	bne.n	80093c4 <__libc_init_array+0x24>
 80093b0:	4d0b      	ldr	r5, [pc, #44]	; (80093e0 <__libc_init_array+0x40>)
 80093b2:	4c0c      	ldr	r4, [pc, #48]	; (80093e4 <__libc_init_array+0x44>)
 80093b4:	f002 fe36 	bl	800c024 <_init>
 80093b8:	1b64      	subs	r4, r4, r5
 80093ba:	10a4      	asrs	r4, r4, #2
 80093bc:	2600      	movs	r6, #0
 80093be:	42a6      	cmp	r6, r4
 80093c0:	d105      	bne.n	80093ce <__libc_init_array+0x2e>
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c8:	4798      	blx	r3
 80093ca:	3601      	adds	r6, #1
 80093cc:	e7ee      	b.n	80093ac <__libc_init_array+0xc>
 80093ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d2:	4798      	blx	r3
 80093d4:	3601      	adds	r6, #1
 80093d6:	e7f2      	b.n	80093be <__libc_init_array+0x1e>
 80093d8:	0800c490 	.word	0x0800c490
 80093dc:	0800c490 	.word	0x0800c490
 80093e0:	0800c490 	.word	0x0800c490
 80093e4:	0800c494 	.word	0x0800c494

080093e8 <__retarget_lock_acquire_recursive>:
 80093e8:	4770      	bx	lr

080093ea <__retarget_lock_release_recursive>:
 80093ea:	4770      	bx	lr

080093ec <memcpy>:
 80093ec:	440a      	add	r2, r1
 80093ee:	4291      	cmp	r1, r2
 80093f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f4:	d100      	bne.n	80093f8 <memcpy+0xc>
 80093f6:	4770      	bx	lr
 80093f8:	b510      	push	{r4, lr}
 80093fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009402:	4291      	cmp	r1, r2
 8009404:	d1f9      	bne.n	80093fa <memcpy+0xe>
 8009406:	bd10      	pop	{r4, pc}

08009408 <memset>:
 8009408:	4402      	add	r2, r0
 800940a:	4603      	mov	r3, r0
 800940c:	4293      	cmp	r3, r2
 800940e:	d100      	bne.n	8009412 <memset+0xa>
 8009410:	4770      	bx	lr
 8009412:	f803 1b01 	strb.w	r1, [r3], #1
 8009416:	e7f9      	b.n	800940c <memset+0x4>

08009418 <_malloc_r>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	1ccd      	adds	r5, r1, #3
 800941c:	f025 0503 	bic.w	r5, r5, #3
 8009420:	3508      	adds	r5, #8
 8009422:	2d0c      	cmp	r5, #12
 8009424:	bf38      	it	cc
 8009426:	250c      	movcc	r5, #12
 8009428:	2d00      	cmp	r5, #0
 800942a:	4606      	mov	r6, r0
 800942c:	db01      	blt.n	8009432 <_malloc_r+0x1a>
 800942e:	42a9      	cmp	r1, r5
 8009430:	d903      	bls.n	800943a <_malloc_r+0x22>
 8009432:	230c      	movs	r3, #12
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	2000      	movs	r0, #0
 8009438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943a:	f000 f8ef 	bl	800961c <__malloc_lock>
 800943e:	4921      	ldr	r1, [pc, #132]	; (80094c4 <_malloc_r+0xac>)
 8009440:	680a      	ldr	r2, [r1, #0]
 8009442:	4614      	mov	r4, r2
 8009444:	b99c      	cbnz	r4, 800946e <_malloc_r+0x56>
 8009446:	4f20      	ldr	r7, [pc, #128]	; (80094c8 <_malloc_r+0xb0>)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	b923      	cbnz	r3, 8009456 <_malloc_r+0x3e>
 800944c:	4621      	mov	r1, r4
 800944e:	4630      	mov	r0, r6
 8009450:	f000 f8a6 	bl	80095a0 <_sbrk_r>
 8009454:	6038      	str	r0, [r7, #0]
 8009456:	4629      	mov	r1, r5
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f8a1 	bl	80095a0 <_sbrk_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d123      	bne.n	80094aa <_malloc_r+0x92>
 8009462:	230c      	movs	r3, #12
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	4630      	mov	r0, r6
 8009468:	f000 f8de 	bl	8009628 <__malloc_unlock>
 800946c:	e7e3      	b.n	8009436 <_malloc_r+0x1e>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1b5b      	subs	r3, r3, r5
 8009472:	d417      	bmi.n	80094a4 <_malloc_r+0x8c>
 8009474:	2b0b      	cmp	r3, #11
 8009476:	d903      	bls.n	8009480 <_malloc_r+0x68>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	441c      	add	r4, r3
 800947c:	6025      	str	r5, [r4, #0]
 800947e:	e004      	b.n	800948a <_malloc_r+0x72>
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	42a2      	cmp	r2, r4
 8009484:	bf0c      	ite	eq
 8009486:	600b      	streq	r3, [r1, #0]
 8009488:	6053      	strne	r3, [r2, #4]
 800948a:	4630      	mov	r0, r6
 800948c:	f000 f8cc 	bl	8009628 <__malloc_unlock>
 8009490:	f104 000b 	add.w	r0, r4, #11
 8009494:	1d23      	adds	r3, r4, #4
 8009496:	f020 0007 	bic.w	r0, r0, #7
 800949a:	1ac2      	subs	r2, r0, r3
 800949c:	d0cc      	beq.n	8009438 <_malloc_r+0x20>
 800949e:	1a1b      	subs	r3, r3, r0
 80094a0:	50a3      	str	r3, [r4, r2]
 80094a2:	e7c9      	b.n	8009438 <_malloc_r+0x20>
 80094a4:	4622      	mov	r2, r4
 80094a6:	6864      	ldr	r4, [r4, #4]
 80094a8:	e7cc      	b.n	8009444 <_malloc_r+0x2c>
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d0e3      	beq.n	800947c <_malloc_r+0x64>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4630      	mov	r0, r6
 80094b8:	f000 f872 	bl	80095a0 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1dd      	bne.n	800947c <_malloc_r+0x64>
 80094c0:	e7cf      	b.n	8009462 <_malloc_r+0x4a>
 80094c2:	bf00      	nop
 80094c4:	20004a90 	.word	0x20004a90
 80094c8:	20004a94 	.word	0x20004a94

080094cc <cleanup_glue>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	6809      	ldr	r1, [r1, #0]
 80094d2:	4605      	mov	r5, r0
 80094d4:	b109      	cbz	r1, 80094da <cleanup_glue+0xe>
 80094d6:	f7ff fff9 	bl	80094cc <cleanup_glue>
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094e2:	f000 b8a7 	b.w	8009634 <_free_r>
	...

080094e8 <_reclaim_reent>:
 80094e8:	4b2c      	ldr	r3, [pc, #176]	; (800959c <_reclaim_reent+0xb4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4283      	cmp	r3, r0
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	4604      	mov	r4, r0
 80094f2:	d051      	beq.n	8009598 <_reclaim_reent+0xb0>
 80094f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094f6:	b143      	cbz	r3, 800950a <_reclaim_reent+0x22>
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d14a      	bne.n	8009594 <_reclaim_reent+0xac>
 80094fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	b111      	cbz	r1, 800950a <_reclaim_reent+0x22>
 8009504:	4620      	mov	r0, r4
 8009506:	f000 f895 	bl	8009634 <_free_r>
 800950a:	6961      	ldr	r1, [r4, #20]
 800950c:	b111      	cbz	r1, 8009514 <_reclaim_reent+0x2c>
 800950e:	4620      	mov	r0, r4
 8009510:	f000 f890 	bl	8009634 <_free_r>
 8009514:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009516:	b111      	cbz	r1, 800951e <_reclaim_reent+0x36>
 8009518:	4620      	mov	r0, r4
 800951a:	f000 f88b 	bl	8009634 <_free_r>
 800951e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009520:	b111      	cbz	r1, 8009528 <_reclaim_reent+0x40>
 8009522:	4620      	mov	r0, r4
 8009524:	f000 f886 	bl	8009634 <_free_r>
 8009528:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800952a:	b111      	cbz	r1, 8009532 <_reclaim_reent+0x4a>
 800952c:	4620      	mov	r0, r4
 800952e:	f000 f881 	bl	8009634 <_free_r>
 8009532:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009534:	b111      	cbz	r1, 800953c <_reclaim_reent+0x54>
 8009536:	4620      	mov	r0, r4
 8009538:	f000 f87c 	bl	8009634 <_free_r>
 800953c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800953e:	b111      	cbz	r1, 8009546 <_reclaim_reent+0x5e>
 8009540:	4620      	mov	r0, r4
 8009542:	f000 f877 	bl	8009634 <_free_r>
 8009546:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009548:	b111      	cbz	r1, 8009550 <_reclaim_reent+0x68>
 800954a:	4620      	mov	r0, r4
 800954c:	f000 f872 	bl	8009634 <_free_r>
 8009550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009552:	b111      	cbz	r1, 800955a <_reclaim_reent+0x72>
 8009554:	4620      	mov	r0, r4
 8009556:	f000 f86d 	bl	8009634 <_free_r>
 800955a:	69a3      	ldr	r3, [r4, #24]
 800955c:	b1e3      	cbz	r3, 8009598 <_reclaim_reent+0xb0>
 800955e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009560:	4620      	mov	r0, r4
 8009562:	4798      	blx	r3
 8009564:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009566:	b1b9      	cbz	r1, 8009598 <_reclaim_reent+0xb0>
 8009568:	4620      	mov	r0, r4
 800956a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800956e:	f7ff bfad 	b.w	80094cc <cleanup_glue>
 8009572:	5949      	ldr	r1, [r1, r5]
 8009574:	b941      	cbnz	r1, 8009588 <_reclaim_reent+0xa0>
 8009576:	3504      	adds	r5, #4
 8009578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800957a:	2d80      	cmp	r5, #128	; 0x80
 800957c:	68d9      	ldr	r1, [r3, #12]
 800957e:	d1f8      	bne.n	8009572 <_reclaim_reent+0x8a>
 8009580:	4620      	mov	r0, r4
 8009582:	f000 f857 	bl	8009634 <_free_r>
 8009586:	e7ba      	b.n	80094fe <_reclaim_reent+0x16>
 8009588:	680e      	ldr	r6, [r1, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f852 	bl	8009634 <_free_r>
 8009590:	4631      	mov	r1, r6
 8009592:	e7ef      	b.n	8009574 <_reclaim_reent+0x8c>
 8009594:	2500      	movs	r5, #0
 8009596:	e7ef      	b.n	8009578 <_reclaim_reent+0x90>
 8009598:	bd70      	pop	{r4, r5, r6, pc}
 800959a:	bf00      	nop
 800959c:	20000034 	.word	0x20000034

080095a0 <_sbrk_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	; (80095bc <_sbrk_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f9 fac4 	bl	8002b38 <_sbrk>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_sbrk_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_sbrk_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	2000ce28 	.word	0x2000ce28

080095c0 <siscanf>:
 80095c0:	b40e      	push	{r1, r2, r3}
 80095c2:	b510      	push	{r4, lr}
 80095c4:	b09f      	sub	sp, #124	; 0x7c
 80095c6:	ac21      	add	r4, sp, #132	; 0x84
 80095c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80095cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80095d0:	9201      	str	r2, [sp, #4]
 80095d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80095d6:	9004      	str	r0, [sp, #16]
 80095d8:	9008      	str	r0, [sp, #32]
 80095da:	f7f6 fdf9 	bl	80001d0 <strlen>
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <siscanf+0x50>)
 80095e0:	9005      	str	r0, [sp, #20]
 80095e2:	9009      	str	r0, [sp, #36]	; 0x24
 80095e4:	930d      	str	r3, [sp, #52]	; 0x34
 80095e6:	480b      	ldr	r0, [pc, #44]	; (8009614 <siscanf+0x54>)
 80095e8:	9a01      	ldr	r2, [sp, #4]
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	9403      	str	r4, [sp, #12]
 80095ee:	2300      	movs	r3, #0
 80095f0:	9311      	str	r3, [sp, #68]	; 0x44
 80095f2:	9316      	str	r3, [sp, #88]	; 0x58
 80095f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80095fc:	a904      	add	r1, sp, #16
 80095fe:	4623      	mov	r3, r4
 8009600:	f000 f8c2 	bl	8009788 <__ssvfiscanf_r>
 8009604:	b01f      	add	sp, #124	; 0x7c
 8009606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960a:	b003      	add	sp, #12
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	08009619 	.word	0x08009619
 8009614:	20000034 	.word	0x20000034

08009618 <__seofread>:
 8009618:	2000      	movs	r0, #0
 800961a:	4770      	bx	lr

0800961c <__malloc_lock>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__malloc_lock+0x8>)
 800961e:	f7ff bee3 	b.w	80093e8 <__retarget_lock_acquire_recursive>
 8009622:	bf00      	nop
 8009624:	2000ce20 	.word	0x2000ce20

08009628 <__malloc_unlock>:
 8009628:	4801      	ldr	r0, [pc, #4]	; (8009630 <__malloc_unlock+0x8>)
 800962a:	f7ff bede 	b.w	80093ea <__retarget_lock_release_recursive>
 800962e:	bf00      	nop
 8009630:	2000ce20 	.word	0x2000ce20

08009634 <_free_r>:
 8009634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009636:	2900      	cmp	r1, #0
 8009638:	d048      	beq.n	80096cc <_free_r+0x98>
 800963a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800963e:	9001      	str	r0, [sp, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f1a1 0404 	sub.w	r4, r1, #4
 8009646:	bfb8      	it	lt
 8009648:	18e4      	addlt	r4, r4, r3
 800964a:	f7ff ffe7 	bl	800961c <__malloc_lock>
 800964e:	4a20      	ldr	r2, [pc, #128]	; (80096d0 <_free_r+0x9c>)
 8009650:	9801      	ldr	r0, [sp, #4]
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	4615      	mov	r5, r2
 8009656:	b933      	cbnz	r3, 8009666 <_free_r+0x32>
 8009658:	6063      	str	r3, [r4, #4]
 800965a:	6014      	str	r4, [r2, #0]
 800965c:	b003      	add	sp, #12
 800965e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009662:	f7ff bfe1 	b.w	8009628 <__malloc_unlock>
 8009666:	42a3      	cmp	r3, r4
 8009668:	d90b      	bls.n	8009682 <_free_r+0x4e>
 800966a:	6821      	ldr	r1, [r4, #0]
 800966c:	1862      	adds	r2, r4, r1
 800966e:	4293      	cmp	r3, r2
 8009670:	bf04      	itt	eq
 8009672:	681a      	ldreq	r2, [r3, #0]
 8009674:	685b      	ldreq	r3, [r3, #4]
 8009676:	6063      	str	r3, [r4, #4]
 8009678:	bf04      	itt	eq
 800967a:	1852      	addeq	r2, r2, r1
 800967c:	6022      	streq	r2, [r4, #0]
 800967e:	602c      	str	r4, [r5, #0]
 8009680:	e7ec      	b.n	800965c <_free_r+0x28>
 8009682:	461a      	mov	r2, r3
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	b10b      	cbz	r3, 800968c <_free_r+0x58>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d9fa      	bls.n	8009682 <_free_r+0x4e>
 800968c:	6811      	ldr	r1, [r2, #0]
 800968e:	1855      	adds	r5, r2, r1
 8009690:	42a5      	cmp	r5, r4
 8009692:	d10b      	bne.n	80096ac <_free_r+0x78>
 8009694:	6824      	ldr	r4, [r4, #0]
 8009696:	4421      	add	r1, r4
 8009698:	1854      	adds	r4, r2, r1
 800969a:	42a3      	cmp	r3, r4
 800969c:	6011      	str	r1, [r2, #0]
 800969e:	d1dd      	bne.n	800965c <_free_r+0x28>
 80096a0:	681c      	ldr	r4, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	6053      	str	r3, [r2, #4]
 80096a6:	4421      	add	r1, r4
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	e7d7      	b.n	800965c <_free_r+0x28>
 80096ac:	d902      	bls.n	80096b4 <_free_r+0x80>
 80096ae:	230c      	movs	r3, #12
 80096b0:	6003      	str	r3, [r0, #0]
 80096b2:	e7d3      	b.n	800965c <_free_r+0x28>
 80096b4:	6825      	ldr	r5, [r4, #0]
 80096b6:	1961      	adds	r1, r4, r5
 80096b8:	428b      	cmp	r3, r1
 80096ba:	bf04      	itt	eq
 80096bc:	6819      	ldreq	r1, [r3, #0]
 80096be:	685b      	ldreq	r3, [r3, #4]
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	bf04      	itt	eq
 80096c4:	1949      	addeq	r1, r1, r5
 80096c6:	6021      	streq	r1, [r4, #0]
 80096c8:	6054      	str	r4, [r2, #4]
 80096ca:	e7c7      	b.n	800965c <_free_r+0x28>
 80096cc:	b003      	add	sp, #12
 80096ce:	bd30      	pop	{r4, r5, pc}
 80096d0:	20004a90 	.word	0x20004a90

080096d4 <_sungetc_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	1c4b      	adds	r3, r1, #1
 80096d8:	4614      	mov	r4, r2
 80096da:	d103      	bne.n	80096e4 <_sungetc_r+0x10>
 80096dc:	f04f 35ff 	mov.w	r5, #4294967295
 80096e0:	4628      	mov	r0, r5
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	8993      	ldrh	r3, [r2, #12]
 80096e6:	f023 0320 	bic.w	r3, r3, #32
 80096ea:	8193      	strh	r3, [r2, #12]
 80096ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096ee:	6852      	ldr	r2, [r2, #4]
 80096f0:	b2cd      	uxtb	r5, r1
 80096f2:	b18b      	cbz	r3, 8009718 <_sungetc_r+0x44>
 80096f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096f6:	4293      	cmp	r3, r2
 80096f8:	dd08      	ble.n	800970c <_sungetc_r+0x38>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	6022      	str	r2, [r4, #0]
 8009700:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009704:	6863      	ldr	r3, [r4, #4]
 8009706:	3301      	adds	r3, #1
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	e7e9      	b.n	80096e0 <_sungetc_r+0xc>
 800970c:	4621      	mov	r1, r4
 800970e:	f000 fc3d 	bl	8009f8c <__submore>
 8009712:	2800      	cmp	r0, #0
 8009714:	d0f1      	beq.n	80096fa <_sungetc_r+0x26>
 8009716:	e7e1      	b.n	80096dc <_sungetc_r+0x8>
 8009718:	6921      	ldr	r1, [r4, #16]
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	b151      	cbz	r1, 8009734 <_sungetc_r+0x60>
 800971e:	4299      	cmp	r1, r3
 8009720:	d208      	bcs.n	8009734 <_sungetc_r+0x60>
 8009722:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009726:	42a9      	cmp	r1, r5
 8009728:	d104      	bne.n	8009734 <_sungetc_r+0x60>
 800972a:	3b01      	subs	r3, #1
 800972c:	3201      	adds	r2, #1
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	6062      	str	r2, [r4, #4]
 8009732:	e7d5      	b.n	80096e0 <_sungetc_r+0xc>
 8009734:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973c:	6363      	str	r3, [r4, #52]	; 0x34
 800973e:	2303      	movs	r3, #3
 8009740:	63a3      	str	r3, [r4, #56]	; 0x38
 8009742:	4623      	mov	r3, r4
 8009744:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	2301      	movs	r3, #1
 800974c:	e7dc      	b.n	8009708 <_sungetc_r+0x34>

0800974e <__ssrefill_r>:
 800974e:	b510      	push	{r4, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009754:	b169      	cbz	r1, 8009772 <__ssrefill_r+0x24>
 8009756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975a:	4299      	cmp	r1, r3
 800975c:	d001      	beq.n	8009762 <__ssrefill_r+0x14>
 800975e:	f7ff ff69 	bl	8009634 <_free_r>
 8009762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009764:	6063      	str	r3, [r4, #4]
 8009766:	2000      	movs	r0, #0
 8009768:	6360      	str	r0, [r4, #52]	; 0x34
 800976a:	b113      	cbz	r3, 8009772 <__ssrefill_r+0x24>
 800976c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd10      	pop	{r4, pc}
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0320 	orr.w	r3, r3, #32
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	e7f3      	b.n	8009770 <__ssrefill_r+0x22>

08009788 <__ssvfiscanf_r>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009792:	2100      	movs	r1, #0
 8009794:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009798:	49b2      	ldr	r1, [pc, #712]	; (8009a64 <__ssvfiscanf_r+0x2dc>)
 800979a:	91a0      	str	r1, [sp, #640]	; 0x280
 800979c:	f10d 0804 	add.w	r8, sp, #4
 80097a0:	49b1      	ldr	r1, [pc, #708]	; (8009a68 <__ssvfiscanf_r+0x2e0>)
 80097a2:	4fb2      	ldr	r7, [pc, #712]	; (8009a6c <__ssvfiscanf_r+0x2e4>)
 80097a4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8009a70 <__ssvfiscanf_r+0x2e8>
 80097a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80097ac:	4606      	mov	r6, r0
 80097ae:	91a1      	str	r1, [sp, #644]	; 0x284
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	f892 a000 	ldrb.w	sl, [r2]
 80097b6:	f1ba 0f00 	cmp.w	sl, #0
 80097ba:	f000 8151 	beq.w	8009a60 <__ssvfiscanf_r+0x2d8>
 80097be:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80097c2:	f013 0308 	ands.w	r3, r3, #8
 80097c6:	f102 0501 	add.w	r5, r2, #1
 80097ca:	d019      	beq.n	8009800 <__ssvfiscanf_r+0x78>
 80097cc:	6863      	ldr	r3, [r4, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	dd0f      	ble.n	80097f2 <__ssvfiscanf_r+0x6a>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	5cba      	ldrb	r2, [r7, r2]
 80097d8:	0712      	lsls	r2, r2, #28
 80097da:	d401      	bmi.n	80097e0 <__ssvfiscanf_r+0x58>
 80097dc:	462a      	mov	r2, r5
 80097de:	e7e8      	b.n	80097b2 <__ssvfiscanf_r+0x2a>
 80097e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097e2:	3201      	adds	r2, #1
 80097e4:	9245      	str	r2, [sp, #276]	; 0x114
 80097e6:	6862      	ldr	r2, [r4, #4]
 80097e8:	3301      	adds	r3, #1
 80097ea:	3a01      	subs	r2, #1
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	e7ec      	b.n	80097cc <__ssvfiscanf_r+0x44>
 80097f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097f4:	4621      	mov	r1, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	4798      	blx	r3
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d0e9      	beq.n	80097d2 <__ssvfiscanf_r+0x4a>
 80097fe:	e7ed      	b.n	80097dc <__ssvfiscanf_r+0x54>
 8009800:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009804:	f040 8083 	bne.w	800990e <__ssvfiscanf_r+0x186>
 8009808:	9341      	str	r3, [sp, #260]	; 0x104
 800980a:	9343      	str	r3, [sp, #268]	; 0x10c
 800980c:	7853      	ldrb	r3, [r2, #1]
 800980e:	2b2a      	cmp	r3, #42	; 0x2a
 8009810:	bf02      	ittt	eq
 8009812:	2310      	moveq	r3, #16
 8009814:	1c95      	addeq	r5, r2, #2
 8009816:	9341      	streq	r3, [sp, #260]	; 0x104
 8009818:	220a      	movs	r2, #10
 800981a:	46ab      	mov	fp, r5
 800981c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009820:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009824:	2b09      	cmp	r3, #9
 8009826:	d91d      	bls.n	8009864 <__ssvfiscanf_r+0xdc>
 8009828:	4891      	ldr	r0, [pc, #580]	; (8009a70 <__ssvfiscanf_r+0x2e8>)
 800982a:	2203      	movs	r2, #3
 800982c:	f7f6 fcd8 	bl	80001e0 <memchr>
 8009830:	b140      	cbz	r0, 8009844 <__ssvfiscanf_r+0xbc>
 8009832:	2301      	movs	r3, #1
 8009834:	eba0 0009 	sub.w	r0, r0, r9
 8009838:	fa03 f000 	lsl.w	r0, r3, r0
 800983c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800983e:	4318      	orrs	r0, r3
 8009840:	9041      	str	r0, [sp, #260]	; 0x104
 8009842:	465d      	mov	r5, fp
 8009844:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009848:	2b78      	cmp	r3, #120	; 0x78
 800984a:	d806      	bhi.n	800985a <__ssvfiscanf_r+0xd2>
 800984c:	2b57      	cmp	r3, #87	; 0x57
 800984e:	d810      	bhi.n	8009872 <__ssvfiscanf_r+0xea>
 8009850:	2b25      	cmp	r3, #37	; 0x25
 8009852:	d05c      	beq.n	800990e <__ssvfiscanf_r+0x186>
 8009854:	d856      	bhi.n	8009904 <__ssvfiscanf_r+0x17c>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d074      	beq.n	8009944 <__ssvfiscanf_r+0x1bc>
 800985a:	2303      	movs	r3, #3
 800985c:	9347      	str	r3, [sp, #284]	; 0x11c
 800985e:	230a      	movs	r3, #10
 8009860:	9342      	str	r3, [sp, #264]	; 0x108
 8009862:	e081      	b.n	8009968 <__ssvfiscanf_r+0x1e0>
 8009864:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009866:	fb02 1303 	mla	r3, r2, r3, r1
 800986a:	3b30      	subs	r3, #48	; 0x30
 800986c:	9343      	str	r3, [sp, #268]	; 0x10c
 800986e:	465d      	mov	r5, fp
 8009870:	e7d3      	b.n	800981a <__ssvfiscanf_r+0x92>
 8009872:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009876:	2a20      	cmp	r2, #32
 8009878:	d8ef      	bhi.n	800985a <__ssvfiscanf_r+0xd2>
 800987a:	a101      	add	r1, pc, #4	; (adr r1, 8009880 <__ssvfiscanf_r+0xf8>)
 800987c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009880:	08009953 	.word	0x08009953
 8009884:	0800985b 	.word	0x0800985b
 8009888:	0800985b 	.word	0x0800985b
 800988c:	080099b1 	.word	0x080099b1
 8009890:	0800985b 	.word	0x0800985b
 8009894:	0800985b 	.word	0x0800985b
 8009898:	0800985b 	.word	0x0800985b
 800989c:	0800985b 	.word	0x0800985b
 80098a0:	0800985b 	.word	0x0800985b
 80098a4:	0800985b 	.word	0x0800985b
 80098a8:	0800985b 	.word	0x0800985b
 80098ac:	080099c7 	.word	0x080099c7
 80098b0:	0800999d 	.word	0x0800999d
 80098b4:	0800990b 	.word	0x0800990b
 80098b8:	0800990b 	.word	0x0800990b
 80098bc:	0800990b 	.word	0x0800990b
 80098c0:	0800985b 	.word	0x0800985b
 80098c4:	080099a1 	.word	0x080099a1
 80098c8:	0800985b 	.word	0x0800985b
 80098cc:	0800985b 	.word	0x0800985b
 80098d0:	0800985b 	.word	0x0800985b
 80098d4:	0800985b 	.word	0x0800985b
 80098d8:	080099d7 	.word	0x080099d7
 80098dc:	080099a9 	.word	0x080099a9
 80098e0:	0800994b 	.word	0x0800994b
 80098e4:	0800985b 	.word	0x0800985b
 80098e8:	0800985b 	.word	0x0800985b
 80098ec:	080099d3 	.word	0x080099d3
 80098f0:	0800985b 	.word	0x0800985b
 80098f4:	0800999d 	.word	0x0800999d
 80098f8:	0800985b 	.word	0x0800985b
 80098fc:	0800985b 	.word	0x0800985b
 8009900:	08009953 	.word	0x08009953
 8009904:	3b45      	subs	r3, #69	; 0x45
 8009906:	2b02      	cmp	r3, #2
 8009908:	d8a7      	bhi.n	800985a <__ssvfiscanf_r+0xd2>
 800990a:	2305      	movs	r3, #5
 800990c:	e02b      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 800990e:	6863      	ldr	r3, [r4, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dd0d      	ble.n	8009930 <__ssvfiscanf_r+0x1a8>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	4552      	cmp	r2, sl
 800991a:	f040 80a1 	bne.w	8009a60 <__ssvfiscanf_r+0x2d8>
 800991e:	3301      	adds	r3, #1
 8009920:	6862      	ldr	r2, [r4, #4]
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009926:	3a01      	subs	r2, #1
 8009928:	3301      	adds	r3, #1
 800992a:	6062      	str	r2, [r4, #4]
 800992c:	9345      	str	r3, [sp, #276]	; 0x114
 800992e:	e755      	b.n	80097dc <__ssvfiscanf_r+0x54>
 8009930:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009932:	4621      	mov	r1, r4
 8009934:	4630      	mov	r0, r6
 8009936:	4798      	blx	r3
 8009938:	2800      	cmp	r0, #0
 800993a:	d0eb      	beq.n	8009914 <__ssvfiscanf_r+0x18c>
 800993c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800993e:	2800      	cmp	r0, #0
 8009940:	f040 8084 	bne.w	8009a4c <__ssvfiscanf_r+0x2c4>
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	e086      	b.n	8009a58 <__ssvfiscanf_r+0x2d0>
 800994a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800994c:	f042 0220 	orr.w	r2, r2, #32
 8009950:	9241      	str	r2, [sp, #260]	; 0x104
 8009952:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009958:	9241      	str	r2, [sp, #260]	; 0x104
 800995a:	2210      	movs	r2, #16
 800995c:	2b6f      	cmp	r3, #111	; 0x6f
 800995e:	9242      	str	r2, [sp, #264]	; 0x108
 8009960:	bf34      	ite	cc
 8009962:	2303      	movcc	r3, #3
 8009964:	2304      	movcs	r3, #4
 8009966:	9347      	str	r3, [sp, #284]	; 0x11c
 8009968:	6863      	ldr	r3, [r4, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dd41      	ble.n	80099f2 <__ssvfiscanf_r+0x26a>
 800996e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009970:	0659      	lsls	r1, r3, #25
 8009972:	d404      	bmi.n	800997e <__ssvfiscanf_r+0x1f6>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	781a      	ldrb	r2, [r3, #0]
 8009978:	5cba      	ldrb	r2, [r7, r2]
 800997a:	0712      	lsls	r2, r2, #28
 800997c:	d440      	bmi.n	8009a00 <__ssvfiscanf_r+0x278>
 800997e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009980:	2b02      	cmp	r3, #2
 8009982:	dc4f      	bgt.n	8009a24 <__ssvfiscanf_r+0x29c>
 8009984:	466b      	mov	r3, sp
 8009986:	4622      	mov	r2, r4
 8009988:	a941      	add	r1, sp, #260	; 0x104
 800998a:	4630      	mov	r0, r6
 800998c:	f000 f874 	bl	8009a78 <_scanf_chars>
 8009990:	2801      	cmp	r0, #1
 8009992:	d065      	beq.n	8009a60 <__ssvfiscanf_r+0x2d8>
 8009994:	2802      	cmp	r0, #2
 8009996:	f47f af21 	bne.w	80097dc <__ssvfiscanf_r+0x54>
 800999a:	e7cf      	b.n	800993c <__ssvfiscanf_r+0x1b4>
 800999c:	220a      	movs	r2, #10
 800999e:	e7dd      	b.n	800995c <__ssvfiscanf_r+0x1d4>
 80099a0:	2300      	movs	r3, #0
 80099a2:	9342      	str	r3, [sp, #264]	; 0x108
 80099a4:	2303      	movs	r3, #3
 80099a6:	e7de      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 80099a8:	2308      	movs	r3, #8
 80099aa:	9342      	str	r3, [sp, #264]	; 0x108
 80099ac:	2304      	movs	r3, #4
 80099ae:	e7da      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 80099b0:	4629      	mov	r1, r5
 80099b2:	4640      	mov	r0, r8
 80099b4:	f000 f9ac 	bl	8009d10 <__sccl>
 80099b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099be:	9341      	str	r3, [sp, #260]	; 0x104
 80099c0:	4605      	mov	r5, r0
 80099c2:	2301      	movs	r3, #1
 80099c4:	e7cf      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 80099c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099cc:	9341      	str	r3, [sp, #260]	; 0x104
 80099ce:	2300      	movs	r3, #0
 80099d0:	e7c9      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e7c7      	b.n	8009966 <__ssvfiscanf_r+0x1de>
 80099d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80099d8:	06c3      	lsls	r3, r0, #27
 80099da:	f53f aeff 	bmi.w	80097dc <__ssvfiscanf_r+0x54>
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099e2:	1d19      	adds	r1, r3, #4
 80099e4:	9100      	str	r1, [sp, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	07c0      	lsls	r0, r0, #31
 80099ea:	bf4c      	ite	mi
 80099ec:	801a      	strhmi	r2, [r3, #0]
 80099ee:	601a      	strpl	r2, [r3, #0]
 80099f0:	e6f4      	b.n	80097dc <__ssvfiscanf_r+0x54>
 80099f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099f4:	4621      	mov	r1, r4
 80099f6:	4630      	mov	r0, r6
 80099f8:	4798      	blx	r3
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0b7      	beq.n	800996e <__ssvfiscanf_r+0x1e6>
 80099fe:	e79d      	b.n	800993c <__ssvfiscanf_r+0x1b4>
 8009a00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a02:	3201      	adds	r2, #1
 8009a04:	9245      	str	r2, [sp, #276]	; 0x114
 8009a06:	6862      	ldr	r2, [r4, #4]
 8009a08:	3a01      	subs	r2, #1
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	6062      	str	r2, [r4, #4]
 8009a0e:	dd02      	ble.n	8009a16 <__ssvfiscanf_r+0x28e>
 8009a10:	3301      	adds	r3, #1
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	e7ae      	b.n	8009974 <__ssvfiscanf_r+0x1ec>
 8009a16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4798      	blx	r3
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0a8      	beq.n	8009974 <__ssvfiscanf_r+0x1ec>
 8009a22:	e78b      	b.n	800993c <__ssvfiscanf_r+0x1b4>
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	dc06      	bgt.n	8009a36 <__ssvfiscanf_r+0x2ae>
 8009a28:	466b      	mov	r3, sp
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	a941      	add	r1, sp, #260	; 0x104
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f000 f87a 	bl	8009b28 <_scanf_i>
 8009a34:	e7ac      	b.n	8009990 <__ssvfiscanf_r+0x208>
 8009a36:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <__ssvfiscanf_r+0x2ec>)
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f43f aecf 	beq.w	80097dc <__ssvfiscanf_r+0x54>
 8009a3e:	466b      	mov	r3, sp
 8009a40:	4622      	mov	r2, r4
 8009a42:	a941      	add	r1, sp, #260	; 0x104
 8009a44:	4630      	mov	r0, r6
 8009a46:	f3af 8000 	nop.w
 8009a4a:	e7a1      	b.n	8009990 <__ssvfiscanf_r+0x208>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a52:	bf18      	it	ne
 8009a54:	f04f 30ff 	movne.w	r0, #4294967295
 8009a58:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a62:	e7f9      	b.n	8009a58 <__ssvfiscanf_r+0x2d0>
 8009a64:	080096d5 	.word	0x080096d5
 8009a68:	0800974f 	.word	0x0800974f
 8009a6c:	0800c16c 	.word	0x0800c16c
 8009a70:	0800c14c 	.word	0x0800c14c
 8009a74:	00000000 	.word	0x00000000

08009a78 <_scanf_chars>:
 8009a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	688a      	ldr	r2, [r1, #8]
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b932      	cbnz	r2, 8009a94 <_scanf_chars+0x1c>
 8009a86:	698a      	ldr	r2, [r1, #24]
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	bf0c      	ite	eq
 8009a8c:	2201      	moveq	r2, #1
 8009a8e:	f04f 32ff 	movne.w	r2, #4294967295
 8009a92:	608a      	str	r2, [r1, #8]
 8009a94:	6822      	ldr	r2, [r4, #0]
 8009a96:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009b24 <_scanf_chars+0xac>
 8009a9a:	06d1      	lsls	r1, r2, #27
 8009a9c:	bf5f      	itttt	pl
 8009a9e:	681a      	ldrpl	r2, [r3, #0]
 8009aa0:	1d11      	addpl	r1, r2, #4
 8009aa2:	6019      	strpl	r1, [r3, #0]
 8009aa4:	6816      	ldrpl	r6, [r2, #0]
 8009aa6:	2700      	movs	r7, #0
 8009aa8:	69a0      	ldr	r0, [r4, #24]
 8009aaa:	b188      	cbz	r0, 8009ad0 <_scanf_chars+0x58>
 8009aac:	2801      	cmp	r0, #1
 8009aae:	d107      	bne.n	8009ac0 <_scanf_chars+0x48>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	6963      	ldr	r3, [r4, #20]
 8009ab6:	5c9b      	ldrb	r3, [r3, r2]
 8009ab8:	b953      	cbnz	r3, 8009ad0 <_scanf_chars+0x58>
 8009aba:	bb27      	cbnz	r7, 8009b06 <_scanf_chars+0x8e>
 8009abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac0:	2802      	cmp	r0, #2
 8009ac2:	d120      	bne.n	8009b06 <_scanf_chars+0x8e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009acc:	071b      	lsls	r3, r3, #28
 8009ace:	d41a      	bmi.n	8009b06 <_scanf_chars+0x8e>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	06da      	lsls	r2, r3, #27
 8009ad4:	bf5e      	ittt	pl
 8009ad6:	682b      	ldrpl	r3, [r5, #0]
 8009ad8:	781b      	ldrbpl	r3, [r3, #0]
 8009ada:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009ade:	682a      	ldr	r2, [r5, #0]
 8009ae0:	686b      	ldr	r3, [r5, #4]
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	68a2      	ldr	r2, [r4, #8]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	3a01      	subs	r2, #1
 8009aec:	606b      	str	r3, [r5, #4]
 8009aee:	3701      	adds	r7, #1
 8009af0:	60a2      	str	r2, [r4, #8]
 8009af2:	b142      	cbz	r2, 8009b06 <_scanf_chars+0x8e>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dcd7      	bgt.n	8009aa8 <_scanf_chars+0x30>
 8009af8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009afc:	4629      	mov	r1, r5
 8009afe:	4640      	mov	r0, r8
 8009b00:	4798      	blx	r3
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d0d0      	beq.n	8009aa8 <_scanf_chars+0x30>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f013 0310 	ands.w	r3, r3, #16
 8009b0c:	d105      	bne.n	8009b1a <_scanf_chars+0xa2>
 8009b0e:	68e2      	ldr	r2, [r4, #12]
 8009b10:	3201      	adds	r2, #1
 8009b12:	60e2      	str	r2, [r4, #12]
 8009b14:	69a2      	ldr	r2, [r4, #24]
 8009b16:	b102      	cbz	r2, 8009b1a <_scanf_chars+0xa2>
 8009b18:	7033      	strb	r3, [r6, #0]
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	441f      	add	r7, r3
 8009b1e:	6127      	str	r7, [r4, #16]
 8009b20:	2000      	movs	r0, #0
 8009b22:	e7cb      	b.n	8009abc <_scanf_chars+0x44>
 8009b24:	0800c16c 	.word	0x0800c16c

08009b28 <_scanf_i>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	4698      	mov	r8, r3
 8009b2e:	4b74      	ldr	r3, [pc, #464]	; (8009d00 <_scanf_i+0x1d8>)
 8009b30:	460c      	mov	r4, r1
 8009b32:	4682      	mov	sl, r0
 8009b34:	4616      	mov	r6, r2
 8009b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b42:	4b70      	ldr	r3, [pc, #448]	; (8009d04 <_scanf_i+0x1dc>)
 8009b44:	69a1      	ldr	r1, [r4, #24]
 8009b46:	4a70      	ldr	r2, [pc, #448]	; (8009d08 <_scanf_i+0x1e0>)
 8009b48:	2903      	cmp	r1, #3
 8009b4a:	bf18      	it	ne
 8009b4c:	461a      	movne	r2, r3
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	9201      	str	r2, [sp, #4]
 8009b52:	1e5a      	subs	r2, r3, #1
 8009b54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b58:	bf88      	it	hi
 8009b5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b5e:	4627      	mov	r7, r4
 8009b60:	bf82      	ittt	hi
 8009b62:	eb03 0905 	addhi.w	r9, r3, r5
 8009b66:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b6a:	60a3      	strhi	r3, [r4, #8]
 8009b6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009b74:	bf98      	it	ls
 8009b76:	f04f 0900 	movls.w	r9, #0
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	463d      	mov	r5, r7
 8009b7e:	f04f 0b00 	mov.w	fp, #0
 8009b82:	6831      	ldr	r1, [r6, #0]
 8009b84:	ab03      	add	r3, sp, #12
 8009b86:	7809      	ldrb	r1, [r1, #0]
 8009b88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	f7f6 fb27 	bl	80001e0 <memchr>
 8009b92:	b328      	cbz	r0, 8009be0 <_scanf_i+0xb8>
 8009b94:	f1bb 0f01 	cmp.w	fp, #1
 8009b98:	d159      	bne.n	8009c4e <_scanf_i+0x126>
 8009b9a:	6862      	ldr	r2, [r4, #4]
 8009b9c:	b92a      	cbnz	r2, 8009baa <_scanf_i+0x82>
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba6:	6063      	str	r3, [r4, #4]
 8009ba8:	6022      	str	r2, [r4, #0]
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	68a2      	ldr	r2, [r4, #8]
 8009bb4:	1e51      	subs	r1, r2, #1
 8009bb6:	60a1      	str	r1, [r4, #8]
 8009bb8:	b192      	cbz	r2, 8009be0 <_scanf_i+0xb8>
 8009bba:	6832      	ldr	r2, [r6, #0]
 8009bbc:	1c51      	adds	r1, r2, #1
 8009bbe:	6031      	str	r1, [r6, #0]
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	f805 2b01 	strb.w	r2, [r5], #1
 8009bc6:	6872      	ldr	r2, [r6, #4]
 8009bc8:	3a01      	subs	r2, #1
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	6072      	str	r2, [r6, #4]
 8009bce:	dc07      	bgt.n	8009be0 <_scanf_i+0xb8>
 8009bd0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4790      	blx	r2
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f040 8085 	bne.w	8009cea <_scanf_i+0x1c2>
 8009be0:	f10b 0b01 	add.w	fp, fp, #1
 8009be4:	f1bb 0f03 	cmp.w	fp, #3
 8009be8:	d1cb      	bne.n	8009b82 <_scanf_i+0x5a>
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <_scanf_i+0xca>
 8009bee:	230a      	movs	r3, #10
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	4945      	ldr	r1, [pc, #276]	; (8009d0c <_scanf_i+0x1e4>)
 8009bf6:	6960      	ldr	r0, [r4, #20]
 8009bf8:	1ac9      	subs	r1, r1, r3
 8009bfa:	f000 f889 	bl	8009d10 <__sccl>
 8009bfe:	f04f 0b00 	mov.w	fp, #0
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d03d      	beq.n	8009c86 <_scanf_i+0x15e>
 8009c0a:	6831      	ldr	r1, [r6, #0]
 8009c0c:	6960      	ldr	r0, [r4, #20]
 8009c0e:	f891 c000 	ldrb.w	ip, [r1]
 8009c12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d035      	beq.n	8009c86 <_scanf_i+0x15e>
 8009c1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009c1e:	d124      	bne.n	8009c6a <_scanf_i+0x142>
 8009c20:	0510      	lsls	r0, r2, #20
 8009c22:	d522      	bpl.n	8009c6a <_scanf_i+0x142>
 8009c24:	f10b 0b01 	add.w	fp, fp, #1
 8009c28:	f1b9 0f00 	cmp.w	r9, #0
 8009c2c:	d003      	beq.n	8009c36 <_scanf_i+0x10e>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c34:	60a3      	str	r3, [r4, #8]
 8009c36:	6873      	ldr	r3, [r6, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	6073      	str	r3, [r6, #4]
 8009c3e:	dd1b      	ble.n	8009c78 <_scanf_i+0x150>
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	e7d9      	b.n	8009c02 <_scanf_i+0xda>
 8009c4e:	f1bb 0f02 	cmp.w	fp, #2
 8009c52:	d1ae      	bne.n	8009bb2 <_scanf_i+0x8a>
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009c5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009c5e:	d1bf      	bne.n	8009be0 <_scanf_i+0xb8>
 8009c60:	2310      	movs	r3, #16
 8009c62:	6063      	str	r3, [r4, #4]
 8009c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c68:	e7a2      	b.n	8009bb0 <_scanf_i+0x88>
 8009c6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009c6e:	6022      	str	r2, [r4, #0]
 8009c70:	780b      	ldrb	r3, [r1, #0]
 8009c72:	f805 3b01 	strb.w	r3, [r5], #1
 8009c76:	e7de      	b.n	8009c36 <_scanf_i+0x10e>
 8009c78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4650      	mov	r0, sl
 8009c80:	4798      	blx	r3
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0df      	beq.n	8009c46 <_scanf_i+0x11e>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	05d9      	lsls	r1, r3, #23
 8009c8a:	d50d      	bpl.n	8009ca8 <_scanf_i+0x180>
 8009c8c:	42bd      	cmp	r5, r7
 8009c8e:	d909      	bls.n	8009ca4 <_scanf_i+0x17c>
 8009c90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	4798      	blx	r3
 8009c9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ca2:	464d      	mov	r5, r9
 8009ca4:	42bd      	cmp	r5, r7
 8009ca6:	d028      	beq.n	8009cfa <_scanf_i+0x1d2>
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	f012 0210 	ands.w	r2, r2, #16
 8009cae:	d113      	bne.n	8009cd8 <_scanf_i+0x1b0>
 8009cb0:	702a      	strb	r2, [r5, #0]
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	9e01      	ldr	r6, [sp, #4]
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4650      	mov	r0, sl
 8009cba:	47b0      	blx	r6
 8009cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc0:	6821      	ldr	r1, [r4, #0]
 8009cc2:	1d1a      	adds	r2, r3, #4
 8009cc4:	f8c8 2000 	str.w	r2, [r8]
 8009cc8:	f011 0f20 	tst.w	r1, #32
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	d00f      	beq.n	8009cf0 <_scanf_i+0x1c8>
 8009cd0:	6018      	str	r0, [r3, #0]
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	60e3      	str	r3, [r4, #12]
 8009cd8:	1bed      	subs	r5, r5, r7
 8009cda:	44ab      	add	fp, r5
 8009cdc:	6925      	ldr	r5, [r4, #16]
 8009cde:	445d      	add	r5, fp
 8009ce0:	6125      	str	r5, [r4, #16]
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	b007      	add	sp, #28
 8009ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cea:	f04f 0b00 	mov.w	fp, #0
 8009cee:	e7ca      	b.n	8009c86 <_scanf_i+0x15e>
 8009cf0:	07ca      	lsls	r2, r1, #31
 8009cf2:	bf4c      	ite	mi
 8009cf4:	8018      	strhmi	r0, [r3, #0]
 8009cf6:	6018      	strpl	r0, [r3, #0]
 8009cf8:	e7eb      	b.n	8009cd2 <_scanf_i+0x1aa>
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	e7f2      	b.n	8009ce4 <_scanf_i+0x1bc>
 8009cfe:	bf00      	nop
 8009d00:	0800c078 	.word	0x0800c078
 8009d04:	08009f89 	.word	0x08009f89
 8009d08:	08009e8d 	.word	0x08009e8d
 8009d0c:	0800c169 	.word	0x0800c169

08009d10 <__sccl>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	780b      	ldrb	r3, [r1, #0]
 8009d14:	4604      	mov	r4, r0
 8009d16:	2b5e      	cmp	r3, #94	; 0x5e
 8009d18:	bf0b      	itete	eq
 8009d1a:	784b      	ldrbeq	r3, [r1, #1]
 8009d1c:	1c48      	addne	r0, r1, #1
 8009d1e:	1c88      	addeq	r0, r1, #2
 8009d20:	2200      	movne	r2, #0
 8009d22:	bf08      	it	eq
 8009d24:	2201      	moveq	r2, #1
 8009d26:	1e61      	subs	r1, r4, #1
 8009d28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009d2c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009d30:	42a9      	cmp	r1, r5
 8009d32:	d1fb      	bne.n	8009d2c <__sccl+0x1c>
 8009d34:	b90b      	cbnz	r3, 8009d3a <__sccl+0x2a>
 8009d36:	3801      	subs	r0, #1
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	f082 0101 	eor.w	r1, r2, #1
 8009d3e:	54e1      	strb	r1, [r4, r3]
 8009d40:	1c42      	adds	r2, r0, #1
 8009d42:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009d46:	2d2d      	cmp	r5, #45	; 0x2d
 8009d48:	f102 36ff 	add.w	r6, r2, #4294967295
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	d006      	beq.n	8009d5e <__sccl+0x4e>
 8009d50:	2d5d      	cmp	r5, #93	; 0x5d
 8009d52:	d0f1      	beq.n	8009d38 <__sccl+0x28>
 8009d54:	b90d      	cbnz	r5, 8009d5a <__sccl+0x4a>
 8009d56:	4630      	mov	r0, r6
 8009d58:	e7ee      	b.n	8009d38 <__sccl+0x28>
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	e7ef      	b.n	8009d3e <__sccl+0x2e>
 8009d5e:	7816      	ldrb	r6, [r2, #0]
 8009d60:	2e5d      	cmp	r6, #93	; 0x5d
 8009d62:	d0fa      	beq.n	8009d5a <__sccl+0x4a>
 8009d64:	42b3      	cmp	r3, r6
 8009d66:	dcf8      	bgt.n	8009d5a <__sccl+0x4a>
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	4286      	cmp	r6, r0
 8009d6e:	5421      	strb	r1, [r4, r0]
 8009d70:	dcfb      	bgt.n	8009d6a <__sccl+0x5a>
 8009d72:	43d8      	mvns	r0, r3
 8009d74:	4430      	add	r0, r6
 8009d76:	1c5d      	adds	r5, r3, #1
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	bfa8      	it	ge
 8009d7c:	2000      	movge	r0, #0
 8009d7e:	182b      	adds	r3, r5, r0
 8009d80:	3202      	adds	r2, #2
 8009d82:	e7de      	b.n	8009d42 <__sccl+0x32>

08009d84 <_strtol_l.isra.0>:
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8a:	d001      	beq.n	8009d90 <_strtol_l.isra.0+0xc>
 8009d8c:	2b24      	cmp	r3, #36	; 0x24
 8009d8e:	d906      	bls.n	8009d9e <_strtol_l.isra.0+0x1a>
 8009d90:	f7ff fb00 	bl	8009394 <__errno>
 8009d94:	2316      	movs	r3, #22
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9e:	4f3a      	ldr	r7, [pc, #232]	; (8009e88 <_strtol_l.isra.0+0x104>)
 8009da0:	468e      	mov	lr, r1
 8009da2:	4676      	mov	r6, lr
 8009da4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009da8:	5de5      	ldrb	r5, [r4, r7]
 8009daa:	f015 0508 	ands.w	r5, r5, #8
 8009dae:	d1f8      	bne.n	8009da2 <_strtol_l.isra.0+0x1e>
 8009db0:	2c2d      	cmp	r4, #45	; 0x2d
 8009db2:	d134      	bne.n	8009e1e <_strtol_l.isra.0+0x9a>
 8009db4:	f89e 4000 	ldrb.w	r4, [lr]
 8009db8:	f04f 0801 	mov.w	r8, #1
 8009dbc:	f106 0e02 	add.w	lr, r6, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d05c      	beq.n	8009e7e <_strtol_l.isra.0+0xfa>
 8009dc4:	2b10      	cmp	r3, #16
 8009dc6:	d10c      	bne.n	8009de2 <_strtol_l.isra.0+0x5e>
 8009dc8:	2c30      	cmp	r4, #48	; 0x30
 8009dca:	d10a      	bne.n	8009de2 <_strtol_l.isra.0+0x5e>
 8009dcc:	f89e 4000 	ldrb.w	r4, [lr]
 8009dd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009dd4:	2c58      	cmp	r4, #88	; 0x58
 8009dd6:	d14d      	bne.n	8009e74 <_strtol_l.isra.0+0xf0>
 8009dd8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f10e 0e02 	add.w	lr, lr, #2
 8009de2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009de6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dea:	2600      	movs	r6, #0
 8009dec:	fbbc f9f3 	udiv	r9, ip, r3
 8009df0:	4635      	mov	r5, r6
 8009df2:	fb03 ca19 	mls	sl, r3, r9, ip
 8009df6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009dfa:	2f09      	cmp	r7, #9
 8009dfc:	d818      	bhi.n	8009e30 <_strtol_l.isra.0+0xac>
 8009dfe:	463c      	mov	r4, r7
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	dd24      	ble.n	8009e4e <_strtol_l.isra.0+0xca>
 8009e04:	2e00      	cmp	r6, #0
 8009e06:	db1f      	blt.n	8009e48 <_strtol_l.isra.0+0xc4>
 8009e08:	45a9      	cmp	r9, r5
 8009e0a:	d31d      	bcc.n	8009e48 <_strtol_l.isra.0+0xc4>
 8009e0c:	d101      	bne.n	8009e12 <_strtol_l.isra.0+0x8e>
 8009e0e:	45a2      	cmp	sl, r4
 8009e10:	db1a      	blt.n	8009e48 <_strtol_l.isra.0+0xc4>
 8009e12:	fb05 4503 	mla	r5, r5, r3, r4
 8009e16:	2601      	movs	r6, #1
 8009e18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009e1c:	e7eb      	b.n	8009df6 <_strtol_l.isra.0+0x72>
 8009e1e:	2c2b      	cmp	r4, #43	; 0x2b
 8009e20:	bf08      	it	eq
 8009e22:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009e26:	46a8      	mov	r8, r5
 8009e28:	bf08      	it	eq
 8009e2a:	f106 0e02 	addeq.w	lr, r6, #2
 8009e2e:	e7c7      	b.n	8009dc0 <_strtol_l.isra.0+0x3c>
 8009e30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009e34:	2f19      	cmp	r7, #25
 8009e36:	d801      	bhi.n	8009e3c <_strtol_l.isra.0+0xb8>
 8009e38:	3c37      	subs	r4, #55	; 0x37
 8009e3a:	e7e1      	b.n	8009e00 <_strtol_l.isra.0+0x7c>
 8009e3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009e40:	2f19      	cmp	r7, #25
 8009e42:	d804      	bhi.n	8009e4e <_strtol_l.isra.0+0xca>
 8009e44:	3c57      	subs	r4, #87	; 0x57
 8009e46:	e7db      	b.n	8009e00 <_strtol_l.isra.0+0x7c>
 8009e48:	f04f 36ff 	mov.w	r6, #4294967295
 8009e4c:	e7e4      	b.n	8009e18 <_strtol_l.isra.0+0x94>
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	da05      	bge.n	8009e5e <_strtol_l.isra.0+0xda>
 8009e52:	2322      	movs	r3, #34	; 0x22
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	4665      	mov	r5, ip
 8009e58:	b942      	cbnz	r2, 8009e6c <_strtol_l.isra.0+0xe8>
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	e79d      	b.n	8009d9a <_strtol_l.isra.0+0x16>
 8009e5e:	f1b8 0f00 	cmp.w	r8, #0
 8009e62:	d000      	beq.n	8009e66 <_strtol_l.isra.0+0xe2>
 8009e64:	426d      	negs	r5, r5
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	d0f7      	beq.n	8009e5a <_strtol_l.isra.0+0xd6>
 8009e6a:	b10e      	cbz	r6, 8009e70 <_strtol_l.isra.0+0xec>
 8009e6c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	e7f2      	b.n	8009e5a <_strtol_l.isra.0+0xd6>
 8009e74:	2430      	movs	r4, #48	; 0x30
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1b3      	bne.n	8009de2 <_strtol_l.isra.0+0x5e>
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	e7b1      	b.n	8009de2 <_strtol_l.isra.0+0x5e>
 8009e7e:	2c30      	cmp	r4, #48	; 0x30
 8009e80:	d0a4      	beq.n	8009dcc <_strtol_l.isra.0+0x48>
 8009e82:	230a      	movs	r3, #10
 8009e84:	e7ad      	b.n	8009de2 <_strtol_l.isra.0+0x5e>
 8009e86:	bf00      	nop
 8009e88:	0800c16c 	.word	0x0800c16c

08009e8c <_strtol_r>:
 8009e8c:	f7ff bf7a 	b.w	8009d84 <_strtol_l.isra.0>

08009e90 <_strtoul_l.isra.0>:
 8009e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e94:	4e3b      	ldr	r6, [pc, #236]	; (8009f84 <_strtoul_l.isra.0+0xf4>)
 8009e96:	4686      	mov	lr, r0
 8009e98:	468c      	mov	ip, r1
 8009e9a:	4660      	mov	r0, ip
 8009e9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ea0:	5da5      	ldrb	r5, [r4, r6]
 8009ea2:	f015 0508 	ands.w	r5, r5, #8
 8009ea6:	d1f8      	bne.n	8009e9a <_strtoul_l.isra.0+0xa>
 8009ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8009eaa:	d134      	bne.n	8009f16 <_strtoul_l.isra.0+0x86>
 8009eac:	f89c 4000 	ldrb.w	r4, [ip]
 8009eb0:	f04f 0801 	mov.w	r8, #1
 8009eb4:	f100 0c02 	add.w	ip, r0, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d05e      	beq.n	8009f7a <_strtoul_l.isra.0+0xea>
 8009ebc:	2b10      	cmp	r3, #16
 8009ebe:	d10c      	bne.n	8009eda <_strtoul_l.isra.0+0x4a>
 8009ec0:	2c30      	cmp	r4, #48	; 0x30
 8009ec2:	d10a      	bne.n	8009eda <_strtoul_l.isra.0+0x4a>
 8009ec4:	f89c 0000 	ldrb.w	r0, [ip]
 8009ec8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ecc:	2858      	cmp	r0, #88	; 0x58
 8009ece:	d14f      	bne.n	8009f70 <_strtoul_l.isra.0+0xe0>
 8009ed0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f10c 0c02 	add.w	ip, ip, #2
 8009eda:	f04f 37ff 	mov.w	r7, #4294967295
 8009ede:	2500      	movs	r5, #0
 8009ee0:	fbb7 f7f3 	udiv	r7, r7, r3
 8009ee4:	fb03 f907 	mul.w	r9, r3, r7
 8009ee8:	ea6f 0909 	mvn.w	r9, r9
 8009eec:	4628      	mov	r0, r5
 8009eee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009ef2:	2e09      	cmp	r6, #9
 8009ef4:	d818      	bhi.n	8009f28 <_strtoul_l.isra.0+0x98>
 8009ef6:	4634      	mov	r4, r6
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	dd24      	ble.n	8009f46 <_strtoul_l.isra.0+0xb6>
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	db1f      	blt.n	8009f40 <_strtoul_l.isra.0+0xb0>
 8009f00:	4287      	cmp	r7, r0
 8009f02:	d31d      	bcc.n	8009f40 <_strtoul_l.isra.0+0xb0>
 8009f04:	d101      	bne.n	8009f0a <_strtoul_l.isra.0+0x7a>
 8009f06:	45a1      	cmp	r9, r4
 8009f08:	db1a      	blt.n	8009f40 <_strtoul_l.isra.0+0xb0>
 8009f0a:	fb00 4003 	mla	r0, r0, r3, r4
 8009f0e:	2501      	movs	r5, #1
 8009f10:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f14:	e7eb      	b.n	8009eee <_strtoul_l.isra.0+0x5e>
 8009f16:	2c2b      	cmp	r4, #43	; 0x2b
 8009f18:	bf08      	it	eq
 8009f1a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009f1e:	46a8      	mov	r8, r5
 8009f20:	bf08      	it	eq
 8009f22:	f100 0c02 	addeq.w	ip, r0, #2
 8009f26:	e7c7      	b.n	8009eb8 <_strtoul_l.isra.0+0x28>
 8009f28:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009f2c:	2e19      	cmp	r6, #25
 8009f2e:	d801      	bhi.n	8009f34 <_strtoul_l.isra.0+0xa4>
 8009f30:	3c37      	subs	r4, #55	; 0x37
 8009f32:	e7e1      	b.n	8009ef8 <_strtoul_l.isra.0+0x68>
 8009f34:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009f38:	2e19      	cmp	r6, #25
 8009f3a:	d804      	bhi.n	8009f46 <_strtoul_l.isra.0+0xb6>
 8009f3c:	3c57      	subs	r4, #87	; 0x57
 8009f3e:	e7db      	b.n	8009ef8 <_strtoul_l.isra.0+0x68>
 8009f40:	f04f 35ff 	mov.w	r5, #4294967295
 8009f44:	e7e4      	b.n	8009f10 <_strtoul_l.isra.0+0x80>
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	da07      	bge.n	8009f5a <_strtoul_l.isra.0+0xca>
 8009f4a:	2322      	movs	r3, #34	; 0x22
 8009f4c:	f8ce 3000 	str.w	r3, [lr]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	b942      	cbnz	r2, 8009f68 <_strtoul_l.isra.0+0xd8>
 8009f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f5a:	f1b8 0f00 	cmp.w	r8, #0
 8009f5e:	d000      	beq.n	8009f62 <_strtoul_l.isra.0+0xd2>
 8009f60:	4240      	negs	r0, r0
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d0f7      	beq.n	8009f56 <_strtoul_l.isra.0+0xc6>
 8009f66:	b10d      	cbz	r5, 8009f6c <_strtoul_l.isra.0+0xdc>
 8009f68:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009f6c:	6011      	str	r1, [r2, #0]
 8009f6e:	e7f2      	b.n	8009f56 <_strtoul_l.isra.0+0xc6>
 8009f70:	2430      	movs	r4, #48	; 0x30
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1b1      	bne.n	8009eda <_strtoul_l.isra.0+0x4a>
 8009f76:	2308      	movs	r3, #8
 8009f78:	e7af      	b.n	8009eda <_strtoul_l.isra.0+0x4a>
 8009f7a:	2c30      	cmp	r4, #48	; 0x30
 8009f7c:	d0a2      	beq.n	8009ec4 <_strtoul_l.isra.0+0x34>
 8009f7e:	230a      	movs	r3, #10
 8009f80:	e7ab      	b.n	8009eda <_strtoul_l.isra.0+0x4a>
 8009f82:	bf00      	nop
 8009f84:	0800c16c 	.word	0x0800c16c

08009f88 <_strtoul_r>:
 8009f88:	f7ff bf82 	b.w	8009e90 <_strtoul_l.isra.0>

08009f8c <__submore>:
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	460c      	mov	r4, r1
 8009f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f98:	4299      	cmp	r1, r3
 8009f9a:	d11d      	bne.n	8009fd8 <__submore+0x4c>
 8009f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fa0:	f7ff fa3a 	bl	8009418 <_malloc_r>
 8009fa4:	b918      	cbnz	r0, 8009fae <__submore+0x22>
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8009fba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009fbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009fc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009fc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009fca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009fce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009fd2:	6020      	str	r0, [r4, #0]
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e7e8      	b.n	8009faa <__submore+0x1e>
 8009fd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009fda:	0077      	lsls	r7, r6, #1
 8009fdc:	463a      	mov	r2, r7
 8009fde:	f000 f80f 	bl	800a000 <_realloc_r>
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d0de      	beq.n	8009fa6 <__submore+0x1a>
 8009fe8:	eb00 0806 	add.w	r8, r0, r6
 8009fec:	4601      	mov	r1, r0
 8009fee:	4632      	mov	r2, r6
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	f7ff f9fb 	bl	80093ec <memcpy>
 8009ff6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009ffa:	f8c4 8000 	str.w	r8, [r4]
 8009ffe:	e7e9      	b.n	8009fd4 <__submore+0x48>

0800a000 <_realloc_r>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	4607      	mov	r7, r0
 800a004:	4614      	mov	r4, r2
 800a006:	460e      	mov	r6, r1
 800a008:	b921      	cbnz	r1, 800a014 <_realloc_r+0x14>
 800a00a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a00e:	4611      	mov	r1, r2
 800a010:	f7ff ba02 	b.w	8009418 <_malloc_r>
 800a014:	b922      	cbnz	r2, 800a020 <_realloc_r+0x20>
 800a016:	f7ff fb0d 	bl	8009634 <_free_r>
 800a01a:	4625      	mov	r5, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a020:	f000 f814 	bl	800a04c <_malloc_usable_size_r>
 800a024:	42a0      	cmp	r0, r4
 800a026:	d20f      	bcs.n	800a048 <_realloc_r+0x48>
 800a028:	4621      	mov	r1, r4
 800a02a:	4638      	mov	r0, r7
 800a02c:	f7ff f9f4 	bl	8009418 <_malloc_r>
 800a030:	4605      	mov	r5, r0
 800a032:	2800      	cmp	r0, #0
 800a034:	d0f2      	beq.n	800a01c <_realloc_r+0x1c>
 800a036:	4631      	mov	r1, r6
 800a038:	4622      	mov	r2, r4
 800a03a:	f7ff f9d7 	bl	80093ec <memcpy>
 800a03e:	4631      	mov	r1, r6
 800a040:	4638      	mov	r0, r7
 800a042:	f7ff faf7 	bl	8009634 <_free_r>
 800a046:	e7e9      	b.n	800a01c <_realloc_r+0x1c>
 800a048:	4635      	mov	r5, r6
 800a04a:	e7e7      	b.n	800a01c <_realloc_r+0x1c>

0800a04c <_malloc_usable_size_r>:
 800a04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a050:	1f18      	subs	r0, r3, #4
 800a052:	2b00      	cmp	r3, #0
 800a054:	bfbc      	itt	lt
 800a056:	580b      	ldrlt	r3, [r1, r0]
 800a058:	18c0      	addlt	r0, r0, r3
 800a05a:	4770      	bx	lr
 800a05c:	0000      	movs	r0, r0
	...

0800a060 <cos>:
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a062:	ec53 2b10 	vmov	r2, r3, d0
 800a066:	4824      	ldr	r0, [pc, #144]	; (800a0f8 <cos+0x98>)
 800a068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a06c:	4281      	cmp	r1, r0
 800a06e:	dc06      	bgt.n	800a07e <cos+0x1e>
 800a070:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a0f0 <cos+0x90>
 800a074:	f001 f960 	bl	800b338 <__kernel_cos>
 800a078:	ec51 0b10 	vmov	r0, r1, d0
 800a07c:	e007      	b.n	800a08e <cos+0x2e>
 800a07e:	481f      	ldr	r0, [pc, #124]	; (800a0fc <cos+0x9c>)
 800a080:	4281      	cmp	r1, r0
 800a082:	dd09      	ble.n	800a098 <cos+0x38>
 800a084:	ee10 0a10 	vmov	r0, s0
 800a088:	4619      	mov	r1, r3
 800a08a:	f7f6 f8fd 	bl	8000288 <__aeabi_dsub>
 800a08e:	ec41 0b10 	vmov	d0, r0, r1
 800a092:	b005      	add	sp, #20
 800a094:	f85d fb04 	ldr.w	pc, [sp], #4
 800a098:	4668      	mov	r0, sp
 800a09a:	f000 fe8d 	bl	800adb8 <__ieee754_rem_pio2>
 800a09e:	f000 0003 	and.w	r0, r0, #3
 800a0a2:	2801      	cmp	r0, #1
 800a0a4:	d007      	beq.n	800a0b6 <cos+0x56>
 800a0a6:	2802      	cmp	r0, #2
 800a0a8:	d012      	beq.n	800a0d0 <cos+0x70>
 800a0aa:	b9c0      	cbnz	r0, 800a0de <cos+0x7e>
 800a0ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0b0:	ed9d 0b00 	vldr	d0, [sp]
 800a0b4:	e7de      	b.n	800a074 <cos+0x14>
 800a0b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ba:	ed9d 0b00 	vldr	d0, [sp]
 800a0be:	f001 fd43 	bl	800bb48 <__kernel_sin>
 800a0c2:	ec53 2b10 	vmov	r2, r3, d0
 800a0c6:	ee10 0a10 	vmov	r0, s0
 800a0ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a0ce:	e7de      	b.n	800a08e <cos+0x2e>
 800a0d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0d4:	ed9d 0b00 	vldr	d0, [sp]
 800a0d8:	f001 f92e 	bl	800b338 <__kernel_cos>
 800a0dc:	e7f1      	b.n	800a0c2 <cos+0x62>
 800a0de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0e2:	ed9d 0b00 	vldr	d0, [sp]
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	f001 fd2e 	bl	800bb48 <__kernel_sin>
 800a0ec:	e7c4      	b.n	800a078 <cos+0x18>
 800a0ee:	bf00      	nop
	...
 800a0f8:	3fe921fb 	.word	0x3fe921fb
 800a0fc:	7fefffff 	.word	0x7fefffff

0800a100 <sin>:
 800a100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a102:	ec53 2b10 	vmov	r2, r3, d0
 800a106:	4826      	ldr	r0, [pc, #152]	; (800a1a0 <sin+0xa0>)
 800a108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a10c:	4281      	cmp	r1, r0
 800a10e:	dc07      	bgt.n	800a120 <sin+0x20>
 800a110:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a198 <sin+0x98>
 800a114:	2000      	movs	r0, #0
 800a116:	f001 fd17 	bl	800bb48 <__kernel_sin>
 800a11a:	ec51 0b10 	vmov	r0, r1, d0
 800a11e:	e007      	b.n	800a130 <sin+0x30>
 800a120:	4820      	ldr	r0, [pc, #128]	; (800a1a4 <sin+0xa4>)
 800a122:	4281      	cmp	r1, r0
 800a124:	dd09      	ble.n	800a13a <sin+0x3a>
 800a126:	ee10 0a10 	vmov	r0, s0
 800a12a:	4619      	mov	r1, r3
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	ec41 0b10 	vmov	d0, r0, r1
 800a134:	b005      	add	sp, #20
 800a136:	f85d fb04 	ldr.w	pc, [sp], #4
 800a13a:	4668      	mov	r0, sp
 800a13c:	f000 fe3c 	bl	800adb8 <__ieee754_rem_pio2>
 800a140:	f000 0003 	and.w	r0, r0, #3
 800a144:	2801      	cmp	r0, #1
 800a146:	d008      	beq.n	800a15a <sin+0x5a>
 800a148:	2802      	cmp	r0, #2
 800a14a:	d00d      	beq.n	800a168 <sin+0x68>
 800a14c:	b9d0      	cbnz	r0, 800a184 <sin+0x84>
 800a14e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a152:	ed9d 0b00 	vldr	d0, [sp]
 800a156:	2001      	movs	r0, #1
 800a158:	e7dd      	b.n	800a116 <sin+0x16>
 800a15a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a15e:	ed9d 0b00 	vldr	d0, [sp]
 800a162:	f001 f8e9 	bl	800b338 <__kernel_cos>
 800a166:	e7d8      	b.n	800a11a <sin+0x1a>
 800a168:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a16c:	ed9d 0b00 	vldr	d0, [sp]
 800a170:	2001      	movs	r0, #1
 800a172:	f001 fce9 	bl	800bb48 <__kernel_sin>
 800a176:	ec53 2b10 	vmov	r2, r3, d0
 800a17a:	ee10 0a10 	vmov	r0, s0
 800a17e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a182:	e7d5      	b.n	800a130 <sin+0x30>
 800a184:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a188:	ed9d 0b00 	vldr	d0, [sp]
 800a18c:	f001 f8d4 	bl	800b338 <__kernel_cos>
 800a190:	e7f1      	b.n	800a176 <sin+0x76>
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
	...
 800a1a0:	3fe921fb 	.word	0x3fe921fb
 800a1a4:	7fefffff 	.word	0x7fefffff

0800a1a8 <pow>:
 800a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	ec59 8b10 	vmov	r8, r9, d0
 800a1b0:	ec57 6b11 	vmov	r6, r7, d1
 800a1b4:	f000 f8dc 	bl	800a370 <__ieee754_pow>
 800a1b8:	4b4e      	ldr	r3, [pc, #312]	; (800a2f4 <pow+0x14c>)
 800a1ba:	f993 3000 	ldrsb.w	r3, [r3]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	ec55 4b10 	vmov	r4, r5, d0
 800a1c4:	d015      	beq.n	800a1f2 <pow+0x4a>
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 fcad 	bl	8000b2c <__aeabi_dcmpun>
 800a1d2:	b970      	cbnz	r0, 800a1f2 <pow+0x4a>
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	464b      	mov	r3, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	4649      	mov	r1, r9
 800a1dc:	f7f6 fca6 	bl	8000b2c <__aeabi_dcmpun>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	b148      	cbz	r0, 800a1fa <pow+0x52>
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d17d      	bne.n	800a2ee <pow+0x146>
 800a1f2:	ec45 4b10 	vmov	d0, r4, r5
 800a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	f7f6 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800a202:	b1e0      	cbz	r0, 800a23e <pow+0x96>
 800a204:	2200      	movs	r2, #0
 800a206:	2300      	movs	r3, #0
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a210:	2800      	cmp	r0, #0
 800a212:	d16c      	bne.n	800a2ee <pow+0x146>
 800a214:	ec47 6b10 	vmov	d0, r6, r7
 800a218:	f001 fd5d 	bl	800bcd6 <finite>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0e8      	beq.n	800a1f2 <pow+0x4a>
 800a220:	2200      	movs	r2, #0
 800a222:	2300      	movs	r3, #0
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f6 fc58 	bl	8000adc <__aeabi_dcmplt>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d0e0      	beq.n	800a1f2 <pow+0x4a>
 800a230:	f7ff f8b0 	bl	8009394 <__errno>
 800a234:	2321      	movs	r3, #33	; 0x21
 800a236:	6003      	str	r3, [r0, #0]
 800a238:	2400      	movs	r4, #0
 800a23a:	4d2f      	ldr	r5, [pc, #188]	; (800a2f8 <pow+0x150>)
 800a23c:	e7d9      	b.n	800a1f2 <pow+0x4a>
 800a23e:	ec45 4b10 	vmov	d0, r4, r5
 800a242:	f001 fd48 	bl	800bcd6 <finite>
 800a246:	bbb8      	cbnz	r0, 800a2b8 <pow+0x110>
 800a248:	ec49 8b10 	vmov	d0, r8, r9
 800a24c:	f001 fd43 	bl	800bcd6 <finite>
 800a250:	b390      	cbz	r0, 800a2b8 <pow+0x110>
 800a252:	ec47 6b10 	vmov	d0, r6, r7
 800a256:	f001 fd3e 	bl	800bcd6 <finite>
 800a25a:	b368      	cbz	r0, 800a2b8 <pow+0x110>
 800a25c:	4622      	mov	r2, r4
 800a25e:	462b      	mov	r3, r5
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 fc62 	bl	8000b2c <__aeabi_dcmpun>
 800a268:	b160      	cbz	r0, 800a284 <pow+0xdc>
 800a26a:	f7ff f893 	bl	8009394 <__errno>
 800a26e:	2321      	movs	r3, #33	; 0x21
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	2300      	movs	r3, #0
 800a276:	4610      	mov	r0, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	f7f6 fae7 	bl	800084c <__aeabi_ddiv>
 800a27e:	4604      	mov	r4, r0
 800a280:	460d      	mov	r5, r1
 800a282:	e7b6      	b.n	800a1f2 <pow+0x4a>
 800a284:	f7ff f886 	bl	8009394 <__errno>
 800a288:	2322      	movs	r3, #34	; 0x22
 800a28a:	6003      	str	r3, [r0, #0]
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 fc22 	bl	8000adc <__aeabi_dcmplt>
 800a298:	2400      	movs	r4, #0
 800a29a:	b158      	cbz	r0, 800a2b4 <pow+0x10c>
 800a29c:	ec47 6b10 	vmov	d0, r6, r7
 800a2a0:	f001 fdae 	bl	800be00 <rint>
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	ec51 0b10 	vmov	r0, r1, d0
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	f7f6 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0c2      	beq.n	800a23a <pow+0x92>
 800a2b4:	4d11      	ldr	r5, [pc, #68]	; (800a2fc <pow+0x154>)
 800a2b6:	e79c      	b.n	800a1f2 <pow+0x4a>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4629      	mov	r1, r5
 800a2c0:	f7f6 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d094      	beq.n	800a1f2 <pow+0x4a>
 800a2c8:	ec49 8b10 	vmov	d0, r8, r9
 800a2cc:	f001 fd03 	bl	800bcd6 <finite>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d08e      	beq.n	800a1f2 <pow+0x4a>
 800a2d4:	ec47 6b10 	vmov	d0, r6, r7
 800a2d8:	f001 fcfd 	bl	800bcd6 <finite>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d088      	beq.n	800a1f2 <pow+0x4a>
 800a2e0:	f7ff f858 	bl	8009394 <__errno>
 800a2e4:	2322      	movs	r3, #34	; 0x22
 800a2e6:	6003      	str	r3, [r0, #0]
 800a2e8:	2400      	movs	r4, #0
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	e781      	b.n	800a1f2 <pow+0x4a>
 800a2ee:	4d04      	ldr	r5, [pc, #16]	; (800a300 <pow+0x158>)
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	e77e      	b.n	800a1f2 <pow+0x4a>
 800a2f4:	20000098 	.word	0x20000098
 800a2f8:	fff00000 	.word	0xfff00000
 800a2fc:	7ff00000 	.word	0x7ff00000
 800a300:	3ff00000 	.word	0x3ff00000

0800a304 <sqrt>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	ed2d 8b02 	vpush	{d8}
 800a30a:	ec55 4b10 	vmov	r4, r5, d0
 800a30e:	f000 ff5d 	bl	800b1cc <__ieee754_sqrt>
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <sqrt+0x64>)
 800a314:	eeb0 8a40 	vmov.f32	s16, s0
 800a318:	eef0 8a60 	vmov.f32	s17, s1
 800a31c:	f993 3000 	ldrsb.w	r3, [r3]
 800a320:	3301      	adds	r3, #1
 800a322:	d019      	beq.n	800a358 <sqrt+0x54>
 800a324:	4622      	mov	r2, r4
 800a326:	462b      	mov	r3, r5
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f6 fbfe 	bl	8000b2c <__aeabi_dcmpun>
 800a330:	b990      	cbnz	r0, 800a358 <sqrt+0x54>
 800a332:	2200      	movs	r2, #0
 800a334:	2300      	movs	r3, #0
 800a336:	4620      	mov	r0, r4
 800a338:	4629      	mov	r1, r5
 800a33a:	f7f6 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800a33e:	b158      	cbz	r0, 800a358 <sqrt+0x54>
 800a340:	f7ff f828 	bl	8009394 <__errno>
 800a344:	2321      	movs	r3, #33	; 0x21
 800a346:	6003      	str	r3, [r0, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	2300      	movs	r3, #0
 800a34c:	4610      	mov	r0, r2
 800a34e:	4619      	mov	r1, r3
 800a350:	f7f6 fa7c 	bl	800084c <__aeabi_ddiv>
 800a354:	ec41 0b18 	vmov	d8, r0, r1
 800a358:	eeb0 0a48 	vmov.f32	s0, s16
 800a35c:	eef0 0a68 	vmov.f32	s1, s17
 800a360:	ecbd 8b02 	vpop	{d8}
 800a364:	bd38      	pop	{r3, r4, r5, pc}
 800a366:	bf00      	nop
 800a368:	20000098 	.word	0x20000098
 800a36c:	00000000 	.word	0x00000000

0800a370 <__ieee754_pow>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ed2d 8b06 	vpush	{d8-d10}
 800a378:	b08d      	sub	sp, #52	; 0x34
 800a37a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a37e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800a382:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a386:	ea56 0100 	orrs.w	r1, r6, r0
 800a38a:	ec53 2b10 	vmov	r2, r3, d0
 800a38e:	f000 84d1 	beq.w	800ad34 <__ieee754_pow+0x9c4>
 800a392:	497f      	ldr	r1, [pc, #508]	; (800a590 <__ieee754_pow+0x220>)
 800a394:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a398:	428c      	cmp	r4, r1
 800a39a:	ee10 8a10 	vmov	r8, s0
 800a39e:	4699      	mov	r9, r3
 800a3a0:	dc09      	bgt.n	800a3b6 <__ieee754_pow+0x46>
 800a3a2:	d103      	bne.n	800a3ac <__ieee754_pow+0x3c>
 800a3a4:	b97a      	cbnz	r2, 800a3c6 <__ieee754_pow+0x56>
 800a3a6:	42a6      	cmp	r6, r4
 800a3a8:	dd02      	ble.n	800a3b0 <__ieee754_pow+0x40>
 800a3aa:	e00c      	b.n	800a3c6 <__ieee754_pow+0x56>
 800a3ac:	428e      	cmp	r6, r1
 800a3ae:	dc02      	bgt.n	800a3b6 <__ieee754_pow+0x46>
 800a3b0:	428e      	cmp	r6, r1
 800a3b2:	d110      	bne.n	800a3d6 <__ieee754_pow+0x66>
 800a3b4:	b178      	cbz	r0, 800a3d6 <__ieee754_pow+0x66>
 800a3b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3be:	ea54 0308 	orrs.w	r3, r4, r8
 800a3c2:	f000 84b7 	beq.w	800ad34 <__ieee754_pow+0x9c4>
 800a3c6:	4873      	ldr	r0, [pc, #460]	; (800a594 <__ieee754_pow+0x224>)
 800a3c8:	b00d      	add	sp, #52	; 0x34
 800a3ca:	ecbd 8b06 	vpop	{d8-d10}
 800a3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d2:	f001 bd0d 	b.w	800bdf0 <nan>
 800a3d6:	f1b9 0f00 	cmp.w	r9, #0
 800a3da:	da36      	bge.n	800a44a <__ieee754_pow+0xda>
 800a3dc:	496e      	ldr	r1, [pc, #440]	; (800a598 <__ieee754_pow+0x228>)
 800a3de:	428e      	cmp	r6, r1
 800a3e0:	dc51      	bgt.n	800a486 <__ieee754_pow+0x116>
 800a3e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800a3e6:	428e      	cmp	r6, r1
 800a3e8:	f340 84af 	ble.w	800ad4a <__ieee754_pow+0x9da>
 800a3ec:	1531      	asrs	r1, r6, #20
 800a3ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a3f2:	2914      	cmp	r1, #20
 800a3f4:	dd0f      	ble.n	800a416 <__ieee754_pow+0xa6>
 800a3f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800a3fa:	fa20 fc01 	lsr.w	ip, r0, r1
 800a3fe:	fa0c f101 	lsl.w	r1, ip, r1
 800a402:	4281      	cmp	r1, r0
 800a404:	f040 84a1 	bne.w	800ad4a <__ieee754_pow+0x9da>
 800a408:	f00c 0c01 	and.w	ip, ip, #1
 800a40c:	f1cc 0102 	rsb	r1, ip, #2
 800a410:	9100      	str	r1, [sp, #0]
 800a412:	b180      	cbz	r0, 800a436 <__ieee754_pow+0xc6>
 800a414:	e059      	b.n	800a4ca <__ieee754_pow+0x15a>
 800a416:	2800      	cmp	r0, #0
 800a418:	d155      	bne.n	800a4c6 <__ieee754_pow+0x156>
 800a41a:	f1c1 0114 	rsb	r1, r1, #20
 800a41e:	fa46 fc01 	asr.w	ip, r6, r1
 800a422:	fa0c f101 	lsl.w	r1, ip, r1
 800a426:	42b1      	cmp	r1, r6
 800a428:	f040 848c 	bne.w	800ad44 <__ieee754_pow+0x9d4>
 800a42c:	f00c 0c01 	and.w	ip, ip, #1
 800a430:	f1cc 0102 	rsb	r1, ip, #2
 800a434:	9100      	str	r1, [sp, #0]
 800a436:	4959      	ldr	r1, [pc, #356]	; (800a59c <__ieee754_pow+0x22c>)
 800a438:	428e      	cmp	r6, r1
 800a43a:	d12d      	bne.n	800a498 <__ieee754_pow+0x128>
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	da79      	bge.n	800a534 <__ieee754_pow+0x1c4>
 800a440:	4956      	ldr	r1, [pc, #344]	; (800a59c <__ieee754_pow+0x22c>)
 800a442:	2000      	movs	r0, #0
 800a444:	f7f6 fa02 	bl	800084c <__aeabi_ddiv>
 800a448:	e016      	b.n	800a478 <__ieee754_pow+0x108>
 800a44a:	2100      	movs	r1, #0
 800a44c:	9100      	str	r1, [sp, #0]
 800a44e:	2800      	cmp	r0, #0
 800a450:	d13b      	bne.n	800a4ca <__ieee754_pow+0x15a>
 800a452:	494f      	ldr	r1, [pc, #316]	; (800a590 <__ieee754_pow+0x220>)
 800a454:	428e      	cmp	r6, r1
 800a456:	d1ee      	bne.n	800a436 <__ieee754_pow+0xc6>
 800a458:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a45c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a460:	ea53 0308 	orrs.w	r3, r3, r8
 800a464:	f000 8466 	beq.w	800ad34 <__ieee754_pow+0x9c4>
 800a468:	4b4d      	ldr	r3, [pc, #308]	; (800a5a0 <__ieee754_pow+0x230>)
 800a46a:	429c      	cmp	r4, r3
 800a46c:	dd0d      	ble.n	800a48a <__ieee754_pow+0x11a>
 800a46e:	2f00      	cmp	r7, #0
 800a470:	f280 8464 	bge.w	800ad3c <__ieee754_pow+0x9cc>
 800a474:	2000      	movs	r0, #0
 800a476:	2100      	movs	r1, #0
 800a478:	ec41 0b10 	vmov	d0, r0, r1
 800a47c:	b00d      	add	sp, #52	; 0x34
 800a47e:	ecbd 8b06 	vpop	{d8-d10}
 800a482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a486:	2102      	movs	r1, #2
 800a488:	e7e0      	b.n	800a44c <__ieee754_pow+0xdc>
 800a48a:	2f00      	cmp	r7, #0
 800a48c:	daf2      	bge.n	800a474 <__ieee754_pow+0x104>
 800a48e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800a492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a496:	e7ef      	b.n	800a478 <__ieee754_pow+0x108>
 800a498:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a49c:	d104      	bne.n	800a4a8 <__ieee754_pow+0x138>
 800a49e:	4610      	mov	r0, r2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f7f6 f8a9 	bl	80005f8 <__aeabi_dmul>
 800a4a6:	e7e7      	b.n	800a478 <__ieee754_pow+0x108>
 800a4a8:	493e      	ldr	r1, [pc, #248]	; (800a5a4 <__ieee754_pow+0x234>)
 800a4aa:	428f      	cmp	r7, r1
 800a4ac:	d10d      	bne.n	800a4ca <__ieee754_pow+0x15a>
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	db0a      	blt.n	800a4ca <__ieee754_pow+0x15a>
 800a4b4:	ec43 2b10 	vmov	d0, r2, r3
 800a4b8:	b00d      	add	sp, #52	; 0x34
 800a4ba:	ecbd 8b06 	vpop	{d8-d10}
 800a4be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c2:	f000 be83 	b.w	800b1cc <__ieee754_sqrt>
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	9100      	str	r1, [sp, #0]
 800a4ca:	ec43 2b10 	vmov	d0, r2, r3
 800a4ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4d2:	f001 fbf7 	bl	800bcc4 <fabs>
 800a4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4da:	ec51 0b10 	vmov	r0, r1, d0
 800a4de:	f1b8 0f00 	cmp.w	r8, #0
 800a4e2:	d12a      	bne.n	800a53a <__ieee754_pow+0x1ca>
 800a4e4:	b12c      	cbz	r4, 800a4f2 <__ieee754_pow+0x182>
 800a4e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800a59c <__ieee754_pow+0x22c>
 800a4ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800a4ee:	45e6      	cmp	lr, ip
 800a4f0:	d123      	bne.n	800a53a <__ieee754_pow+0x1ca>
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	da05      	bge.n	800a502 <__ieee754_pow+0x192>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4927      	ldr	r1, [pc, #156]	; (800a59c <__ieee754_pow+0x22c>)
 800a4fe:	f7f6 f9a5 	bl	800084c <__aeabi_ddiv>
 800a502:	f1b9 0f00 	cmp.w	r9, #0
 800a506:	dab7      	bge.n	800a478 <__ieee754_pow+0x108>
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a50e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a512:	4323      	orrs	r3, r4
 800a514:	d108      	bne.n	800a528 <__ieee754_pow+0x1b8>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	f7f5 feb3 	bl	8000288 <__aeabi_dsub>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	e78d      	b.n	800a444 <__ieee754_pow+0xd4>
 800a528:	9b00      	ldr	r3, [sp, #0]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d1a4      	bne.n	800a478 <__ieee754_pow+0x108>
 800a52e:	4602      	mov	r2, r0
 800a530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a534:	4610      	mov	r0, r2
 800a536:	4619      	mov	r1, r3
 800a538:	e79e      	b.n	800a478 <__ieee754_pow+0x108>
 800a53a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800a53e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800a542:	950a      	str	r5, [sp, #40]	; 0x28
 800a544:	9d00      	ldr	r5, [sp, #0]
 800a546:	46ac      	mov	ip, r5
 800a548:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a54a:	ea5c 0505 	orrs.w	r5, ip, r5
 800a54e:	d0e4      	beq.n	800a51a <__ieee754_pow+0x1aa>
 800a550:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <__ieee754_pow+0x238>)
 800a552:	429e      	cmp	r6, r3
 800a554:	f340 80fc 	ble.w	800a750 <__ieee754_pow+0x3e0>
 800a558:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a55c:	429e      	cmp	r6, r3
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <__ieee754_pow+0x230>)
 800a560:	dd07      	ble.n	800a572 <__ieee754_pow+0x202>
 800a562:	429c      	cmp	r4, r3
 800a564:	dc0a      	bgt.n	800a57c <__ieee754_pow+0x20c>
 800a566:	2f00      	cmp	r7, #0
 800a568:	da84      	bge.n	800a474 <__ieee754_pow+0x104>
 800a56a:	a307      	add	r3, pc, #28	; (adr r3, 800a588 <__ieee754_pow+0x218>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	e795      	b.n	800a49e <__ieee754_pow+0x12e>
 800a572:	429c      	cmp	r4, r3
 800a574:	dbf7      	blt.n	800a566 <__ieee754_pow+0x1f6>
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <__ieee754_pow+0x22c>)
 800a578:	429c      	cmp	r4, r3
 800a57a:	dd17      	ble.n	800a5ac <__ieee754_pow+0x23c>
 800a57c:	2f00      	cmp	r7, #0
 800a57e:	dcf4      	bgt.n	800a56a <__ieee754_pow+0x1fa>
 800a580:	e778      	b.n	800a474 <__ieee754_pow+0x104>
 800a582:	bf00      	nop
 800a584:	f3af 8000 	nop.w
 800a588:	8800759c 	.word	0x8800759c
 800a58c:	7e37e43c 	.word	0x7e37e43c
 800a590:	7ff00000 	.word	0x7ff00000
 800a594:	0800c152 	.word	0x0800c152
 800a598:	433fffff 	.word	0x433fffff
 800a59c:	3ff00000 	.word	0x3ff00000
 800a5a0:	3fefffff 	.word	0x3fefffff
 800a5a4:	3fe00000 	.word	0x3fe00000
 800a5a8:	41e00000 	.word	0x41e00000
 800a5ac:	4b64      	ldr	r3, [pc, #400]	; (800a740 <__ieee754_pow+0x3d0>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7f5 fe6a 	bl	8000288 <__aeabi_dsub>
 800a5b4:	a356      	add	r3, pc, #344	; (adr r3, 800a710 <__ieee754_pow+0x3a0>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	460d      	mov	r5, r1
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	a355      	add	r3, pc, #340	; (adr r3, 800a718 <__ieee754_pow+0x3a8>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	460f      	mov	r7, r1
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f7f6 f812 	bl	80005f8 <__aeabi_dmul>
 800a5d4:	4b5b      	ldr	r3, [pc, #364]	; (800a744 <__ieee754_pow+0x3d4>)
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	468b      	mov	fp, r1
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f6 f80a 	bl	80005f8 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	a14d      	add	r1, pc, #308	; (adr r1, 800a720 <__ieee754_pow+0x3b0>)
 800a5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ee:	f7f5 fe4b 	bl	8000288 <__aeabi_dsub>
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	462b      	mov	r3, r5
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	2000      	movs	r0, #0
 800a600:	4951      	ldr	r1, [pc, #324]	; (800a748 <__ieee754_pow+0x3d8>)
 800a602:	f7f5 fe41 	bl	8000288 <__aeabi_dsub>
 800a606:	4622      	mov	r2, r4
 800a608:	4680      	mov	r8, r0
 800a60a:	4689      	mov	r9, r1
 800a60c:	462b      	mov	r3, r5
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4640      	mov	r0, r8
 800a61c:	4649      	mov	r1, r9
 800a61e:	f7f5 ffeb 	bl	80005f8 <__aeabi_dmul>
 800a622:	a341      	add	r3, pc, #260	; (adr r3, 800a728 <__ieee754_pow+0x3b8>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4650      	mov	r0, sl
 800a632:	4659      	mov	r1, fp
 800a634:	f7f5 fe28 	bl	8000288 <__aeabi_dsub>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f5 fe22 	bl	800028c <__adddf3>
 800a648:	2400      	movs	r4, #0
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4620      	mov	r0, r4
 800a650:	460d      	mov	r5, r1
 800a652:	f7f5 fe19 	bl	8000288 <__aeabi_dsub>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 fe13 	bl	8000288 <__aeabi_dsub>
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a666:	3b01      	subs	r3, #1
 800a668:	4313      	orrs	r3, r2
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	f040 81f1 	bne.w	800aa54 <__ieee754_pow+0x6e4>
 800a672:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a730 <__ieee754_pow+0x3c0>
 800a676:	eeb0 8a47 	vmov.f32	s16, s14
 800a67a:	eef0 8a67 	vmov.f32	s17, s15
 800a67e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a682:	2600      	movs	r6, #0
 800a684:	4632      	mov	r2, r6
 800a686:	463b      	mov	r3, r7
 800a688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68c:	f7f5 fdfc 	bl	8000288 <__aeabi_dsub>
 800a690:	4622      	mov	r2, r4
 800a692:	462b      	mov	r3, r5
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a69c:	4680      	mov	r8, r0
 800a69e:	4689      	mov	r9, r1
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	f7f5 ffa8 	bl	80005f8 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7f5 fdec 	bl	800028c <__adddf3>
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	4689      	mov	r9, r1
 800a6bc:	4620      	mov	r0, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7f5 fddc 	bl	800028c <__adddf3>
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	; (800a74c <__ieee754_pow+0x3dc>)
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	ec45 4b19 	vmov	d9, r4, r5
 800a6dc:	4606      	mov	r6, r0
 800a6de:	460f      	mov	r7, r1
 800a6e0:	468b      	mov	fp, r1
 800a6e2:	f340 82fe 	ble.w	800ace2 <__ieee754_pow+0x972>
 800a6e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a6ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a6ee:	4303      	orrs	r3, r0
 800a6f0:	f000 81f0 	beq.w	800aad4 <__ieee754_pow+0x764>
 800a6f4:	a310      	add	r3, pc, #64	; (adr r3, 800a738 <__ieee754_pow+0x3c8>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	ec51 0b18 	vmov	r0, r1, d8
 800a6fe:	f7f5 ff7b 	bl	80005f8 <__aeabi_dmul>
 800a702:	a30d      	add	r3, pc, #52	; (adr r3, 800a738 <__ieee754_pow+0x3c8>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	e6cb      	b.n	800a4a2 <__ieee754_pow+0x132>
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w
 800a710:	60000000 	.word	0x60000000
 800a714:	3ff71547 	.word	0x3ff71547
 800a718:	f85ddf44 	.word	0xf85ddf44
 800a71c:	3e54ae0b 	.word	0x3e54ae0b
 800a720:	55555555 	.word	0x55555555
 800a724:	3fd55555 	.word	0x3fd55555
 800a728:	652b82fe 	.word	0x652b82fe
 800a72c:	3ff71547 	.word	0x3ff71547
 800a730:	00000000 	.word	0x00000000
 800a734:	bff00000 	.word	0xbff00000
 800a738:	8800759c 	.word	0x8800759c
 800a73c:	7e37e43c 	.word	0x7e37e43c
 800a740:	3ff00000 	.word	0x3ff00000
 800a744:	3fd00000 	.word	0x3fd00000
 800a748:	3fe00000 	.word	0x3fe00000
 800a74c:	408fffff 	.word	0x408fffff
 800a750:	4bd7      	ldr	r3, [pc, #860]	; (800aab0 <__ieee754_pow+0x740>)
 800a752:	ea03 0309 	and.w	r3, r3, r9
 800a756:	2200      	movs	r2, #0
 800a758:	b92b      	cbnz	r3, 800a766 <__ieee754_pow+0x3f6>
 800a75a:	4bd6      	ldr	r3, [pc, #856]	; (800aab4 <__ieee754_pow+0x744>)
 800a75c:	f7f5 ff4c 	bl	80005f8 <__aeabi_dmul>
 800a760:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a764:	460c      	mov	r4, r1
 800a766:	1523      	asrs	r3, r4, #20
 800a768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a76c:	4413      	add	r3, r2
 800a76e:	9309      	str	r3, [sp, #36]	; 0x24
 800a770:	4bd1      	ldr	r3, [pc, #836]	; (800aab8 <__ieee754_pow+0x748>)
 800a772:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a776:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a77a:	429c      	cmp	r4, r3
 800a77c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a780:	dd08      	ble.n	800a794 <__ieee754_pow+0x424>
 800a782:	4bce      	ldr	r3, [pc, #824]	; (800aabc <__ieee754_pow+0x74c>)
 800a784:	429c      	cmp	r4, r3
 800a786:	f340 8163 	ble.w	800aa50 <__ieee754_pow+0x6e0>
 800a78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78c:	3301      	adds	r3, #1
 800a78e:	9309      	str	r3, [sp, #36]	; 0x24
 800a790:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a794:	2400      	movs	r4, #0
 800a796:	00e3      	lsls	r3, r4, #3
 800a798:	930b      	str	r3, [sp, #44]	; 0x2c
 800a79a:	4bc9      	ldr	r3, [pc, #804]	; (800aac0 <__ieee754_pow+0x750>)
 800a79c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7a0:	ed93 7b00 	vldr	d7, [r3]
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	ec53 2b17 	vmov	r2, r3, d7
 800a7aa:	eeb0 8a47 	vmov.f32	s16, s14
 800a7ae:	eef0 8a67 	vmov.f32	s17, s15
 800a7b2:	4682      	mov	sl, r0
 800a7b4:	f7f5 fd68 	bl	8000288 <__aeabi_dsub>
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	462b      	mov	r3, r5
 800a7c0:	ec51 0b18 	vmov	r0, r1, d8
 800a7c4:	f7f5 fd62 	bl	800028c <__adddf3>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	49bd      	ldr	r1, [pc, #756]	; (800aac4 <__ieee754_pow+0x754>)
 800a7d0:	f7f6 f83c 	bl	800084c <__aeabi_ddiv>
 800a7d4:	ec41 0b19 	vmov	d9, r0, r1
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4630      	mov	r0, r6
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f5 ff0a 	bl	80005f8 <__aeabi_dmul>
 800a7e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a7f8:	46ab      	mov	fp, r5
 800a7fa:	106d      	asrs	r5, r5, #1
 800a7fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a800:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a804:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a808:	2200      	movs	r2, #0
 800a80a:	4640      	mov	r0, r8
 800a80c:	4649      	mov	r1, r9
 800a80e:	4614      	mov	r4, r2
 800a810:	461d      	mov	r5, r3
 800a812:	f7f5 fef1 	bl	80005f8 <__aeabi_dmul>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4630      	mov	r0, r6
 800a81c:	4639      	mov	r1, r7
 800a81e:	f7f5 fd33 	bl	8000288 <__aeabi_dsub>
 800a822:	ec53 2b18 	vmov	r2, r3, d8
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7f5 fd2b 	bl	8000288 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4650      	mov	r0, sl
 800a838:	4659      	mov	r1, fp
 800a83a:	f7f5 fd25 	bl	8000288 <__aeabi_dsub>
 800a83e:	4642      	mov	r2, r8
 800a840:	464b      	mov	r3, r9
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fd1b 	bl	8000288 <__aeabi_dsub>
 800a852:	ec53 2b19 	vmov	r2, r3, d9
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a85e:	ec41 0b18 	vmov	d8, r0, r1
 800a862:	4610      	mov	r0, r2
 800a864:	4619      	mov	r1, r3
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	a37d      	add	r3, pc, #500	; (adr r3, 800aa60 <__ieee754_pow+0x6f0>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	a37b      	add	r3, pc, #492	; (adr r3, 800aa68 <__ieee754_pow+0x6f8>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f7f5 fd05 	bl	800028c <__adddf3>
 800a882:	4622      	mov	r2, r4
 800a884:	462b      	mov	r3, r5
 800a886:	f7f5 feb7 	bl	80005f8 <__aeabi_dmul>
 800a88a:	a379      	add	r3, pc, #484	; (adr r3, 800aa70 <__ieee754_pow+0x700>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f7f5 fcfc 	bl	800028c <__adddf3>
 800a894:	4622      	mov	r2, r4
 800a896:	462b      	mov	r3, r5
 800a898:	f7f5 feae 	bl	80005f8 <__aeabi_dmul>
 800a89c:	a376      	add	r3, pc, #472	; (adr r3, 800aa78 <__ieee754_pow+0x708>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	f7f5 fcf3 	bl	800028c <__adddf3>
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	f7f5 fea5 	bl	80005f8 <__aeabi_dmul>
 800a8ae:	a374      	add	r3, pc, #464	; (adr r3, 800aa80 <__ieee754_pow+0x710>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f7f5 fcea 	bl	800028c <__adddf3>
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	f7f5 fe9c 	bl	80005f8 <__aeabi_dmul>
 800a8c0:	a371      	add	r3, pc, #452	; (adr r3, 800aa88 <__ieee754_pow+0x718>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fce1 	bl	800028c <__adddf3>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f5 fe8f 	bl	80005f8 <__aeabi_dmul>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 fe89 	bl	80005f8 <__aeabi_dmul>
 800a8e6:	4642      	mov	r2, r8
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8f2:	f7f5 fccb 	bl	800028c <__adddf3>
 800a8f6:	ec53 2b18 	vmov	r2, r3, d8
 800a8fa:	f7f5 fe7d 	bl	80005f8 <__aeabi_dmul>
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	f7f5 fcc3 	bl	800028c <__adddf3>
 800a906:	4642      	mov	r2, r8
 800a908:	4682      	mov	sl, r0
 800a90a:	468b      	mov	fp, r1
 800a90c:	464b      	mov	r3, r9
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f7f5 fe71 	bl	80005f8 <__aeabi_dmul>
 800a916:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <__ieee754_pow+0x758>)
 800a918:	2200      	movs	r2, #0
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	f7f5 fcb5 	bl	800028c <__adddf3>
 800a922:	4652      	mov	r2, sl
 800a924:	465b      	mov	r3, fp
 800a926:	f7f5 fcb1 	bl	800028c <__adddf3>
 800a92a:	9c04      	ldr	r4, [sp, #16]
 800a92c:	460d      	mov	r5, r1
 800a92e:	4622      	mov	r2, r4
 800a930:	460b      	mov	r3, r1
 800a932:	4640      	mov	r0, r8
 800a934:	4649      	mov	r1, r9
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	4b63      	ldr	r3, [pc, #396]	; (800aac8 <__ieee754_pow+0x758>)
 800a93c:	4680      	mov	r8, r0
 800a93e:	4689      	mov	r9, r1
 800a940:	2200      	movs	r2, #0
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fc9f 	bl	8000288 <__aeabi_dsub>
 800a94a:	4632      	mov	r2, r6
 800a94c:	463b      	mov	r3, r7
 800a94e:	f7f5 fc9b 	bl	8000288 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4650      	mov	r0, sl
 800a958:	4659      	mov	r1, fp
 800a95a:	f7f5 fc95 	bl	8000288 <__aeabi_dsub>
 800a95e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a962:	f7f5 fe49 	bl	80005f8 <__aeabi_dmul>
 800a966:	4622      	mov	r2, r4
 800a968:	4606      	mov	r6, r0
 800a96a:	460f      	mov	r7, r1
 800a96c:	462b      	mov	r3, r5
 800a96e:	ec51 0b18 	vmov	r0, r1, d8
 800a972:	f7f5 fe41 	bl	80005f8 <__aeabi_dmul>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f5 fc85 	bl	800028c <__adddf3>
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f5 fc7d 	bl	800028c <__adddf3>
 800a992:	9c04      	ldr	r4, [sp, #16]
 800a994:	a33e      	add	r3, pc, #248	; (adr r3, 800aa90 <__ieee754_pow+0x720>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	4620      	mov	r0, r4
 800a99c:	460d      	mov	r5, r1
 800a99e:	f7f5 fe2b 	bl	80005f8 <__aeabi_dmul>
 800a9a2:	4642      	mov	r2, r8
 800a9a4:	ec41 0b18 	vmov	d8, r0, r1
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7f5 fc6b 	bl	8000288 <__aeabi_dsub>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	f7f5 fc65 	bl	8000288 <__aeabi_dsub>
 800a9be:	a336      	add	r3, pc, #216	; (adr r3, 800aa98 <__ieee754_pow+0x728>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fe18 	bl	80005f8 <__aeabi_dmul>
 800a9c8:	a335      	add	r3, pc, #212	; (adr r3, 800aaa0 <__ieee754_pow+0x730>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	f7f5 fe0f 	bl	80005f8 <__aeabi_dmul>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f7f5 fc53 	bl	800028c <__adddf3>
 800a9e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9e8:	4b38      	ldr	r3, [pc, #224]	; (800aacc <__ieee754_pow+0x75c>)
 800a9ea:	4413      	add	r3, r2
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fc4c 	bl	800028c <__adddf3>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f8:	468b      	mov	fp, r1
 800a9fa:	f7f5 fd93 	bl	8000524 <__aeabi_i2d>
 800a9fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa00:	4b33      	ldr	r3, [pc, #204]	; (800aad0 <__ieee754_pow+0x760>)
 800aa02:	4413      	add	r3, r2
 800aa04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	465b      	mov	r3, fp
 800aa10:	ec51 0b18 	vmov	r0, r1, d8
 800aa14:	f7f5 fc3a 	bl	800028c <__adddf3>
 800aa18:	4642      	mov	r2, r8
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	f7f5 fc36 	bl	800028c <__adddf3>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	f7f5 fc32 	bl	800028c <__adddf3>
 800aa28:	9c04      	ldr	r4, [sp, #16]
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	463b      	mov	r3, r7
 800aa2e:	4620      	mov	r0, r4
 800aa30:	460d      	mov	r5, r1
 800aa32:	f7f5 fc29 	bl	8000288 <__aeabi_dsub>
 800aa36:	4642      	mov	r2, r8
 800aa38:	464b      	mov	r3, r9
 800aa3a:	f7f5 fc25 	bl	8000288 <__aeabi_dsub>
 800aa3e:	ec53 2b18 	vmov	r2, r3, d8
 800aa42:	f7f5 fc21 	bl	8000288 <__aeabi_dsub>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	4659      	mov	r1, fp
 800aa4e:	e606      	b.n	800a65e <__ieee754_pow+0x2ee>
 800aa50:	2401      	movs	r4, #1
 800aa52:	e6a0      	b.n	800a796 <__ieee754_pow+0x426>
 800aa54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800aaa8 <__ieee754_pow+0x738>
 800aa58:	e60d      	b.n	800a676 <__ieee754_pow+0x306>
 800aa5a:	bf00      	nop
 800aa5c:	f3af 8000 	nop.w
 800aa60:	4a454eef 	.word	0x4a454eef
 800aa64:	3fca7e28 	.word	0x3fca7e28
 800aa68:	93c9db65 	.word	0x93c9db65
 800aa6c:	3fcd864a 	.word	0x3fcd864a
 800aa70:	a91d4101 	.word	0xa91d4101
 800aa74:	3fd17460 	.word	0x3fd17460
 800aa78:	518f264d 	.word	0x518f264d
 800aa7c:	3fd55555 	.word	0x3fd55555
 800aa80:	db6fabff 	.word	0xdb6fabff
 800aa84:	3fdb6db6 	.word	0x3fdb6db6
 800aa88:	33333303 	.word	0x33333303
 800aa8c:	3fe33333 	.word	0x3fe33333
 800aa90:	e0000000 	.word	0xe0000000
 800aa94:	3feec709 	.word	0x3feec709
 800aa98:	dc3a03fd 	.word	0xdc3a03fd
 800aa9c:	3feec709 	.word	0x3feec709
 800aaa0:	145b01f5 	.word	0x145b01f5
 800aaa4:	be3e2fe0 	.word	0xbe3e2fe0
 800aaa8:	00000000 	.word	0x00000000
 800aaac:	3ff00000 	.word	0x3ff00000
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	43400000 	.word	0x43400000
 800aab8:	0003988e 	.word	0x0003988e
 800aabc:	000bb679 	.word	0x000bb679
 800aac0:	0800c270 	.word	0x0800c270
 800aac4:	3ff00000 	.word	0x3ff00000
 800aac8:	40080000 	.word	0x40080000
 800aacc:	0800c290 	.word	0x0800c290
 800aad0:	0800c280 	.word	0x0800c280
 800aad4:	a3b5      	add	r3, pc, #724	; (adr r3, 800adac <__ieee754_pow+0xa3c>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fbd5 	bl	800028c <__adddf3>
 800aae2:	4622      	mov	r2, r4
 800aae4:	ec41 0b1a 	vmov	d10, r0, r1
 800aae8:	462b      	mov	r3, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fbcb 	bl	8000288 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	ec51 0b1a 	vmov	r0, r1, d10
 800aafa:	f7f6 f80d 	bl	8000b18 <__aeabi_dcmpgt>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	f47f adf8 	bne.w	800a6f4 <__ieee754_pow+0x384>
 800ab04:	4aa4      	ldr	r2, [pc, #656]	; (800ad98 <__ieee754_pow+0xa28>)
 800ab06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	f340 810b 	ble.w	800ad26 <__ieee754_pow+0x9b6>
 800ab10:	151b      	asrs	r3, r3, #20
 800ab12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ab16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ab1a:	fa4a f303 	asr.w	r3, sl, r3
 800ab1e:	445b      	add	r3, fp
 800ab20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ab24:	4e9d      	ldr	r6, [pc, #628]	; (800ad9c <__ieee754_pow+0xa2c>)
 800ab26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab2a:	4116      	asrs	r6, r2
 800ab2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ab30:	2000      	movs	r0, #0
 800ab32:	ea23 0106 	bic.w	r1, r3, r6
 800ab36:	f1c2 0214 	rsb	r2, r2, #20
 800ab3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ab3e:	fa4a fa02 	asr.w	sl, sl, r2
 800ab42:	f1bb 0f00 	cmp.w	fp, #0
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	bfb8      	it	lt
 800ab50:	f1ca 0a00 	rsblt	sl, sl, #0
 800ab54:	f7f5 fb98 	bl	8000288 <__aeabi_dsub>
 800ab58:	ec41 0b19 	vmov	d9, r0, r1
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	464b      	mov	r3, r9
 800ab60:	ec51 0b19 	vmov	r0, r1, d9
 800ab64:	f7f5 fb92 	bl	800028c <__adddf3>
 800ab68:	2400      	movs	r4, #0
 800ab6a:	a379      	add	r3, pc, #484	; (adr r3, 800ad50 <__ieee754_pow+0x9e0>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	4620      	mov	r0, r4
 800ab72:	460d      	mov	r5, r1
 800ab74:	f7f5 fd40 	bl	80005f8 <__aeabi_dmul>
 800ab78:	ec53 2b19 	vmov	r2, r3, d9
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	460f      	mov	r7, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fb80 	bl	8000288 <__aeabi_dsub>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	4649      	mov	r1, r9
 800ab90:	f7f5 fb7a 	bl	8000288 <__aeabi_dsub>
 800ab94:	a370      	add	r3, pc, #448	; (adr r3, 800ad58 <__ieee754_pow+0x9e8>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	a370      	add	r3, pc, #448	; (adr r3, 800ad60 <__ieee754_pow+0x9f0>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	4680      	mov	r8, r0
 800aba6:	4689      	mov	r9, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f5 fd24 	bl	80005f8 <__aeabi_dmul>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4640      	mov	r0, r8
 800abb6:	4649      	mov	r1, r9
 800abb8:	f7f5 fb68 	bl	800028c <__adddf3>
 800abbc:	4604      	mov	r4, r0
 800abbe:	460d      	mov	r5, r1
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4630      	mov	r0, r6
 800abc6:	4639      	mov	r1, r7
 800abc8:	f7f5 fb60 	bl	800028c <__adddf3>
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4680      	mov	r8, r0
 800abd2:	4689      	mov	r9, r1
 800abd4:	f7f5 fb58 	bl	8000288 <__aeabi_dsub>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4620      	mov	r0, r4
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 fb52 	bl	8000288 <__aeabi_dsub>
 800abe4:	4642      	mov	r2, r8
 800abe6:	4606      	mov	r6, r0
 800abe8:	460f      	mov	r7, r1
 800abea:	464b      	mov	r3, r9
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 fd02 	bl	80005f8 <__aeabi_dmul>
 800abf4:	a35c      	add	r3, pc, #368	; (adr r3, 800ad68 <__ieee754_pow+0x9f8>)
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	4604      	mov	r4, r0
 800abfc:	460d      	mov	r5, r1
 800abfe:	f7f5 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ac02:	a35b      	add	r3, pc, #364	; (adr r3, 800ad70 <__ieee754_pow+0xa00>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f7f5 fb3e 	bl	8000288 <__aeabi_dsub>
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	462b      	mov	r3, r5
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	a358      	add	r3, pc, #352	; (adr r3, 800ad78 <__ieee754_pow+0xa08>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f7f5 fb37 	bl	800028c <__adddf3>
 800ac1e:	4622      	mov	r2, r4
 800ac20:	462b      	mov	r3, r5
 800ac22:	f7f5 fce9 	bl	80005f8 <__aeabi_dmul>
 800ac26:	a356      	add	r3, pc, #344	; (adr r3, 800ad80 <__ieee754_pow+0xa10>)
 800ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2c:	f7f5 fb2c 	bl	8000288 <__aeabi_dsub>
 800ac30:	4622      	mov	r2, r4
 800ac32:	462b      	mov	r3, r5
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	a353      	add	r3, pc, #332	; (adr r3, 800ad88 <__ieee754_pow+0xa18>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 fb25 	bl	800028c <__adddf3>
 800ac42:	4622      	mov	r2, r4
 800ac44:	462b      	mov	r3, r5
 800ac46:	f7f5 fcd7 	bl	80005f8 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fb19 	bl	8000288 <__aeabi_dsub>
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4649      	mov	r1, r9
 800ac62:	f7f5 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ac66:	2200      	movs	r2, #0
 800ac68:	ec41 0b19 	vmov	d9, r0, r1
 800ac6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac70:	4620      	mov	r0, r4
 800ac72:	4629      	mov	r1, r5
 800ac74:	f7f5 fb08 	bl	8000288 <__aeabi_dsub>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	ec51 0b19 	vmov	r0, r1, d9
 800ac80:	f7f5 fde4 	bl	800084c <__aeabi_ddiv>
 800ac84:	4632      	mov	r2, r6
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	4649      	mov	r1, r9
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	4632      	mov	r2, r6
 800ac96:	463b      	mov	r3, r7
 800ac98:	f7f5 faf8 	bl	800028c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 faf0 	bl	8000288 <__aeabi_dsub>
 800aca8:	4642      	mov	r2, r8
 800acaa:	464b      	mov	r3, r9
 800acac:	f7f5 faec 	bl	8000288 <__aeabi_dsub>
 800acb0:	460b      	mov	r3, r1
 800acb2:	4602      	mov	r2, r0
 800acb4:	493a      	ldr	r1, [pc, #232]	; (800ada0 <__ieee754_pow+0xa30>)
 800acb6:	2000      	movs	r0, #0
 800acb8:	f7f5 fae6 	bl	8000288 <__aeabi_dsub>
 800acbc:	e9cd 0100 	strd	r0, r1, [sp]
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800acc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acca:	da2f      	bge.n	800ad2c <__ieee754_pow+0x9bc>
 800accc:	4650      	mov	r0, sl
 800acce:	ed9d 0b00 	vldr	d0, [sp]
 800acd2:	f001 f921 	bl	800bf18 <scalbn>
 800acd6:	ec51 0b10 	vmov	r0, r1, d0
 800acda:	ec53 2b18 	vmov	r2, r3, d8
 800acde:	f7ff bbe0 	b.w	800a4a2 <__ieee754_pow+0x132>
 800ace2:	4b30      	ldr	r3, [pc, #192]	; (800ada4 <__ieee754_pow+0xa34>)
 800ace4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ace8:	429e      	cmp	r6, r3
 800acea:	f77f af0b 	ble.w	800ab04 <__ieee754_pow+0x794>
 800acee:	4b2e      	ldr	r3, [pc, #184]	; (800ada8 <__ieee754_pow+0xa38>)
 800acf0:	440b      	add	r3, r1
 800acf2:	4303      	orrs	r3, r0
 800acf4:	d00b      	beq.n	800ad0e <__ieee754_pow+0x99e>
 800acf6:	a326      	add	r3, pc, #152	; (adr r3, 800ad90 <__ieee754_pow+0xa20>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	ec51 0b18 	vmov	r0, r1, d8
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	a322      	add	r3, pc, #136	; (adr r3, 800ad90 <__ieee754_pow+0xa20>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7ff bbca 	b.w	800a4a2 <__ieee754_pow+0x132>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	462b      	mov	r3, r5
 800ad12:	f7f5 fab9 	bl	8000288 <__aeabi_dsub>
 800ad16:	4642      	mov	r2, r8
 800ad18:	464b      	mov	r3, r9
 800ad1a:	f7f5 fef3 	bl	8000b04 <__aeabi_dcmpge>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f aef0 	beq.w	800ab04 <__ieee754_pow+0x794>
 800ad24:	e7e7      	b.n	800acf6 <__ieee754_pow+0x986>
 800ad26:	f04f 0a00 	mov.w	sl, #0
 800ad2a:	e717      	b.n	800ab5c <__ieee754_pow+0x7ec>
 800ad2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad30:	4619      	mov	r1, r3
 800ad32:	e7d2      	b.n	800acda <__ieee754_pow+0x96a>
 800ad34:	491a      	ldr	r1, [pc, #104]	; (800ada0 <__ieee754_pow+0xa30>)
 800ad36:	2000      	movs	r0, #0
 800ad38:	f7ff bb9e 	b.w	800a478 <__ieee754_pow+0x108>
 800ad3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad40:	f7ff bb9a 	b.w	800a478 <__ieee754_pow+0x108>
 800ad44:	9000      	str	r0, [sp, #0]
 800ad46:	f7ff bb76 	b.w	800a436 <__ieee754_pow+0xc6>
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	f7ff bb60 	b.w	800a410 <__ieee754_pow+0xa0>
 800ad50:	00000000 	.word	0x00000000
 800ad54:	3fe62e43 	.word	0x3fe62e43
 800ad58:	fefa39ef 	.word	0xfefa39ef
 800ad5c:	3fe62e42 	.word	0x3fe62e42
 800ad60:	0ca86c39 	.word	0x0ca86c39
 800ad64:	be205c61 	.word	0xbe205c61
 800ad68:	72bea4d0 	.word	0x72bea4d0
 800ad6c:	3e663769 	.word	0x3e663769
 800ad70:	c5d26bf1 	.word	0xc5d26bf1
 800ad74:	3ebbbd41 	.word	0x3ebbbd41
 800ad78:	af25de2c 	.word	0xaf25de2c
 800ad7c:	3f11566a 	.word	0x3f11566a
 800ad80:	16bebd93 	.word	0x16bebd93
 800ad84:	3f66c16c 	.word	0x3f66c16c
 800ad88:	5555553e 	.word	0x5555553e
 800ad8c:	3fc55555 	.word	0x3fc55555
 800ad90:	c2f8f359 	.word	0xc2f8f359
 800ad94:	01a56e1f 	.word	0x01a56e1f
 800ad98:	3fe00000 	.word	0x3fe00000
 800ad9c:	000fffff 	.word	0x000fffff
 800ada0:	3ff00000 	.word	0x3ff00000
 800ada4:	4090cbff 	.word	0x4090cbff
 800ada8:	3f6f3400 	.word	0x3f6f3400
 800adac:	652b82fe 	.word	0x652b82fe
 800adb0:	3c971547 	.word	0x3c971547
 800adb4:	00000000 	.word	0x00000000

0800adb8 <__ieee754_rem_pio2>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	ed2d 8b02 	vpush	{d8}
 800adc0:	ec55 4b10 	vmov	r4, r5, d0
 800adc4:	4bca      	ldr	r3, [pc, #808]	; (800b0f0 <__ieee754_rem_pio2+0x338>)
 800adc6:	b08b      	sub	sp, #44	; 0x2c
 800adc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800adcc:	4598      	cmp	r8, r3
 800adce:	4682      	mov	sl, r0
 800add0:	9502      	str	r5, [sp, #8]
 800add2:	dc08      	bgt.n	800ade6 <__ieee754_rem_pio2+0x2e>
 800add4:	2200      	movs	r2, #0
 800add6:	2300      	movs	r3, #0
 800add8:	ed80 0b00 	vstr	d0, [r0]
 800addc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ade0:	f04f 0b00 	mov.w	fp, #0
 800ade4:	e028      	b.n	800ae38 <__ieee754_rem_pio2+0x80>
 800ade6:	4bc3      	ldr	r3, [pc, #780]	; (800b0f4 <__ieee754_rem_pio2+0x33c>)
 800ade8:	4598      	cmp	r8, r3
 800adea:	dc78      	bgt.n	800aede <__ieee754_rem_pio2+0x126>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	4ec2      	ldr	r6, [pc, #776]	; (800b0f8 <__ieee754_rem_pio2+0x340>)
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	ee10 0a10 	vmov	r0, s0
 800adf6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x300>)
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	4629      	mov	r1, r5
 800adfe:	dd39      	ble.n	800ae74 <__ieee754_rem_pio2+0xbc>
 800ae00:	f7f5 fa42 	bl	8000288 <__aeabi_dsub>
 800ae04:	45b0      	cmp	r8, r6
 800ae06:	4604      	mov	r4, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	d01b      	beq.n	800ae44 <__ieee754_rem_pio2+0x8c>
 800ae0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x308>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fa39 	bl	8000288 <__aeabi_dsub>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fa31 	bl	8000288 <__aeabi_dsub>
 800ae26:	a3a6      	add	r3, pc, #664	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x308>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f7f5 fa2c 	bl	8000288 <__aeabi_dsub>
 800ae30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae34:	f04f 0b01 	mov.w	fp, #1
 800ae38:	4658      	mov	r0, fp
 800ae3a:	b00b      	add	sp, #44	; 0x2c
 800ae3c:	ecbd 8b02 	vpop	{d8}
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae44:	a3a0      	add	r3, pc, #640	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x310>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	f7f5 fa1d 	bl	8000288 <__aeabi_dsub>
 800ae4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x318>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	4604      	mov	r4, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	f7f5 fa16 	bl	8000288 <__aeabi_dsub>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	e9ca 2300 	strd	r2, r3, [sl]
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7f5 fa0e 	bl	8000288 <__aeabi_dsub>
 800ae6c:	a398      	add	r3, pc, #608	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x318>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e7db      	b.n	800ae2c <__ieee754_rem_pio2+0x74>
 800ae74:	f7f5 fa0a 	bl	800028c <__adddf3>
 800ae78:	45b0      	cmp	r8, r6
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	460d      	mov	r5, r1
 800ae7e:	d016      	beq.n	800aeae <__ieee754_rem_pio2+0xf6>
 800ae80:	a38f      	add	r3, pc, #572	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x308>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fa01 	bl	800028c <__adddf3>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	e9ca 2300 	strd	r2, r3, [sl]
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7f5 f9f7 	bl	8000288 <__aeabi_dsub>
 800ae9a:	a389      	add	r3, pc, #548	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x308>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f9f4 	bl	800028c <__adddf3>
 800aea4:	f04f 3bff 	mov.w	fp, #4294967295
 800aea8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aeac:	e7c4      	b.n	800ae38 <__ieee754_rem_pio2+0x80>
 800aeae:	a386      	add	r3, pc, #536	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x310>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f7f5 f9ea 	bl	800028c <__adddf3>
 800aeb8:	a385      	add	r3, pc, #532	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x318>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	f7f5 f9e3 	bl	800028c <__adddf3>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9ca 2300 	strd	r2, r3, [sl]
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 f9d9 	bl	8000288 <__aeabi_dsub>
 800aed6:	a37e      	add	r3, pc, #504	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x318>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	e7e0      	b.n	800aea0 <__ieee754_rem_pio2+0xe8>
 800aede:	4b87      	ldr	r3, [pc, #540]	; (800b0fc <__ieee754_rem_pio2+0x344>)
 800aee0:	4598      	cmp	r8, r3
 800aee2:	f300 80d9 	bgt.w	800b098 <__ieee754_rem_pio2+0x2e0>
 800aee6:	f000 feed 	bl	800bcc4 <fabs>
 800aeea:	ec55 4b10 	vmov	r4, r5, d0
 800aeee:	ee10 0a10 	vmov	r0, s0
 800aef2:	a379      	add	r3, pc, #484	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x320>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	4629      	mov	r1, r5
 800aefa:	f7f5 fb7d 	bl	80005f8 <__aeabi_dmul>
 800aefe:	4b80      	ldr	r3, [pc, #512]	; (800b100 <__ieee754_rem_pio2+0x348>)
 800af00:	2200      	movs	r2, #0
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	f7f5 fe27 	bl	8000b58 <__aeabi_d2iz>
 800af0a:	4683      	mov	fp, r0
 800af0c:	f7f5 fb0a 	bl	8000524 <__aeabi_i2d>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	ec43 2b18 	vmov	d8, r2, r3
 800af18:	a367      	add	r3, pc, #412	; (adr r3, 800b0b8 <__ieee754_rem_pio2+0x300>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 fb6b 	bl	80005f8 <__aeabi_dmul>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	4620      	mov	r0, r4
 800af28:	4629      	mov	r1, r5
 800af2a:	f7f5 f9ad 	bl	8000288 <__aeabi_dsub>
 800af2e:	a364      	add	r3, pc, #400	; (adr r3, 800b0c0 <__ieee754_rem_pio2+0x308>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	4606      	mov	r6, r0
 800af36:	460f      	mov	r7, r1
 800af38:	ec51 0b18 	vmov	r0, r1, d8
 800af3c:	f7f5 fb5c 	bl	80005f8 <__aeabi_dmul>
 800af40:	f1bb 0f1f 	cmp.w	fp, #31
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	dc0d      	bgt.n	800af66 <__ieee754_rem_pio2+0x1ae>
 800af4a:	4b6e      	ldr	r3, [pc, #440]	; (800b104 <__ieee754_rem_pio2+0x34c>)
 800af4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	4543      	cmp	r3, r8
 800af56:	d006      	beq.n	800af66 <__ieee754_rem_pio2+0x1ae>
 800af58:	4622      	mov	r2, r4
 800af5a:	462b      	mov	r3, r5
 800af5c:	4630      	mov	r0, r6
 800af5e:	4639      	mov	r1, r7
 800af60:	f7f5 f992 	bl	8000288 <__aeabi_dsub>
 800af64:	e00f      	b.n	800af86 <__ieee754_rem_pio2+0x1ce>
 800af66:	462b      	mov	r3, r5
 800af68:	4622      	mov	r2, r4
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800af80:	f1b8 0f10 	cmp.w	r8, #16
 800af84:	dc02      	bgt.n	800af8c <__ieee754_rem_pio2+0x1d4>
 800af86:	e9ca 0100 	strd	r0, r1, [sl]
 800af8a:	e039      	b.n	800b000 <__ieee754_rem_pio2+0x248>
 800af8c:	a34e      	add	r3, pc, #312	; (adr r3, 800b0c8 <__ieee754_rem_pio2+0x310>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	ec51 0b18 	vmov	r0, r1, d8
 800af96:	f7f5 fb2f 	bl	80005f8 <__aeabi_dmul>
 800af9a:	4604      	mov	r4, r0
 800af9c:	460d      	mov	r5, r1
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4630      	mov	r0, r6
 800afa4:	4639      	mov	r1, r7
 800afa6:	f7f5 f96f 	bl	8000288 <__aeabi_dsub>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 f967 	bl	8000288 <__aeabi_dsub>
 800afba:	4622      	mov	r2, r4
 800afbc:	462b      	mov	r3, r5
 800afbe:	f7f5 f963 	bl	8000288 <__aeabi_dsub>
 800afc2:	a343      	add	r3, pc, #268	; (adr r3, 800b0d0 <__ieee754_rem_pio2+0x318>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	ec51 0b18 	vmov	r0, r1, d8
 800afd0:	f7f5 fb12 	bl	80005f8 <__aeabi_dmul>
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	f7f5 f956 	bl	8000288 <__aeabi_dsub>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 f94e 	bl	8000288 <__aeabi_dsub>
 800afec:	9a03      	ldr	r2, [sp, #12]
 800afee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b31      	cmp	r3, #49	; 0x31
 800aff6:	dc24      	bgt.n	800b042 <__ieee754_rem_pio2+0x28a>
 800aff8:	e9ca 0100 	strd	r0, r1, [sl]
 800affc:	4646      	mov	r6, r8
 800affe:	464f      	mov	r7, r9
 800b000:	e9da 8900 	ldrd	r8, r9, [sl]
 800b004:	4630      	mov	r0, r6
 800b006:	4642      	mov	r2, r8
 800b008:	464b      	mov	r3, r9
 800b00a:	4639      	mov	r1, r7
 800b00c:	f7f5 f93c 	bl	8000288 <__aeabi_dsub>
 800b010:	462b      	mov	r3, r5
 800b012:	4622      	mov	r2, r4
 800b014:	f7f5 f938 	bl	8000288 <__aeabi_dsub>
 800b018:	9b02      	ldr	r3, [sp, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b020:	f6bf af0a 	bge.w	800ae38 <__ieee754_rem_pio2+0x80>
 800b024:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b028:	f8ca 3004 	str.w	r3, [sl, #4]
 800b02c:	f8ca 8000 	str.w	r8, [sl]
 800b030:	f8ca 0008 	str.w	r0, [sl, #8]
 800b034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b038:	f8ca 300c 	str.w	r3, [sl, #12]
 800b03c:	f1cb 0b00 	rsb	fp, fp, #0
 800b040:	e6fa      	b.n	800ae38 <__ieee754_rem_pio2+0x80>
 800b042:	a327      	add	r3, pc, #156	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x328>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	ec51 0b18 	vmov	r0, r1, d8
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4640      	mov	r0, r8
 800b05a:	4649      	mov	r1, r9
 800b05c:	f7f5 f914 	bl	8000288 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 f90c 	bl	8000288 <__aeabi_dsub>
 800b070:	4622      	mov	r2, r4
 800b072:	462b      	mov	r3, r5
 800b074:	f7f5 f908 	bl	8000288 <__aeabi_dsub>
 800b078:	a31b      	add	r3, pc, #108	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x330>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	ec51 0b18 	vmov	r0, r1, d8
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	4622      	mov	r2, r4
 800b08c:	462b      	mov	r3, r5
 800b08e:	f7f5 f8fb 	bl	8000288 <__aeabi_dsub>
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	e75f      	b.n	800af58 <__ieee754_rem_pio2+0x1a0>
 800b098:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <__ieee754_rem_pio2+0x350>)
 800b09a:	4598      	cmp	r8, r3
 800b09c:	dd36      	ble.n	800b10c <__ieee754_rem_pio2+0x354>
 800b09e:	ee10 2a10 	vmov	r2, s0
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 f8ee 	bl	8000288 <__aeabi_dsub>
 800b0ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0b0:	e9ca 0100 	strd	r0, r1, [sl]
 800b0b4:	e694      	b.n	800ade0 <__ieee754_rem_pio2+0x28>
 800b0b6:	bf00      	nop
 800b0b8:	54400000 	.word	0x54400000
 800b0bc:	3ff921fb 	.word	0x3ff921fb
 800b0c0:	1a626331 	.word	0x1a626331
 800b0c4:	3dd0b461 	.word	0x3dd0b461
 800b0c8:	1a600000 	.word	0x1a600000
 800b0cc:	3dd0b461 	.word	0x3dd0b461
 800b0d0:	2e037073 	.word	0x2e037073
 800b0d4:	3ba3198a 	.word	0x3ba3198a
 800b0d8:	6dc9c883 	.word	0x6dc9c883
 800b0dc:	3fe45f30 	.word	0x3fe45f30
 800b0e0:	2e000000 	.word	0x2e000000
 800b0e4:	3ba3198a 	.word	0x3ba3198a
 800b0e8:	252049c1 	.word	0x252049c1
 800b0ec:	397b839a 	.word	0x397b839a
 800b0f0:	3fe921fb 	.word	0x3fe921fb
 800b0f4:	4002d97b 	.word	0x4002d97b
 800b0f8:	3ff921fb 	.word	0x3ff921fb
 800b0fc:	413921fb 	.word	0x413921fb
 800b100:	3fe00000 	.word	0x3fe00000
 800b104:	0800c2a0 	.word	0x0800c2a0
 800b108:	7fefffff 	.word	0x7fefffff
 800b10c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b110:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b114:	ee10 0a10 	vmov	r0, s0
 800b118:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b11c:	ee10 6a10 	vmov	r6, s0
 800b120:	460f      	mov	r7, r1
 800b122:	f7f5 fd19 	bl	8000b58 <__aeabi_d2iz>
 800b126:	f7f5 f9fd 	bl	8000524 <__aeabi_i2d>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b136:	f7f5 f8a7 	bl	8000288 <__aeabi_dsub>
 800b13a:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <__ieee754_rem_pio2+0x40c>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	f7f5 fa5b 	bl	80005f8 <__aeabi_dmul>
 800b142:	460f      	mov	r7, r1
 800b144:	4606      	mov	r6, r0
 800b146:	f7f5 fd07 	bl	8000b58 <__aeabi_d2iz>
 800b14a:	f7f5 f9eb 	bl	8000524 <__aeabi_i2d>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4630      	mov	r0, r6
 800b154:	4639      	mov	r1, r7
 800b156:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	4b19      	ldr	r3, [pc, #100]	; (800b1c4 <__ieee754_rem_pio2+0x40c>)
 800b160:	2200      	movs	r2, #0
 800b162:	f7f5 fa49 	bl	80005f8 <__aeabi_dmul>
 800b166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b16a:	ad04      	add	r5, sp, #16
 800b16c:	f04f 0803 	mov.w	r8, #3
 800b170:	46a9      	mov	r9, r5
 800b172:	2600      	movs	r6, #0
 800b174:	2700      	movs	r7, #0
 800b176:	4632      	mov	r2, r6
 800b178:	463b      	mov	r3, r7
 800b17a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b17e:	46c3      	mov	fp, r8
 800b180:	3d08      	subs	r5, #8
 800b182:	f108 38ff 	add.w	r8, r8, #4294967295
 800b186:	f7f5 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d1f3      	bne.n	800b176 <__ieee754_rem_pio2+0x3be>
 800b18e:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <__ieee754_rem_pio2+0x410>)
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	2302      	movs	r3, #2
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	4622      	mov	r2, r4
 800b198:	465b      	mov	r3, fp
 800b19a:	4651      	mov	r1, sl
 800b19c:	4648      	mov	r0, r9
 800b19e:	f000 f993 	bl	800b4c8 <__kernel_rem_pio2>
 800b1a2:	9b02      	ldr	r3, [sp, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	4683      	mov	fp, r0
 800b1a8:	f6bf ae46 	bge.w	800ae38 <__ieee754_rem_pio2+0x80>
 800b1ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b1b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1b4:	f8ca 3004 	str.w	r3, [sl, #4]
 800b1b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b1bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	e73a      	b.n	800b038 <__ieee754_rem_pio2+0x280>
 800b1c2:	bf00      	nop
 800b1c4:	41700000 	.word	0x41700000
 800b1c8:	0800c320 	.word	0x0800c320

0800b1cc <__ieee754_sqrt>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	ec55 4b10 	vmov	r4, r5, d0
 800b1d4:	4e56      	ldr	r6, [pc, #344]	; (800b330 <__ieee754_sqrt+0x164>)
 800b1d6:	43ae      	bics	r6, r5
 800b1d8:	ee10 0a10 	vmov	r0, s0
 800b1dc:	ee10 3a10 	vmov	r3, s0
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	d110      	bne.n	800b208 <__ieee754_sqrt+0x3c>
 800b1e6:	ee10 2a10 	vmov	r2, s0
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f848 	bl	800028c <__adddf3>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	460d      	mov	r5, r1
 800b200:	ec45 4b10 	vmov	d0, r4, r5
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b208:	2d00      	cmp	r5, #0
 800b20a:	dc10      	bgt.n	800b22e <__ieee754_sqrt+0x62>
 800b20c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b210:	4330      	orrs	r0, r6
 800b212:	d0f5      	beq.n	800b200 <__ieee754_sqrt+0x34>
 800b214:	b15d      	cbz	r5, 800b22e <__ieee754_sqrt+0x62>
 800b216:	ee10 2a10 	vmov	r2, s0
 800b21a:	462b      	mov	r3, r5
 800b21c:	ee10 0a10 	vmov	r0, s0
 800b220:	f7f5 f832 	bl	8000288 <__aeabi_dsub>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	f7f5 fb10 	bl	800084c <__aeabi_ddiv>
 800b22c:	e7e6      	b.n	800b1fc <__ieee754_sqrt+0x30>
 800b22e:	1509      	asrs	r1, r1, #20
 800b230:	d076      	beq.n	800b320 <__ieee754_sqrt+0x154>
 800b232:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b236:	07ce      	lsls	r6, r1, #31
 800b238:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b23c:	bf5e      	ittt	pl
 800b23e:	0fda      	lsrpl	r2, r3, #31
 800b240:	005b      	lslpl	r3, r3, #1
 800b242:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b246:	0fda      	lsrs	r2, r3, #31
 800b248:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b24c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b250:	2000      	movs	r0, #0
 800b252:	106d      	asrs	r5, r5, #1
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	f04f 0e16 	mov.w	lr, #22
 800b25a:	4684      	mov	ip, r0
 800b25c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b260:	eb0c 0401 	add.w	r4, ip, r1
 800b264:	4294      	cmp	r4, r2
 800b266:	bfde      	ittt	le
 800b268:	1b12      	suble	r2, r2, r4
 800b26a:	eb04 0c01 	addle.w	ip, r4, r1
 800b26e:	1840      	addle	r0, r0, r1
 800b270:	0052      	lsls	r2, r2, #1
 800b272:	f1be 0e01 	subs.w	lr, lr, #1
 800b276:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b27a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b27e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b282:	d1ed      	bne.n	800b260 <__ieee754_sqrt+0x94>
 800b284:	4671      	mov	r1, lr
 800b286:	2720      	movs	r7, #32
 800b288:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b28c:	4562      	cmp	r2, ip
 800b28e:	eb04 060e 	add.w	r6, r4, lr
 800b292:	dc02      	bgt.n	800b29a <__ieee754_sqrt+0xce>
 800b294:	d113      	bne.n	800b2be <__ieee754_sqrt+0xf2>
 800b296:	429e      	cmp	r6, r3
 800b298:	d811      	bhi.n	800b2be <__ieee754_sqrt+0xf2>
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	eb06 0e04 	add.w	lr, r6, r4
 800b2a0:	da43      	bge.n	800b32a <__ieee754_sqrt+0x15e>
 800b2a2:	f1be 0f00 	cmp.w	lr, #0
 800b2a6:	db40      	blt.n	800b32a <__ieee754_sqrt+0x15e>
 800b2a8:	f10c 0801 	add.w	r8, ip, #1
 800b2ac:	eba2 020c 	sub.w	r2, r2, ip
 800b2b0:	429e      	cmp	r6, r3
 800b2b2:	bf88      	it	hi
 800b2b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b2b8:	1b9b      	subs	r3, r3, r6
 800b2ba:	4421      	add	r1, r4
 800b2bc:	46c4      	mov	ip, r8
 800b2be:	0052      	lsls	r2, r2, #1
 800b2c0:	3f01      	subs	r7, #1
 800b2c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b2c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b2ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b2ce:	d1dd      	bne.n	800b28c <__ieee754_sqrt+0xc0>
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d006      	beq.n	800b2e2 <__ieee754_sqrt+0x116>
 800b2d4:	1c4c      	adds	r4, r1, #1
 800b2d6:	bf13      	iteet	ne
 800b2d8:	3101      	addne	r1, #1
 800b2da:	3001      	addeq	r0, #1
 800b2dc:	4639      	moveq	r1, r7
 800b2de:	f021 0101 	bicne.w	r1, r1, #1
 800b2e2:	1043      	asrs	r3, r0, #1
 800b2e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b2e8:	0849      	lsrs	r1, r1, #1
 800b2ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b2ee:	07c2      	lsls	r2, r0, #31
 800b2f0:	bf48      	it	mi
 800b2f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b2f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	463d      	mov	r5, r7
 800b2fe:	e77f      	b.n	800b200 <__ieee754_sqrt+0x34>
 800b300:	0ada      	lsrs	r2, r3, #11
 800b302:	3815      	subs	r0, #21
 800b304:	055b      	lsls	r3, r3, #21
 800b306:	2a00      	cmp	r2, #0
 800b308:	d0fa      	beq.n	800b300 <__ieee754_sqrt+0x134>
 800b30a:	02d7      	lsls	r7, r2, #11
 800b30c:	d50a      	bpl.n	800b324 <__ieee754_sqrt+0x158>
 800b30e:	f1c1 0420 	rsb	r4, r1, #32
 800b312:	fa23 f404 	lsr.w	r4, r3, r4
 800b316:	1e4d      	subs	r5, r1, #1
 800b318:	408b      	lsls	r3, r1
 800b31a:	4322      	orrs	r2, r4
 800b31c:	1b41      	subs	r1, r0, r5
 800b31e:	e788      	b.n	800b232 <__ieee754_sqrt+0x66>
 800b320:	4608      	mov	r0, r1
 800b322:	e7f0      	b.n	800b306 <__ieee754_sqrt+0x13a>
 800b324:	0052      	lsls	r2, r2, #1
 800b326:	3101      	adds	r1, #1
 800b328:	e7ef      	b.n	800b30a <__ieee754_sqrt+0x13e>
 800b32a:	46e0      	mov	r8, ip
 800b32c:	e7be      	b.n	800b2ac <__ieee754_sqrt+0xe0>
 800b32e:	bf00      	nop
 800b330:	7ff00000 	.word	0x7ff00000
 800b334:	00000000 	.word	0x00000000

0800b338 <__kernel_cos>:
 800b338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	ec57 6b10 	vmov	r6, r7, d0
 800b340:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b344:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b348:	ed8d 1b00 	vstr	d1, [sp]
 800b34c:	da07      	bge.n	800b35e <__kernel_cos+0x26>
 800b34e:	ee10 0a10 	vmov	r0, s0
 800b352:	4639      	mov	r1, r7
 800b354:	f7f5 fc00 	bl	8000b58 <__aeabi_d2iz>
 800b358:	2800      	cmp	r0, #0
 800b35a:	f000 8088 	beq.w	800b46e <__kernel_cos+0x136>
 800b35e:	4632      	mov	r2, r6
 800b360:	463b      	mov	r3, r7
 800b362:	4630      	mov	r0, r6
 800b364:	4639      	mov	r1, r7
 800b366:	f7f5 f947 	bl	80005f8 <__aeabi_dmul>
 800b36a:	4b51      	ldr	r3, [pc, #324]	; (800b4b0 <__kernel_cos+0x178>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	460d      	mov	r5, r1
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	a340      	add	r3, pc, #256	; (adr r3, 800b478 <__kernel_cos+0x140>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	4682      	mov	sl, r0
 800b37e:	468b      	mov	fp, r1
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f5 f938 	bl	80005f8 <__aeabi_dmul>
 800b388:	a33d      	add	r3, pc, #244	; (adr r3, 800b480 <__kernel_cos+0x148>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f4 ff7d 	bl	800028c <__adddf3>
 800b392:	4622      	mov	r2, r4
 800b394:	462b      	mov	r3, r5
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	a33b      	add	r3, pc, #236	; (adr r3, 800b488 <__kernel_cos+0x150>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f7f4 ff72 	bl	8000288 <__aeabi_dsub>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	f7f5 f926 	bl	80005f8 <__aeabi_dmul>
 800b3ac:	a338      	add	r3, pc, #224	; (adr r3, 800b490 <__kernel_cos+0x158>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f7f4 ff6b 	bl	800028c <__adddf3>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	462b      	mov	r3, r5
 800b3ba:	f7f5 f91d 	bl	80005f8 <__aeabi_dmul>
 800b3be:	a336      	add	r3, pc, #216	; (adr r3, 800b498 <__kernel_cos+0x160>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f7f4 ff60 	bl	8000288 <__aeabi_dsub>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	f7f5 f914 	bl	80005f8 <__aeabi_dmul>
 800b3d0:	a333      	add	r3, pc, #204	; (adr r3, 800b4a0 <__kernel_cos+0x168>)
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	f7f4 ff59 	bl	800028c <__adddf3>
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	f7f5 f90b 	bl	80005f8 <__aeabi_dmul>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f907 	bl	80005f8 <__aeabi_dmul>
 800b3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 f8ff 	bl	80005f8 <__aeabi_dmul>
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	4629      	mov	r1, r5
 800b400:	4620      	mov	r0, r4
 800b402:	f7f4 ff41 	bl	8000288 <__aeabi_dsub>
 800b406:	4b2b      	ldr	r3, [pc, #172]	; (800b4b4 <__kernel_cos+0x17c>)
 800b408:	4598      	cmp	r8, r3
 800b40a:	4606      	mov	r6, r0
 800b40c:	460f      	mov	r7, r1
 800b40e:	dc10      	bgt.n	800b432 <__kernel_cos+0xfa>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4650      	mov	r0, sl
 800b416:	4659      	mov	r1, fp
 800b418:	f7f4 ff36 	bl	8000288 <__aeabi_dsub>
 800b41c:	460b      	mov	r3, r1
 800b41e:	4926      	ldr	r1, [pc, #152]	; (800b4b8 <__kernel_cos+0x180>)
 800b420:	4602      	mov	r2, r0
 800b422:	2000      	movs	r0, #0
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	ec41 0b10 	vmov	d0, r0, r1
 800b42c:	b003      	add	sp, #12
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	4b22      	ldr	r3, [pc, #136]	; (800b4bc <__kernel_cos+0x184>)
 800b434:	4920      	ldr	r1, [pc, #128]	; (800b4b8 <__kernel_cos+0x180>)
 800b436:	4598      	cmp	r8, r3
 800b438:	bfcc      	ite	gt
 800b43a:	4d21      	ldrgt	r5, [pc, #132]	; (800b4c0 <__kernel_cos+0x188>)
 800b43c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b440:	2400      	movs	r4, #0
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	2000      	movs	r0, #0
 800b448:	f7f4 ff1e 	bl	8000288 <__aeabi_dsub>
 800b44c:	4622      	mov	r2, r4
 800b44e:	4680      	mov	r8, r0
 800b450:	4689      	mov	r9, r1
 800b452:	462b      	mov	r3, r5
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	f7f4 ff16 	bl	8000288 <__aeabi_dsub>
 800b45c:	4632      	mov	r2, r6
 800b45e:	463b      	mov	r3, r7
 800b460:	f7f4 ff12 	bl	8000288 <__aeabi_dsub>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	4640      	mov	r0, r8
 800b46a:	4649      	mov	r1, r9
 800b46c:	e7da      	b.n	800b424 <__kernel_cos+0xec>
 800b46e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b4a8 <__kernel_cos+0x170>
 800b472:	e7db      	b.n	800b42c <__kernel_cos+0xf4>
 800b474:	f3af 8000 	nop.w
 800b478:	be8838d4 	.word	0xbe8838d4
 800b47c:	bda8fae9 	.word	0xbda8fae9
 800b480:	bdb4b1c4 	.word	0xbdb4b1c4
 800b484:	3e21ee9e 	.word	0x3e21ee9e
 800b488:	809c52ad 	.word	0x809c52ad
 800b48c:	3e927e4f 	.word	0x3e927e4f
 800b490:	19cb1590 	.word	0x19cb1590
 800b494:	3efa01a0 	.word	0x3efa01a0
 800b498:	16c15177 	.word	0x16c15177
 800b49c:	3f56c16c 	.word	0x3f56c16c
 800b4a0:	5555554c 	.word	0x5555554c
 800b4a4:	3fa55555 	.word	0x3fa55555
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	3ff00000 	.word	0x3ff00000
 800b4b0:	3fe00000 	.word	0x3fe00000
 800b4b4:	3fd33332 	.word	0x3fd33332
 800b4b8:	3ff00000 	.word	0x3ff00000
 800b4bc:	3fe90000 	.word	0x3fe90000
 800b4c0:	3fd20000 	.word	0x3fd20000
 800b4c4:	00000000 	.word	0x00000000

0800b4c8 <__kernel_rem_pio2>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	ed2d 8b02 	vpush	{d8}
 800b4d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b4d4:	f112 0f14 	cmn.w	r2, #20
 800b4d8:	9308      	str	r3, [sp, #32]
 800b4da:	9101      	str	r1, [sp, #4]
 800b4dc:	4bc6      	ldr	r3, [pc, #792]	; (800b7f8 <__kernel_rem_pio2+0x330>)
 800b4de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b4e0:	9009      	str	r0, [sp, #36]	; 0x24
 800b4e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	9b08      	ldr	r3, [sp, #32]
 800b4ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4ee:	bfa8      	it	ge
 800b4f0:	1ed4      	subge	r4, r2, #3
 800b4f2:	9306      	str	r3, [sp, #24]
 800b4f4:	bfb2      	itee	lt
 800b4f6:	2400      	movlt	r4, #0
 800b4f8:	2318      	movge	r3, #24
 800b4fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b4fe:	f06f 0317 	mvn.w	r3, #23
 800b502:	fb04 3303 	mla	r3, r4, r3, r3
 800b506:	eb03 0a02 	add.w	sl, r3, r2
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	9a06      	ldr	r2, [sp, #24]
 800b50e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b7e8 <__kernel_rem_pio2+0x320>
 800b512:	eb03 0802 	add.w	r8, r3, r2
 800b516:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b518:	1aa7      	subs	r7, r4, r2
 800b51a:	ae20      	add	r6, sp, #128	; 0x80
 800b51c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b520:	2500      	movs	r5, #0
 800b522:	4545      	cmp	r5, r8
 800b524:	dd18      	ble.n	800b558 <__kernel_rem_pio2+0x90>
 800b526:	9b08      	ldr	r3, [sp, #32]
 800b528:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b52c:	aa20      	add	r2, sp, #128	; 0x80
 800b52e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b7e8 <__kernel_rem_pio2+0x320>
 800b532:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b536:	f1c3 0301 	rsb	r3, r3, #1
 800b53a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	9a04      	ldr	r2, [sp, #16]
 800b544:	4443      	add	r3, r8
 800b546:	429a      	cmp	r2, r3
 800b548:	db2f      	blt.n	800b5aa <__kernel_rem_pio2+0xe2>
 800b54a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b54e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b552:	462f      	mov	r7, r5
 800b554:	2600      	movs	r6, #0
 800b556:	e01b      	b.n	800b590 <__kernel_rem_pio2+0xc8>
 800b558:	42ef      	cmn	r7, r5
 800b55a:	d407      	bmi.n	800b56c <__kernel_rem_pio2+0xa4>
 800b55c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b560:	f7f4 ffe0 	bl	8000524 <__aeabi_i2d>
 800b564:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b568:	3501      	adds	r5, #1
 800b56a:	e7da      	b.n	800b522 <__kernel_rem_pio2+0x5a>
 800b56c:	ec51 0b18 	vmov	r0, r1, d8
 800b570:	e7f8      	b.n	800b564 <__kernel_rem_pio2+0x9c>
 800b572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b576:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b57a:	f7f5 f83d 	bl	80005f8 <__aeabi_dmul>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b586:	f7f4 fe81 	bl	800028c <__adddf3>
 800b58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58e:	3601      	adds	r6, #1
 800b590:	9b06      	ldr	r3, [sp, #24]
 800b592:	429e      	cmp	r6, r3
 800b594:	f1a7 0708 	sub.w	r7, r7, #8
 800b598:	ddeb      	ble.n	800b572 <__kernel_rem_pio2+0xaa>
 800b59a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b59e:	3508      	adds	r5, #8
 800b5a0:	ecab 7b02 	vstmia	fp!, {d7}
 800b5a4:	f108 0801 	add.w	r8, r8, #1
 800b5a8:	e7ca      	b.n	800b540 <__kernel_rem_pio2+0x78>
 800b5aa:	9b04      	ldr	r3, [sp, #16]
 800b5ac:	aa0c      	add	r2, sp, #48	; 0x30
 800b5ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b5b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b5ba:	9c04      	ldr	r4, [sp, #16]
 800b5bc:	930a      	str	r3, [sp, #40]	; 0x28
 800b5be:	ab98      	add	r3, sp, #608	; 0x260
 800b5c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5c4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b5c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b5cc:	f8cd b008 	str.w	fp, [sp, #8]
 800b5d0:	4625      	mov	r5, r4
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	dc78      	bgt.n	800b6c8 <__kernel_rem_pio2+0x200>
 800b5d6:	ec47 6b10 	vmov	d0, r6, r7
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f000 fc9c 	bl	800bf18 <scalbn>
 800b5e0:	ec57 6b10 	vmov	r6, r7, d0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b5ea:	ee10 0a10 	vmov	r0, s0
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	ec41 0b10 	vmov	d0, r0, r1
 800b5f8:	f000 fb7a 	bl	800bcf0 <floor>
 800b5fc:	4b7f      	ldr	r3, [pc, #508]	; (800b7fc <__kernel_rem_pio2+0x334>)
 800b5fe:	ec51 0b10 	vmov	r0, r1, d0
 800b602:	2200      	movs	r2, #0
 800b604:	f7f4 fff8 	bl	80005f8 <__aeabi_dmul>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4630      	mov	r0, r6
 800b60e:	4639      	mov	r1, r7
 800b610:	f7f4 fe3a 	bl	8000288 <__aeabi_dsub>
 800b614:	460f      	mov	r7, r1
 800b616:	4606      	mov	r6, r0
 800b618:	f7f5 fa9e 	bl	8000b58 <__aeabi_d2iz>
 800b61c:	9007      	str	r0, [sp, #28]
 800b61e:	f7f4 ff81 	bl	8000524 <__aeabi_i2d>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 fe2d 	bl	8000288 <__aeabi_dsub>
 800b62e:	f1ba 0f00 	cmp.w	sl, #0
 800b632:	4606      	mov	r6, r0
 800b634:	460f      	mov	r7, r1
 800b636:	dd70      	ble.n	800b71a <__kernel_rem_pio2+0x252>
 800b638:	1e62      	subs	r2, r4, #1
 800b63a:	ab0c      	add	r3, sp, #48	; 0x30
 800b63c:	9d07      	ldr	r5, [sp, #28]
 800b63e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b642:	f1ca 0118 	rsb	r1, sl, #24
 800b646:	fa40 f301 	asr.w	r3, r0, r1
 800b64a:	441d      	add	r5, r3
 800b64c:	408b      	lsls	r3, r1
 800b64e:	1ac0      	subs	r0, r0, r3
 800b650:	ab0c      	add	r3, sp, #48	; 0x30
 800b652:	9507      	str	r5, [sp, #28]
 800b654:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b658:	f1ca 0317 	rsb	r3, sl, #23
 800b65c:	fa40 f303 	asr.w	r3, r0, r3
 800b660:	9302      	str	r3, [sp, #8]
 800b662:	9b02      	ldr	r3, [sp, #8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd66      	ble.n	800b736 <__kernel_rem_pio2+0x26e>
 800b668:	9b07      	ldr	r3, [sp, #28]
 800b66a:	2200      	movs	r2, #0
 800b66c:	3301      	adds	r3, #1
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	4615      	mov	r5, r2
 800b672:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b676:	4294      	cmp	r4, r2
 800b678:	f300 8099 	bgt.w	800b7ae <__kernel_rem_pio2+0x2e6>
 800b67c:	f1ba 0f00 	cmp.w	sl, #0
 800b680:	dd07      	ble.n	800b692 <__kernel_rem_pio2+0x1ca>
 800b682:	f1ba 0f01 	cmp.w	sl, #1
 800b686:	f000 80a5 	beq.w	800b7d4 <__kernel_rem_pio2+0x30c>
 800b68a:	f1ba 0f02 	cmp.w	sl, #2
 800b68e:	f000 80c1 	beq.w	800b814 <__kernel_rem_pio2+0x34c>
 800b692:	9b02      	ldr	r3, [sp, #8]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d14e      	bne.n	800b736 <__kernel_rem_pio2+0x26e>
 800b698:	4632      	mov	r2, r6
 800b69a:	463b      	mov	r3, r7
 800b69c:	4958      	ldr	r1, [pc, #352]	; (800b800 <__kernel_rem_pio2+0x338>)
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f7f4 fdf2 	bl	8000288 <__aeabi_dsub>
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	d044      	beq.n	800b736 <__kernel_rem_pio2+0x26e>
 800b6ac:	4650      	mov	r0, sl
 800b6ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b7f0 <__kernel_rem_pio2+0x328>
 800b6b2:	f000 fc31 	bl	800bf18 <scalbn>
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	ec53 2b10 	vmov	r2, r3, d0
 800b6be:	f7f4 fde3 	bl	8000288 <__aeabi_dsub>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	e036      	b.n	800b736 <__kernel_rem_pio2+0x26e>
 800b6c8:	4b4e      	ldr	r3, [pc, #312]	; (800b804 <__kernel_rem_pio2+0x33c>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 ff92 	bl	80005f8 <__aeabi_dmul>
 800b6d4:	f7f5 fa40 	bl	8000b58 <__aeabi_d2iz>
 800b6d8:	f7f4 ff24 	bl	8000524 <__aeabi_i2d>
 800b6dc:	4b4a      	ldr	r3, [pc, #296]	; (800b808 <__kernel_rem_pio2+0x340>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	f7f4 ff88 	bl	80005f8 <__aeabi_dmul>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f4 fdca 	bl	8000288 <__aeabi_dsub>
 800b6f4:	f7f5 fa30 	bl	8000b58 <__aeabi_d2iz>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	f843 0b04 	str.w	r0, [r3], #4
 800b6fe:	3d01      	subs	r5, #1
 800b700:	9302      	str	r3, [sp, #8]
 800b702:	ab70      	add	r3, sp, #448	; 0x1c0
 800b704:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	4640      	mov	r0, r8
 800b70e:	4649      	mov	r1, r9
 800b710:	f7f4 fdbc 	bl	800028c <__adddf3>
 800b714:	4606      	mov	r6, r0
 800b716:	460f      	mov	r7, r1
 800b718:	e75b      	b.n	800b5d2 <__kernel_rem_pio2+0x10a>
 800b71a:	d105      	bne.n	800b728 <__kernel_rem_pio2+0x260>
 800b71c:	1e63      	subs	r3, r4, #1
 800b71e:	aa0c      	add	r2, sp, #48	; 0x30
 800b720:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b724:	15c3      	asrs	r3, r0, #23
 800b726:	e79b      	b.n	800b660 <__kernel_rem_pio2+0x198>
 800b728:	4b38      	ldr	r3, [pc, #224]	; (800b80c <__kernel_rem_pio2+0x344>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	f7f5 f9ea 	bl	8000b04 <__aeabi_dcmpge>
 800b730:	2800      	cmp	r0, #0
 800b732:	d139      	bne.n	800b7a8 <__kernel_rem_pio2+0x2e0>
 800b734:	9002      	str	r0, [sp, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	2300      	movs	r3, #0
 800b73a:	4630      	mov	r0, r6
 800b73c:	4639      	mov	r1, r7
 800b73e:	f7f5 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b742:	2800      	cmp	r0, #0
 800b744:	f000 80b4 	beq.w	800b8b0 <__kernel_rem_pio2+0x3e8>
 800b748:	f104 3bff 	add.w	fp, r4, #4294967295
 800b74c:	465b      	mov	r3, fp
 800b74e:	2200      	movs	r2, #0
 800b750:	9904      	ldr	r1, [sp, #16]
 800b752:	428b      	cmp	r3, r1
 800b754:	da65      	bge.n	800b822 <__kernel_rem_pio2+0x35a>
 800b756:	2a00      	cmp	r2, #0
 800b758:	d07b      	beq.n	800b852 <__kernel_rem_pio2+0x38a>
 800b75a:	ab0c      	add	r3, sp, #48	; 0x30
 800b75c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b760:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 80a0 	beq.w	800b8aa <__kernel_rem_pio2+0x3e2>
 800b76a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b7f0 <__kernel_rem_pio2+0x328>
 800b76e:	4650      	mov	r0, sl
 800b770:	f000 fbd2 	bl	800bf18 <scalbn>
 800b774:	4f23      	ldr	r7, [pc, #140]	; (800b804 <__kernel_rem_pio2+0x33c>)
 800b776:	ec55 4b10 	vmov	r4, r5, d0
 800b77a:	46d8      	mov	r8, fp
 800b77c:	2600      	movs	r6, #0
 800b77e:	f1b8 0f00 	cmp.w	r8, #0
 800b782:	f280 80cf 	bge.w	800b924 <__kernel_rem_pio2+0x45c>
 800b786:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b7e8 <__kernel_rem_pio2+0x320>
 800b78a:	465f      	mov	r7, fp
 800b78c:	f04f 0800 	mov.w	r8, #0
 800b790:	2f00      	cmp	r7, #0
 800b792:	f2c0 80fd 	blt.w	800b990 <__kernel_rem_pio2+0x4c8>
 800b796:	ab70      	add	r3, sp, #448	; 0x1c0
 800b798:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b810 <__kernel_rem_pio2+0x348>
 800b79c:	ec55 4b18 	vmov	r4, r5, d8
 800b7a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b7a4:	2600      	movs	r6, #0
 800b7a6:	e0e5      	b.n	800b974 <__kernel_rem_pio2+0x4ac>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	9302      	str	r3, [sp, #8]
 800b7ac:	e75c      	b.n	800b668 <__kernel_rem_pio2+0x1a0>
 800b7ae:	f8db 3000 	ldr.w	r3, [fp]
 800b7b2:	b955      	cbnz	r5, 800b7ca <__kernel_rem_pio2+0x302>
 800b7b4:	b123      	cbz	r3, 800b7c0 <__kernel_rem_pio2+0x2f8>
 800b7b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b7ba:	f8cb 3000 	str.w	r3, [fp]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	3201      	adds	r2, #1
 800b7c2:	f10b 0b04 	add.w	fp, fp, #4
 800b7c6:	461d      	mov	r5, r3
 800b7c8:	e755      	b.n	800b676 <__kernel_rem_pio2+0x1ae>
 800b7ca:	1acb      	subs	r3, r1, r3
 800b7cc:	f8cb 3000 	str.w	r3, [fp]
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	e7f5      	b.n	800b7c0 <__kernel_rem_pio2+0x2f8>
 800b7d4:	1e62      	subs	r2, r4, #1
 800b7d6:	ab0c      	add	r3, sp, #48	; 0x30
 800b7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7e0:	a90c      	add	r1, sp, #48	; 0x30
 800b7e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7e6:	e754      	b.n	800b692 <__kernel_rem_pio2+0x1ca>
	...
 800b7f4:	3ff00000 	.word	0x3ff00000
 800b7f8:	0800c468 	.word	0x0800c468
 800b7fc:	40200000 	.word	0x40200000
 800b800:	3ff00000 	.word	0x3ff00000
 800b804:	3e700000 	.word	0x3e700000
 800b808:	41700000 	.word	0x41700000
 800b80c:	3fe00000 	.word	0x3fe00000
 800b810:	0800c428 	.word	0x0800c428
 800b814:	1e62      	subs	r2, r4, #1
 800b816:	ab0c      	add	r3, sp, #48	; 0x30
 800b818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b820:	e7de      	b.n	800b7e0 <__kernel_rem_pio2+0x318>
 800b822:	a90c      	add	r1, sp, #48	; 0x30
 800b824:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b828:	3b01      	subs	r3, #1
 800b82a:	430a      	orrs	r2, r1
 800b82c:	e790      	b.n	800b750 <__kernel_rem_pio2+0x288>
 800b82e:	3301      	adds	r3, #1
 800b830:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b834:	2900      	cmp	r1, #0
 800b836:	d0fa      	beq.n	800b82e <__kernel_rem_pio2+0x366>
 800b838:	9a08      	ldr	r2, [sp, #32]
 800b83a:	18e3      	adds	r3, r4, r3
 800b83c:	18a6      	adds	r6, r4, r2
 800b83e:	aa20      	add	r2, sp, #128	; 0x80
 800b840:	1c65      	adds	r5, r4, #1
 800b842:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b846:	9302      	str	r3, [sp, #8]
 800b848:	9b02      	ldr	r3, [sp, #8]
 800b84a:	42ab      	cmp	r3, r5
 800b84c:	da04      	bge.n	800b858 <__kernel_rem_pio2+0x390>
 800b84e:	461c      	mov	r4, r3
 800b850:	e6b5      	b.n	800b5be <__kernel_rem_pio2+0xf6>
 800b852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b854:	2301      	movs	r3, #1
 800b856:	e7eb      	b.n	800b830 <__kernel_rem_pio2+0x368>
 800b858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b85a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b85e:	f7f4 fe61 	bl	8000524 <__aeabi_i2d>
 800b862:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b868:	46b3      	mov	fp, r6
 800b86a:	461c      	mov	r4, r3
 800b86c:	2700      	movs	r7, #0
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	9b06      	ldr	r3, [sp, #24]
 800b878:	429f      	cmp	r7, r3
 800b87a:	dd06      	ble.n	800b88a <__kernel_rem_pio2+0x3c2>
 800b87c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b87e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b882:	e9c3 8900 	strd	r8, r9, [r3]
 800b886:	3501      	adds	r5, #1
 800b888:	e7de      	b.n	800b848 <__kernel_rem_pio2+0x380>
 800b88a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b88e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b892:	f7f4 feb1 	bl	80005f8 <__aeabi_dmul>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4640      	mov	r0, r8
 800b89c:	4649      	mov	r1, r9
 800b89e:	f7f4 fcf5 	bl	800028c <__adddf3>
 800b8a2:	3701      	adds	r7, #1
 800b8a4:	4680      	mov	r8, r0
 800b8a6:	4689      	mov	r9, r1
 800b8a8:	e7e5      	b.n	800b876 <__kernel_rem_pio2+0x3ae>
 800b8aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8ae:	e754      	b.n	800b75a <__kernel_rem_pio2+0x292>
 800b8b0:	ec47 6b10 	vmov	d0, r6, r7
 800b8b4:	f1ca 0000 	rsb	r0, sl, #0
 800b8b8:	f000 fb2e 	bl	800bf18 <scalbn>
 800b8bc:	ec57 6b10 	vmov	r6, r7, d0
 800b8c0:	4b9f      	ldr	r3, [pc, #636]	; (800bb40 <__kernel_rem_pio2+0x678>)
 800b8c2:	ee10 0a10 	vmov	r0, s0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	f7f5 f91b 	bl	8000b04 <__aeabi_dcmpge>
 800b8ce:	b300      	cbz	r0, 800b912 <__kernel_rem_pio2+0x44a>
 800b8d0:	4b9c      	ldr	r3, [pc, #624]	; (800bb44 <__kernel_rem_pio2+0x67c>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f4 fe8e 	bl	80005f8 <__aeabi_dmul>
 800b8dc:	f7f5 f93c 	bl	8000b58 <__aeabi_d2iz>
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	f7f4 fe1f 	bl	8000524 <__aeabi_i2d>
 800b8e6:	4b96      	ldr	r3, [pc, #600]	; (800bb40 <__kernel_rem_pio2+0x678>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f7f4 fe85 	bl	80005f8 <__aeabi_dmul>
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7f4 fcc7 	bl	8000288 <__aeabi_dsub>
 800b8fa:	f7f5 f92d 	bl	8000b58 <__aeabi_d2iz>
 800b8fe:	f104 0b01 	add.w	fp, r4, #1
 800b902:	ab0c      	add	r3, sp, #48	; 0x30
 800b904:	f10a 0a18 	add.w	sl, sl, #24
 800b908:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b90c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b910:	e72b      	b.n	800b76a <__kernel_rem_pio2+0x2a2>
 800b912:	4630      	mov	r0, r6
 800b914:	4639      	mov	r1, r7
 800b916:	f7f5 f91f 	bl	8000b58 <__aeabi_d2iz>
 800b91a:	ab0c      	add	r3, sp, #48	; 0x30
 800b91c:	46a3      	mov	fp, r4
 800b91e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b922:	e722      	b.n	800b76a <__kernel_rem_pio2+0x2a2>
 800b924:	ab70      	add	r3, sp, #448	; 0x1c0
 800b926:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b92a:	ab0c      	add	r3, sp, #48	; 0x30
 800b92c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b930:	f7f4 fdf8 	bl	8000524 <__aeabi_i2d>
 800b934:	4622      	mov	r2, r4
 800b936:	462b      	mov	r3, r5
 800b938:	f7f4 fe5e 	bl	80005f8 <__aeabi_dmul>
 800b93c:	4632      	mov	r2, r6
 800b93e:	e9c9 0100 	strd	r0, r1, [r9]
 800b942:	463b      	mov	r3, r7
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f7f4 fe56 	bl	80005f8 <__aeabi_dmul>
 800b94c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	e713      	b.n	800b77e <__kernel_rem_pio2+0x2b6>
 800b956:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b95a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b95e:	f7f4 fe4b 	bl	80005f8 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f4 fc8f 	bl	800028c <__adddf3>
 800b96e:	3601      	adds	r6, #1
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	9b04      	ldr	r3, [sp, #16]
 800b976:	429e      	cmp	r6, r3
 800b978:	dc01      	bgt.n	800b97e <__kernel_rem_pio2+0x4b6>
 800b97a:	45b0      	cmp	r8, r6
 800b97c:	daeb      	bge.n	800b956 <__kernel_rem_pio2+0x48e>
 800b97e:	ab48      	add	r3, sp, #288	; 0x120
 800b980:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b984:	e9c3 4500 	strd	r4, r5, [r3]
 800b988:	3f01      	subs	r7, #1
 800b98a:	f108 0801 	add.w	r8, r8, #1
 800b98e:	e6ff      	b.n	800b790 <__kernel_rem_pio2+0x2c8>
 800b990:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b992:	2b02      	cmp	r3, #2
 800b994:	dc0b      	bgt.n	800b9ae <__kernel_rem_pio2+0x4e6>
 800b996:	2b00      	cmp	r3, #0
 800b998:	dc6e      	bgt.n	800ba78 <__kernel_rem_pio2+0x5b0>
 800b99a:	d045      	beq.n	800ba28 <__kernel_rem_pio2+0x560>
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	f003 0007 	and.w	r0, r3, #7
 800b9a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b9a6:	ecbd 8b02 	vpop	{d8}
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d1f3      	bne.n	800b99c <__kernel_rem_pio2+0x4d4>
 800b9b4:	ab48      	add	r3, sp, #288	; 0x120
 800b9b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b9ba:	46d0      	mov	r8, sl
 800b9bc:	46d9      	mov	r9, fp
 800b9be:	f1b9 0f00 	cmp.w	r9, #0
 800b9c2:	f1a8 0808 	sub.w	r8, r8, #8
 800b9c6:	dc64      	bgt.n	800ba92 <__kernel_rem_pio2+0x5ca>
 800b9c8:	465c      	mov	r4, fp
 800b9ca:	2c01      	cmp	r4, #1
 800b9cc:	f1aa 0a08 	sub.w	sl, sl, #8
 800b9d0:	dc7e      	bgt.n	800bad0 <__kernel_rem_pio2+0x608>
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	f1bb 0f01 	cmp.w	fp, #1
 800b9da:	f300 8097 	bgt.w	800bb0c <__kernel_rem_pio2+0x644>
 800b9de:	9b02      	ldr	r3, [sp, #8]
 800b9e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b9e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f040 8099 	bne.w	800bb20 <__kernel_rem_pio2+0x658>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	e9c3 5600 	strd	r5, r6, [r3]
 800b9f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b9f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b9fc:	e7ce      	b.n	800b99c <__kernel_rem_pio2+0x4d4>
 800b9fe:	ab48      	add	r3, sp, #288	; 0x120
 800ba00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f7f4 fc40 	bl	800028c <__adddf3>
 800ba0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba10:	f1bb 0f00 	cmp.w	fp, #0
 800ba14:	daf3      	bge.n	800b9fe <__kernel_rem_pio2+0x536>
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	b113      	cbz	r3, 800ba20 <__kernel_rem_pio2+0x558>
 800ba1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba1e:	4619      	mov	r1, r3
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	e9c3 0100 	strd	r0, r1, [r3]
 800ba26:	e7b9      	b.n	800b99c <__kernel_rem_pio2+0x4d4>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	e7f0      	b.n	800ba10 <__kernel_rem_pio2+0x548>
 800ba2e:	ab48      	add	r3, sp, #288	; 0x120
 800ba30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	3c01      	subs	r4, #1
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	daf5      	bge.n	800ba2e <__kernel_rem_pio2+0x566>
 800ba42:	9b02      	ldr	r3, [sp, #8]
 800ba44:	b1e3      	cbz	r3, 800ba80 <__kernel_rem_pio2+0x5b8>
 800ba46:	4602      	mov	r2, r0
 800ba48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba4c:	9c01      	ldr	r4, [sp, #4]
 800ba4e:	e9c4 2300 	strd	r2, r3, [r4]
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ba5a:	f7f4 fc15 	bl	8000288 <__aeabi_dsub>
 800ba5e:	ad4a      	add	r5, sp, #296	; 0x128
 800ba60:	2401      	movs	r4, #1
 800ba62:	45a3      	cmp	fp, r4
 800ba64:	da0f      	bge.n	800ba86 <__kernel_rem_pio2+0x5be>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	b113      	cbz	r3, 800ba70 <__kernel_rem_pio2+0x5a8>
 800ba6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba6e:	4619      	mov	r1, r3
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ba76:	e791      	b.n	800b99c <__kernel_rem_pio2+0x4d4>
 800ba78:	465c      	mov	r4, fp
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	e7de      	b.n	800ba3e <__kernel_rem_pio2+0x576>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	e7e2      	b.n	800ba4c <__kernel_rem_pio2+0x584>
 800ba86:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ba8a:	f7f4 fbff 	bl	800028c <__adddf3>
 800ba8e:	3401      	adds	r4, #1
 800ba90:	e7e7      	b.n	800ba62 <__kernel_rem_pio2+0x59a>
 800ba92:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ba96:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 fbf3 	bl	800028c <__adddf3>
 800baa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f4 fbe9 	bl	8000288 <__aeabi_dsub>
 800bab6:	4632      	mov	r2, r6
 800bab8:	463b      	mov	r3, r7
 800baba:	f7f4 fbe7 	bl	800028c <__adddf3>
 800babe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bac2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800bac6:	ed88 7b00 	vstr	d7, [r8]
 800baca:	f109 39ff 	add.w	r9, r9, #4294967295
 800bace:	e776      	b.n	800b9be <__kernel_rem_pio2+0x4f6>
 800bad0:	e9da 8900 	ldrd	r8, r9, [sl]
 800bad4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bad8:	4640      	mov	r0, r8
 800bada:	4632      	mov	r2, r6
 800badc:	463b      	mov	r3, r7
 800bade:	4649      	mov	r1, r9
 800bae0:	f7f4 fbd4 	bl	800028c <__adddf3>
 800bae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4640      	mov	r0, r8
 800baee:	4649      	mov	r1, r9
 800baf0:	f7f4 fbca 	bl	8000288 <__aeabi_dsub>
 800baf4:	4632      	mov	r2, r6
 800baf6:	463b      	mov	r3, r7
 800baf8:	f7f4 fbc8 	bl	800028c <__adddf3>
 800bafc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bb00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb04:	ed8a 7b00 	vstr	d7, [sl]
 800bb08:	3c01      	subs	r4, #1
 800bb0a:	e75e      	b.n	800b9ca <__kernel_rem_pio2+0x502>
 800bb0c:	ab48      	add	r3, sp, #288	; 0x120
 800bb0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f7f4 fbb9 	bl	800028c <__adddf3>
 800bb1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb1e:	e75a      	b.n	800b9d6 <__kernel_rem_pio2+0x50e>
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	9a01      	ldr	r2, [sp, #4]
 800bb24:	601d      	str	r5, [r3, #0]
 800bb26:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bb2a:	605c      	str	r4, [r3, #4]
 800bb2c:	609f      	str	r7, [r3, #8]
 800bb2e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bb32:	60d3      	str	r3, [r2, #12]
 800bb34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb38:	6110      	str	r0, [r2, #16]
 800bb3a:	6153      	str	r3, [r2, #20]
 800bb3c:	e72e      	b.n	800b99c <__kernel_rem_pio2+0x4d4>
 800bb3e:	bf00      	nop
 800bb40:	41700000 	.word	0x41700000
 800bb44:	3e700000 	.word	0x3e700000

0800bb48 <__kernel_sin>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	ed2d 8b04 	vpush	{d8-d9}
 800bb50:	eeb0 8a41 	vmov.f32	s16, s2
 800bb54:	eef0 8a61 	vmov.f32	s17, s3
 800bb58:	ec55 4b10 	vmov	r4, r5, d0
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb66:	9001      	str	r0, [sp, #4]
 800bb68:	da06      	bge.n	800bb78 <__kernel_sin+0x30>
 800bb6a:	ee10 0a10 	vmov	r0, s0
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fff2 	bl	8000b58 <__aeabi_d2iz>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d051      	beq.n	800bc1c <__kernel_sin+0xd4>
 800bb78:	4622      	mov	r2, r4
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	4682      	mov	sl, r0
 800bb86:	468b      	mov	fp, r1
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f7f4 fd32 	bl	80005f8 <__aeabi_dmul>
 800bb94:	a341      	add	r3, pc, #260	; (adr r3, 800bc9c <__kernel_sin+0x154>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	4689      	mov	r9, r1
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4659      	mov	r1, fp
 800bba2:	f7f4 fd29 	bl	80005f8 <__aeabi_dmul>
 800bba6:	a33f      	add	r3, pc, #252	; (adr r3, 800bca4 <__kernel_sin+0x15c>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fb6c 	bl	8000288 <__aeabi_dsub>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	465b      	mov	r3, fp
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	a33c      	add	r3, pc, #240	; (adr r3, 800bcac <__kernel_sin+0x164>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb65 	bl	800028c <__adddf3>
 800bbc2:	4652      	mov	r2, sl
 800bbc4:	465b      	mov	r3, fp
 800bbc6:	f7f4 fd17 	bl	80005f8 <__aeabi_dmul>
 800bbca:	a33a      	add	r3, pc, #232	; (adr r3, 800bcb4 <__kernel_sin+0x16c>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb5a 	bl	8000288 <__aeabi_dsub>
 800bbd4:	4652      	mov	r2, sl
 800bbd6:	465b      	mov	r3, fp
 800bbd8:	f7f4 fd0e 	bl	80005f8 <__aeabi_dmul>
 800bbdc:	a337      	add	r3, pc, #220	; (adr r3, 800bcbc <__kernel_sin+0x174>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fb53 	bl	800028c <__adddf3>
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	4606      	mov	r6, r0
 800bbea:	460f      	mov	r7, r1
 800bbec:	b9eb      	cbnz	r3, 800bc2a <__kernel_sin+0xe2>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	a325      	add	r3, pc, #148	; (adr r3, 800bc90 <__kernel_sin+0x148>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fb42 	bl	8000288 <__aeabi_dsub>
 800bc04:	4642      	mov	r2, r8
 800bc06:	464b      	mov	r3, r9
 800bc08:	f7f4 fcf6 	bl	80005f8 <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4620      	mov	r0, r4
 800bc12:	4629      	mov	r1, r5
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	ec45 4b10 	vmov	d0, r4, r5
 800bc20:	b003      	add	sp, #12
 800bc22:	ecbd 8b04 	vpop	{d8-d9}
 800bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2a:	4b1b      	ldr	r3, [pc, #108]	; (800bc98 <__kernel_sin+0x150>)
 800bc2c:	ec51 0b18 	vmov	r0, r1, d8
 800bc30:	2200      	movs	r2, #0
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	4632      	mov	r2, r6
 800bc38:	ec41 0b19 	vmov	d9, r0, r1
 800bc3c:	463b      	mov	r3, r7
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	ec51 0b19 	vmov	r0, r1, d9
 800bc4e:	f7f4 fb1b 	bl	8000288 <__aeabi_dsub>
 800bc52:	4652      	mov	r2, sl
 800bc54:	465b      	mov	r3, fp
 800bc56:	f7f4 fccf 	bl	80005f8 <__aeabi_dmul>
 800bc5a:	ec53 2b18 	vmov	r2, r3, d8
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	a30b      	add	r3, pc, #44	; (adr r3, 800bc90 <__kernel_sin+0x148>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	4606      	mov	r6, r0
 800bc6a:	460f      	mov	r7, r1
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 fcc2 	bl	80005f8 <__aeabi_dmul>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	f7f4 fb06 	bl	800028c <__adddf3>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4620      	mov	r0, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	f7f4 fafe 	bl	8000288 <__aeabi_dsub>
 800bc8c:	e7c4      	b.n	800bc18 <__kernel_sin+0xd0>
 800bc8e:	bf00      	nop
 800bc90:	55555549 	.word	0x55555549
 800bc94:	3fc55555 	.word	0x3fc55555
 800bc98:	3fe00000 	.word	0x3fe00000
 800bc9c:	5acfd57c 	.word	0x5acfd57c
 800bca0:	3de5d93a 	.word	0x3de5d93a
 800bca4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bca8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bcac:	57b1fe7d 	.word	0x57b1fe7d
 800bcb0:	3ec71de3 	.word	0x3ec71de3
 800bcb4:	19c161d5 	.word	0x19c161d5
 800bcb8:	3f2a01a0 	.word	0x3f2a01a0
 800bcbc:	1110f8a6 	.word	0x1110f8a6
 800bcc0:	3f811111 	.word	0x3f811111

0800bcc4 <fabs>:
 800bcc4:	ec51 0b10 	vmov	r0, r1, d0
 800bcc8:	ee10 2a10 	vmov	r2, s0
 800bccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcd0:	ec43 2b10 	vmov	d0, r2, r3
 800bcd4:	4770      	bx	lr

0800bcd6 <finite>:
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	ed8d 0b00 	vstr	d0, [sp]
 800bcdc:	9801      	ldr	r0, [sp, #4]
 800bcde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bce2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bce6:	0fc0      	lsrs	r0, r0, #31
 800bce8:	b002      	add	sp, #8
 800bcea:	4770      	bx	lr
 800bcec:	0000      	movs	r0, r0
	...

0800bcf0 <floor>:
 800bcf0:	ec51 0b10 	vmov	r0, r1, d0
 800bcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bcfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bd00:	2e13      	cmp	r6, #19
 800bd02:	ee10 5a10 	vmov	r5, s0
 800bd06:	ee10 8a10 	vmov	r8, s0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	dc32      	bgt.n	800bd74 <floor+0x84>
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	da14      	bge.n	800bd3c <floor+0x4c>
 800bd12:	a333      	add	r3, pc, #204	; (adr r3, 800bde0 <floor+0xf0>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f7f4 fefa 	bl	8000b18 <__aeabi_dcmpgt>
 800bd24:	b138      	cbz	r0, 800bd36 <floor+0x46>
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	da57      	bge.n	800bdda <floor+0xea>
 800bd2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bd2e:	431d      	orrs	r5, r3
 800bd30:	d001      	beq.n	800bd36 <floor+0x46>
 800bd32:	4c2d      	ldr	r4, [pc, #180]	; (800bde8 <floor+0xf8>)
 800bd34:	2500      	movs	r5, #0
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	e025      	b.n	800bd88 <floor+0x98>
 800bd3c:	4f2b      	ldr	r7, [pc, #172]	; (800bdec <floor+0xfc>)
 800bd3e:	4137      	asrs	r7, r6
 800bd40:	ea01 0307 	and.w	r3, r1, r7
 800bd44:	4303      	orrs	r3, r0
 800bd46:	d01f      	beq.n	800bd88 <floor+0x98>
 800bd48:	a325      	add	r3, pc, #148	; (adr r3, 800bde0 <floor+0xf0>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fa9d 	bl	800028c <__adddf3>
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	f7f4 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d0eb      	beq.n	800bd36 <floor+0x46>
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	bfbe      	ittt	lt
 800bd62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bd66:	fa43 f606 	asrlt.w	r6, r3, r6
 800bd6a:	19a4      	addlt	r4, r4, r6
 800bd6c:	ea24 0407 	bic.w	r4, r4, r7
 800bd70:	2500      	movs	r5, #0
 800bd72:	e7e0      	b.n	800bd36 <floor+0x46>
 800bd74:	2e33      	cmp	r6, #51	; 0x33
 800bd76:	dd0b      	ble.n	800bd90 <floor+0xa0>
 800bd78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd7c:	d104      	bne.n	800bd88 <floor+0x98>
 800bd7e:	ee10 2a10 	vmov	r2, s0
 800bd82:	460b      	mov	r3, r1
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	ec41 0b10 	vmov	d0, r0, r1
 800bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	fa23 f707 	lsr.w	r7, r3, r7
 800bd9c:	4207      	tst	r7, r0
 800bd9e:	d0f3      	beq.n	800bd88 <floor+0x98>
 800bda0:	a30f      	add	r3, pc, #60	; (adr r3, 800bde0 <floor+0xf0>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fa71 	bl	800028c <__adddf3>
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2300      	movs	r3, #0
 800bdae:	f7f4 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d0bf      	beq.n	800bd36 <floor+0x46>
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	da02      	bge.n	800bdc0 <floor+0xd0>
 800bdba:	2e14      	cmp	r6, #20
 800bdbc:	d103      	bne.n	800bdc6 <floor+0xd6>
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	ea25 0507 	bic.w	r5, r5, r7
 800bdc4:	e7b7      	b.n	800bd36 <floor+0x46>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bdcc:	fa03 f606 	lsl.w	r6, r3, r6
 800bdd0:	4435      	add	r5, r6
 800bdd2:	4545      	cmp	r5, r8
 800bdd4:	bf38      	it	cc
 800bdd6:	18e4      	addcc	r4, r4, r3
 800bdd8:	e7f2      	b.n	800bdc0 <floor+0xd0>
 800bdda:	2500      	movs	r5, #0
 800bddc:	462c      	mov	r4, r5
 800bdde:	e7aa      	b.n	800bd36 <floor+0x46>
 800bde0:	8800759c 	.word	0x8800759c
 800bde4:	7e37e43c 	.word	0x7e37e43c
 800bde8:	bff00000 	.word	0xbff00000
 800bdec:	000fffff 	.word	0x000fffff

0800bdf0 <nan>:
 800bdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdf8 <nan+0x8>
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	7ff80000 	.word	0x7ff80000

0800be00 <rint>:
 800be00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be02:	ec51 0b10 	vmov	r0, r1, d0
 800be06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be0a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800be0e:	2e13      	cmp	r6, #19
 800be10:	ee10 4a10 	vmov	r4, s0
 800be14:	460b      	mov	r3, r1
 800be16:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800be1a:	dc58      	bgt.n	800bece <rint+0xce>
 800be1c:	2e00      	cmp	r6, #0
 800be1e:	da2b      	bge.n	800be78 <rint+0x78>
 800be20:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800be24:	4302      	orrs	r2, r0
 800be26:	d023      	beq.n	800be70 <rint+0x70>
 800be28:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800be2c:	4302      	orrs	r2, r0
 800be2e:	4254      	negs	r4, r2
 800be30:	4314      	orrs	r4, r2
 800be32:	0c4b      	lsrs	r3, r1, #17
 800be34:	0b24      	lsrs	r4, r4, #12
 800be36:	045b      	lsls	r3, r3, #17
 800be38:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800be3c:	ea44 0103 	orr.w	r1, r4, r3
 800be40:	4b32      	ldr	r3, [pc, #200]	; (800bf0c <rint+0x10c>)
 800be42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be46:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 fa1b 	bl	800028c <__adddf3>
 800be56:	e9cd 0100 	strd	r0, r1, [sp]
 800be5a:	463b      	mov	r3, r7
 800be5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be60:	4632      	mov	r2, r6
 800be62:	f7f4 fa11 	bl	8000288 <__aeabi_dsub>
 800be66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be6a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800be6e:	4639      	mov	r1, r7
 800be70:	ec41 0b10 	vmov	d0, r0, r1
 800be74:	b003      	add	sp, #12
 800be76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be78:	4a25      	ldr	r2, [pc, #148]	; (800bf10 <rint+0x110>)
 800be7a:	4132      	asrs	r2, r6
 800be7c:	ea01 0702 	and.w	r7, r1, r2
 800be80:	4307      	orrs	r7, r0
 800be82:	d0f5      	beq.n	800be70 <rint+0x70>
 800be84:	0851      	lsrs	r1, r2, #1
 800be86:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800be8a:	4314      	orrs	r4, r2
 800be8c:	d00c      	beq.n	800bea8 <rint+0xa8>
 800be8e:	ea23 0201 	bic.w	r2, r3, r1
 800be92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be96:	2e13      	cmp	r6, #19
 800be98:	fa43 f606 	asr.w	r6, r3, r6
 800be9c:	bf0c      	ite	eq
 800be9e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bea2:	2400      	movne	r4, #0
 800bea4:	ea42 0306 	orr.w	r3, r2, r6
 800bea8:	4918      	ldr	r1, [pc, #96]	; (800bf0c <rint+0x10c>)
 800beaa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800beae:	4622      	mov	r2, r4
 800beb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800beb4:	4620      	mov	r0, r4
 800beb6:	4629      	mov	r1, r5
 800beb8:	f7f4 f9e8 	bl	800028c <__adddf3>
 800bebc:	e9cd 0100 	strd	r0, r1, [sp]
 800bec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec4:	4622      	mov	r2, r4
 800bec6:	462b      	mov	r3, r5
 800bec8:	f7f4 f9de 	bl	8000288 <__aeabi_dsub>
 800becc:	e7d0      	b.n	800be70 <rint+0x70>
 800bece:	2e33      	cmp	r6, #51	; 0x33
 800bed0:	dd07      	ble.n	800bee2 <rint+0xe2>
 800bed2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bed6:	d1cb      	bne.n	800be70 <rint+0x70>
 800bed8:	ee10 2a10 	vmov	r2, s0
 800bedc:	f7f4 f9d6 	bl	800028c <__adddf3>
 800bee0:	e7c6      	b.n	800be70 <rint+0x70>
 800bee2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bee6:	f04f 36ff 	mov.w	r6, #4294967295
 800beea:	40d6      	lsrs	r6, r2
 800beec:	4230      	tst	r0, r6
 800beee:	d0bf      	beq.n	800be70 <rint+0x70>
 800bef0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800bef4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800bef8:	bf1f      	itttt	ne
 800befa:	ea24 0101 	bicne.w	r1, r4, r1
 800befe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bf02:	fa44 f202 	asrne.w	r2, r4, r2
 800bf06:	ea41 0402 	orrne.w	r4, r1, r2
 800bf0a:	e7cd      	b.n	800bea8 <rint+0xa8>
 800bf0c:	0800c478 	.word	0x0800c478
 800bf10:	000fffff 	.word	0x000fffff
 800bf14:	00000000 	.word	0x00000000

0800bf18 <scalbn>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	ec55 4b10 	vmov	r4, r5, d0
 800bf1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bf22:	4606      	mov	r6, r0
 800bf24:	462b      	mov	r3, r5
 800bf26:	b99a      	cbnz	r2, 800bf50 <scalbn+0x38>
 800bf28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf2c:	4323      	orrs	r3, r4
 800bf2e:	d036      	beq.n	800bf9e <scalbn+0x86>
 800bf30:	4b39      	ldr	r3, [pc, #228]	; (800c018 <scalbn+0x100>)
 800bf32:	4629      	mov	r1, r5
 800bf34:	ee10 0a10 	vmov	r0, s0
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f7f4 fb5d 	bl	80005f8 <__aeabi_dmul>
 800bf3e:	4b37      	ldr	r3, [pc, #220]	; (800c01c <scalbn+0x104>)
 800bf40:	429e      	cmp	r6, r3
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	da10      	bge.n	800bf6a <scalbn+0x52>
 800bf48:	a32b      	add	r3, pc, #172	; (adr r3, 800bff8 <scalbn+0xe0>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	e03a      	b.n	800bfc6 <scalbn+0xae>
 800bf50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf54:	428a      	cmp	r2, r1
 800bf56:	d10c      	bne.n	800bf72 <scalbn+0x5a>
 800bf58:	ee10 2a10 	vmov	r2, s0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 f994 	bl	800028c <__adddf3>
 800bf64:	4604      	mov	r4, r0
 800bf66:	460d      	mov	r5, r1
 800bf68:	e019      	b.n	800bf9e <scalbn+0x86>
 800bf6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf6e:	460b      	mov	r3, r1
 800bf70:	3a36      	subs	r2, #54	; 0x36
 800bf72:	4432      	add	r2, r6
 800bf74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf78:	428a      	cmp	r2, r1
 800bf7a:	dd08      	ble.n	800bf8e <scalbn+0x76>
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	a120      	add	r1, pc, #128	; (adr r1, 800c000 <scalbn+0xe8>)
 800bf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf84:	da1c      	bge.n	800bfc0 <scalbn+0xa8>
 800bf86:	a120      	add	r1, pc, #128	; (adr r1, 800c008 <scalbn+0xf0>)
 800bf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf8c:	e018      	b.n	800bfc0 <scalbn+0xa8>
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	dd08      	ble.n	800bfa4 <scalbn+0x8c>
 800bf92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf9e:	ec45 4b10 	vmov	d0, r4, r5
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bfa8:	da19      	bge.n	800bfde <scalbn+0xc6>
 800bfaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bfae:	429e      	cmp	r6, r3
 800bfb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bfb4:	dd0a      	ble.n	800bfcc <scalbn+0xb4>
 800bfb6:	a112      	add	r1, pc, #72	; (adr r1, 800c000 <scalbn+0xe8>)
 800bfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e2      	bne.n	800bf86 <scalbn+0x6e>
 800bfc0:	a30f      	add	r3, pc, #60	; (adr r3, 800c000 <scalbn+0xe8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 fb17 	bl	80005f8 <__aeabi_dmul>
 800bfca:	e7cb      	b.n	800bf64 <scalbn+0x4c>
 800bfcc:	a10a      	add	r1, pc, #40	; (adr r1, 800bff8 <scalbn+0xe0>)
 800bfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0b8      	beq.n	800bf48 <scalbn+0x30>
 800bfd6:	a10e      	add	r1, pc, #56	; (adr r1, 800c010 <scalbn+0xf8>)
 800bfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfdc:	e7b4      	b.n	800bf48 <scalbn+0x30>
 800bfde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfe2:	3236      	adds	r2, #54	; 0x36
 800bfe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bfec:	4620      	mov	r0, r4
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <scalbn+0x108>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	e7e8      	b.n	800bfc6 <scalbn+0xae>
 800bff4:	f3af 8000 	nop.w
 800bff8:	c2f8f359 	.word	0xc2f8f359
 800bffc:	01a56e1f 	.word	0x01a56e1f
 800c000:	8800759c 	.word	0x8800759c
 800c004:	7e37e43c 	.word	0x7e37e43c
 800c008:	8800759c 	.word	0x8800759c
 800c00c:	fe37e43c 	.word	0xfe37e43c
 800c010:	c2f8f359 	.word	0xc2f8f359
 800c014:	81a56e1f 	.word	0x81a56e1f
 800c018:	43500000 	.word	0x43500000
 800c01c:	ffff3cb0 	.word	0xffff3cb0
 800c020:	3c900000 	.word	0x3c900000

0800c024 <_init>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	bf00      	nop
 800c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02a:	bc08      	pop	{r3}
 800c02c:	469e      	mov	lr, r3
 800c02e:	4770      	bx	lr

0800c030 <_fini>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr
